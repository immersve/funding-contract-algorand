#pragma version 10

// This TEAL was generated by TEALScript v0.82.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// onlyOwner(): void
//
// Assert the transaction sender is the owner of the contract.
onlyOwner:
	proto 0 0

	// src/roles/Ownable.algo.ts:52
	// assert(this.txn.sender === this._owner.value)
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	assert
	retsub

// isOwner(): boolean
//
// Checks if the current transaction sender is the owner.
// @returns {boolean} True if the sender is the owner, false otherwise.
isOwner:
	proto 0 1

	// src/roles/Ownable.algo.ts:60
	// return this.txn.sender === this._owner.value;
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	retsub

// owner()address
abi_route_owner:
	// The ABI return prefix
	byte 0x151f7c75

	// execute owner()address
	callsub owner
	concat
	log
	int 1
	return

// owner(): Address
owner:
	proto 0 1

	// src/roles/Ownable.algo.ts:66
	// return this._owner.value;
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	retsub

// _transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// @param newOwner The address of the new owner.
_transferOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/roles/Ownable.algo.ts:75
	// previousOwner = this._owner.exists ? this._owner.value : globals.zeroAddress
	txna Applications 0
	byte 0x5f6f776e6572 // "_owner"
	app_global_get_ex
	swap
	pop
	bz ternary1_false
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	b ternary1_end

ternary1_false:
	global ZeroAddress

ternary1_end:
	frame_bury 0 // previousOwner: address

	// src/roles/Ownable.algo.ts:76
	// this._owner.value = newOwner
	byte 0x5f6f776e6572 // "_owner"
	frame_dig -1 // newOwner: Address
	app_global_put

	// src/roles/Ownable.algo.ts:78
	// this.OwnershipTransferred.log({
	//       previousOwner: previousOwner,
	//       newOwner: newOwner,
	//     })
	byte 0x9a223efb // OwnershipTransferred(address,address)
	frame_dig 0 // previousOwner: address
	frame_dig -1 // newOwner: Address
	concat
	concat
	log
	retsub

// transferOwnership(address)void
abi_route_transferOwnership:
	// newOwner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute transferOwnership(address)void
	callsub transferOwnership
	int 1
	return

// transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// Requires the caller to be the current owner.
//
// @param newOwner The address of the new owner.
transferOwnership:
	proto 1 0

	// src/roles/Ownable.algo.ts:92
	// assert(this.isOwner())
	callsub isOwner
	assert

	// src/roles/Ownable.algo.ts:94
	// this._transferOwnership(newOwner)
	frame_dig -1 // newOwner: Address
	callsub _transferOwnership
	retsub

// deploy(address)void
abi_route_deploy:
	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute deploy(address)void
	callsub deploy
	int 1
	return

// deploy(owner: Address): void
//
// Deploy the Partner Factory, setting the transaction sender as the owner
deploy:
	proto 1 0

	// src/BuggedImmersive.algo.ts:405
	// this._transferOwnership(owner)
	frame_dig -1 // owner: Address
	callsub _transferOwnership
	retsub

// update()void
abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
//
// Allows the owner to update the smart contract
update:
	proto 0 0

	// src/BuggedImmersive.algo.ts:413
	// this.onlyOwner()
	callsub onlyOwner
	retsub

// destroy()void
abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
//
// Destroy the smart contract, sending all Algo to the owner account
destroy:
	proto 0 0

	// src/BuggedImmersive.algo.ts:421
	// this.onlyOwner()
	callsub onlyOwner

	// src/BuggedImmersive.algo.ts:423
	// sendPayment({
	//       receiver: this.app.address,
	//       amount: 0,
	//       closeRemainderTo: this.owner(),
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/BuggedImmersive.algo.ts:424
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// src/BuggedImmersive.algo.ts:425
	// amount: 0
	int 0
	itxn_field Amount

	// src/BuggedImmersive.algo.ts:426
	// closeRemainderTo: this.owner()
	callsub owner
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// newPartner(address,pay,asset)uint64
abi_route_newPartner:
	// The ABI return prefix
	byte 0x151f7c75

	// asset: asset
	txna ApplicationArgs 2
	btoi
	txnas Assets

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute newPartner(address,pay,asset)uint64
	callsub newPartner
	itob
	concat
	log
	int 1
	return

// newPartner(owner: Address, mbr: PayTxn, asset: Asset): Application
newPartner:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/BuggedImmersive.algo.ts:431
	// verifyPayTxn(mbr, {
	//       receiver: this.app.address,
	//       amount: globals.minBalance + globals.assetOptInMinBalance + partner_sc_mbr,
	//     })
	// verify receiver
	frame_dig -2 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -2 // mbr: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	int 235500
	+
	==
	assert

	// src/BuggedImmersive.algo.ts:437
	// partnerAddress = sendMethodCall<[Address, Asset], Address>({
	//       name: 'deploy',
	//       approvalProgram: BuggedPartner.approvalProgram(),
	//       clearStateProgram: BuggedPartner.clearProgram(),
	//       globalNumUint: 3,
	//       globalNumByteSlice: 1,
	//       localNumUint: 1,
	//       localNumByteSlice: 15,
	//       methodArgs: [owner, asset],
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "deploy(address,asset)address"
	itxn_field ApplicationArgs

	// src/BuggedImmersive.algo.ts:439
	// approvalProgram: BuggedPartner.approvalProgram()
	byte b64 CiAGAQAgBAbE2AImCgABYQZfb3duZXIEFR98dQIAIgFjAW4BdwSmc/WwBJCGejIxGBQhBAsxGQiNDAQ9BJMEnQAABKcEtQQvAAAAAAAAAAAAAACKAAAxACpkEkSJigABMQAqZBKJK4gABFCwIkOKAAEqZImKAQAoNjIAKmVMSEEABSpkQgACMgOMACqL/2eABJoiPvuLAIv/UFCwiTYaAUkVJBJEiAACIkOKAQCI/61Ei/+I/76JigIBKCgnBIv/SRUWVwYCTFCIBFcxAIgERUhQvkSL/hKJKzYaAhfAMDYaAUkVJBJEiAAEULAiQ4oCAYv/iP9+KYv+Z7EishAyCrIHI7IIMg6yICOyAbMyComIAAIiQ4oAAIj/OImIAAIiQ4oAAIj/LCcFZBREsSKyEDIKsgcjsgiI/zSyCSOyAbOJNhoBF4gAAiJDigEAiP8DJweL/2eJKzYaAkkVJBJENhoBVwIAMRYiCUk4ECISRIgABFCwIkOKAwEoiP7Wi/84BzIKEkSL/zgIMgEyEAghBQgSRLEhBLIQgARWHS/qshqBBbIZgF0KIAIBADEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAIAEFR98dYgABFCwIkOKAAGxIrIQMgqyByOyCDIOsiAjsgGzMgqJgARWHS/qNhoAjgH/zQCyHoABCrIfI7IBs7Q7IgnFOlcEAIwAsSKyEIsAsgcyATIQCLIII7IBs7ElshCLALIAiwCyFClkshEjshIjsgGzKCgnBIv+SRUWVwYCTFCIAs6L/YgCvEhQiwC/JwVJZCIIZ4sAjACJNhoDSRUkEkQ2GgJJFSQSRDYaAVcCAIgAAiJDigMAiP3IsSKyEIv9sgCL/bIHI7IIMQCyCSOyAbOxIrIQMQCyByEFsggjsgGzKCgnBIv/SRUWVwYCTFCIAl+L/ogCTUhQvCcFSWQiCWeJNhoCFzYaAUkVJBJEiAACIkOKAgCI/WmxJbIQi/+yADIKshQpZLIRi/6yEiOyAbOABG5ApMSL/ylkFlCL/hZQULCJNhoCFzYaAUkVJBJEiAACIkOKAgCI/SexJbIQMgqyAIv/shQpZLIRi/6yEiOyAbOABPT1KtOL/ylkFlCL/hZQULCJNhoCFzYaAUkVJBJEiAACIkOKAgCI/OWxJbIQMgqyAIv/shQpZLIRi/6yEiOyAbOABItm5YkpZBaL/hZQULCJKzYaAxc2GgJJFSQSRDYaAVcCAIgABFCwIkOKAwEoSYv+i/+I/PtEMQAnBmIWMgYnB2QIFlCL/RZQjAAxACcGMQAnBmIiCGaLAAGMATEAiwGLAGaLAYwARgGJNhoDSRUkEkQ2GgJJFSQSRDYaAVcCAIgAAiJDigMAiPxMSUAACIv+i/+I/JsRRDEAi/1oiTYaBEkVJBJENhoDSRUkEkQ2GgJJFSQSRDYaAVcCAIgAAiJDigQAKEmL/ov/iPxkRIv8jAAxAIwBsSWyEIv+sgCL/bIUKWSyEYsBiwBiVxAIF7ISI7IBszEAi/xoiYAEM98wWzYaAI4B/EoAgASxu7CogAThe6+0gAQ+gAAKgATJrtDSgAQNzUUHgAQRwy2IgARBH0HagASwPnxmJwiABLaK5jgnCTYaAI4L+4L7ufxd/HL9hv3v/jH+c/6y/wz/QAAnCDYaAI4B/qgAJwk2GgCOAf8sAIAEoOgYcjYaAI4B/AoAgASchqGFNhoAjgH8CACKBAOL/Iv/UIv9i/6JigQDi/yL/lCM/Iv/SRWL/hcIFlcGAoz+i/1MUIz9i/yL/Yv+iQ==
	itxn_field ApprovalProgram

	// src/BuggedImmersive.algo.ts:440
	// clearStateProgram: BuggedPartner.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// src/BuggedImmersive.algo.ts:441
	// globalNumUint: 3
	int 3
	itxn_field GlobalNumUint

	// src/BuggedImmersive.algo.ts:442
	// globalNumByteSlice: 1
	int 1
	itxn_field GlobalNumByteSlice

	// src/BuggedImmersive.algo.ts:443
	// localNumUint: 1
	int 1
	itxn_field LocalNumUint

	// src/BuggedImmersive.algo.ts:444
	// localNumByteSlice: 15
	int 15
	itxn_field LocalNumByteSlice

	// src/BuggedImmersive.algo.ts:445
	// methodArgs: [owner, asset]
	frame_dig -1 // owner: Address
	itxn_field ApplicationArgs
	frame_dig -3 // asset: Asset
	itxn_field Assets
	byte 0x0000000000000000
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // partnerAddress: address

	// src/BuggedImmersive.algo.ts:447
	// partnerID = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // partnerID: application

	// src/BuggedImmersive.algo.ts:449
	// sendPayment({
	//       receiver: partnerAddress,
	//       amount: globals.minBalance + globals.assetOptInMinBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/BuggedImmersive.algo.ts:450
	// receiver: partnerAddress
	frame_dig 0 // partnerAddress: address
	itxn_field Receiver

	// src/BuggedImmersive.algo.ts:451
	// amount: globals.minBalance + globals.assetOptInMinBalance
	global MinBalance
	global AssetOptInMinBalance
	+
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/BuggedImmersive.algo.ts:455
	// sendAssetTransfer({
	//       sender: partnerAddress,
	//       assetReceiver: partnerAddress,
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       rekeyTo: partnerAddress,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/BuggedImmersive.algo.ts:456
	// sender: partnerAddress
	frame_dig 0 // partnerAddress: address
	itxn_field Sender

	// src/BuggedImmersive.algo.ts:457
	// assetReceiver: partnerAddress
	frame_dig 0 // partnerAddress: address
	itxn_field AssetReceiver

	// src/BuggedImmersive.algo.ts:458
	// xferAsset: asset
	frame_dig -3 // asset: Asset
	itxn_field XferAsset

	// src/BuggedImmersive.algo.ts:459
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// src/BuggedImmersive.algo.ts:460
	// rekeyTo: partnerAddress
	frame_dig 0 // partnerAddress: address
	itxn_field RekeyTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/BuggedImmersive.algo.ts:463
	// return partnerID;
	frame_dig 1 // partnerID: application

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

create_NoOp:
	method "deploy(address)void"
	txna ApplicationArgs 0
	match abi_route_deploy
	err

call_NoOp:
	method "owner()address"
	method "transferOwnership(address)void"
	method "newPartner(address,pay,asset)uint64"
	txna ApplicationArgs 0
	match abi_route_owner abi_route_transferOwnership abi_route_newPartner
	err

call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match abi_route_update
	err

call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match abi_route_destroy
	err