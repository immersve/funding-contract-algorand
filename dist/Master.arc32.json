{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalTimeout(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEarlyWithdrawalPubkey(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundCreate(pay,address,uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRecover(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDebit(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRefundAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRefundAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRefund(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextSettlementNonce()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextCardFundNonce(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCardFundData(address)(address,address,address,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSettlementAddress(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSettlementAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundEnableAsset(pay,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDisableAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardFundWithdrawalCancel(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdraw(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    },
    "cardFundWithdrawEarly(address,byte[32],byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "wn"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "card_funds_active_count": {
          "type": "uint64",
          "key": "cfac"
        },
        "partner_channels_active_count": {
          "type": "uint64",
          "key": "pcac"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "wwt"
        },
        "early_withdrawal_pubkey": {
          "type": "bytes",
          "key": "ewpk"
        },
        "settlement_nonce": {
          "type": "uint64",
          "key": "sn"
        },
        "refund_address": {
          "type": "bytes",
          "key": "ra"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjkwLjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpjYWxsX0Nsb3NlT3V0ICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKmNhbGxfRGVsZXRlQXBwbGljYXRpb24gKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gb25seU93bmVyKCk6IHZvaWQKLy8KLy8gQXNzZXJ0IHRoZSB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdC4Kb25seU93bmVyOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo1MwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBpc093bmVyKCk6IGJvb2xlYW4KLy8KLy8gQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIHNlbmRlciBpcyB0aGUgb3duZXIuCi8vIEByZXR1cm5zIGJvb2xlYW4gVHJ1ZSBpZiB0aGUgc2VuZGVyIGlzIHRoZSBvd25lciwgZmFsc2Ugb3RoZXJ3aXNlLgppc093bmVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo2MQoJLy8gcmV0dXJuIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWU7Cgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCXJldHN1YgoKLy8gb3duZXIoKWFkZHJlc3MKKmFiaV9yb3V0ZV9vd25lcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBvd25lcigpYWRkcmVzcwoJY2FsbHN1YiBvd25lcgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIG93bmVyKCk6IEFkZHJlc3MKb3duZXI6Cglwcm90byAwIDEKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjY3CgkvLyByZXR1cm4gdGhpcy5fb3duZXIudmFsdWU7CglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBvd25lci4KLy8gQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgb3duZXIuCl90cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo3NgoJLy8gcHJldmlvdXNPd25lciA9IHRoaXMuX293bmVyLmV4aXN0cyA/IHRoaXMuX293bmVyLnZhbHVlIDogZ2xvYmFscy56ZXJvQWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYnogKnRlcm5hcnkxX2ZhbHNlCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglnbG9iYWwgWmVyb0FkZHJlc3MKCip0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDAgLy8gcHJldmlvdXNPd25lcjogYWRkcmVzcwoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NzcKCS8vIHRoaXMuX293bmVyLnZhbHVlID0gbmV3T3duZXIKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjc5CgkvLyB0aGlzLk93bmVyc2hpcFRyYW5zZmVycmVkLmxvZyh7CgkvLyAgICAgICAgICAgICBwcmV2aW91c093bmVyOiBwcmV2aW91c093bmVyLAoJLy8gICAgICAgICAgICAgbmV3T3duZXI6IG5ld093bmVyLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDlhMjIzZWZiIC8vIE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcykKCWZyYW1lX2RpZyAwIC8vIHByZXZpb3VzT3duZXI6IGFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV90cmFuc2Zlck93bmVyc2hpcDoKCS8vIG5ld093bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKCWNhbGxzdWIgdHJhbnNmZXJPd25lcnNoaXAKCWludCAxCglyZXR1cm4KCi8vIHRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgb3duZXIuCi8vIFJlcXVpcmVzIHRoZSBjYWxsZXIgdG8gYmUgdGhlIGN1cnJlbnQgb3duZXIuCi8vCi8vIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgp0cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6OTMKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSkKCWNhbGxzdWIgaXNPd25lcgoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo5NQoJLy8gdGhpcy5fdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpCglmcmFtZV9kaWcgLTEgLy8gbmV3T3duZXI6IEFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyT3duZXJzaGlwCglyZXRzdWIKCi8vIGlzQ2FyZEZ1bmRPd25lcihjYXJkRnVuZDogQWRkcmVzcyk6IGJvb2xlYW4KLy8KLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24gc2VuZGVyIGlzIHRoZSBDYXJkIEZ1bmQgaG9sZGVyL293bmVyCi8vIEBwYXJhbSBjYXJkRnVuZCBDYXJkIEZ1bmQgYWRkcmVzcwovLyBAcmV0dXJucyBUcnVlIGlmIHRoZSBzZW5kZXIgaXMgdGhlIENhcmQgSG9sZGVyIG9mIHRoZSBjYXJkCmlzQ2FyZEZ1bmRPd25lcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2OAoJLy8gcmV0dXJuIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUub3duZXIgPT09IHRoaXMudHhuLnNlbmRlcjsKCWludCAzMiAvLyBoZWFkT2Zmc2V0CglpbnQgMzIKCWJ5dGUgMHg2MzY2IC8vICJjZiIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJdHhuIFNlbmRlcgoJPT0KCXJldHN1YgoKLy8gY2FyZEZ1bmRBc3NldE9wdEluKGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gT3B0LWluIGEgQ2FyZCBGdW5kIGludG8gYW4gYXNzZXQuIE1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBtdXN0IGJlIG1ldCBwcmlvciB0byBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uCi8vIEBwYXJhbSBjYXJkRnVuZCBDYXJkIEZ1bmQgYWRkcmVzcwovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gb3B0LWluIHRvCmNhcmRGdW5kQXNzZXRPcHRJbjoKCXByb3RvIDIgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3OAoJLy8gYXNzZXJ0KHRoaXMuYXBwLmFkZHJlc3MuaXNPcHRlZEluVG9Bc3NldChhc3NldCkpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjgwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyODEKCS8vIHNlbmRlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyODIKCS8vIGFzc2V0UmVjZWl2ZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI4MwoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI4NAoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI4NwoJLy8gdGhpcy5DYXJkRnVuZEFzc2V0RW5hYmxlZC5sb2coewoJLy8gICAgICAgICAgICAgY2FyZEZ1bmQ6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDI0OGEwNTFlIC8vIENhcmRGdW5kQXNzZXRFbmFibGVkKGFkZHJlc3MsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2FyZEZ1bmRBc3NldENsb3NlT3V0KGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKY2FyZEZ1bmRBc3NldENsb3NlT3V0OgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjk0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhc3NldENsb3NlVG86IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjk1CgkvLyBzZW5kZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjk2CgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTcKCS8vIGFzc2V0Q2xvc2VUbzogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTgKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTkKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMDIKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwMwoJLy8gc2VuZGVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwNAoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwNQoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwOAoJLy8gdGhpcy5DYXJkRnVuZEFzc2V0RGlzYWJsZWQubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhkMTUzMTY3OCAvLyBDYXJkRnVuZEFzc2V0RGlzYWJsZWQoYWRkcmVzcyx1aW50NjQpCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB3aXRoZHJhd0Z1bmRzKHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0KTogdm9pZAp3aXRoZHJhd0Z1bmRzOgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzE1CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHdpdGhkcmF3YWwuY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogd2l0aGRyYXdhbC5hc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxNgoJLy8gc2VuZGVyOiB3aXRoZHJhd2FsLmNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMCAzMgoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTcKCS8vIGFzc2V0UmVjZWl2ZXI6IHdpdGhkcmF3YWwucmVjaXBpZW50CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMzIgMzIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxOAoJLy8geGZlckFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTkKCS8vIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDcyIDgKCWJ0b2kKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzIzCgkvLyB0aGlzLldpdGhkcmF3YWwubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiB3aXRoZHJhd2FsLmNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgcmVjaXBpZW50OiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIGFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgICAgIG5vbmNlOiB3aXRoZHJhd2FsLm5vbmNlLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDNiN2IzNjBiIC8vIFdpdGhkcmF3YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCAzMiAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNzIgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgODggOAoJYnRvaQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB1cGRhdGVTZXR0bGVtZW50QWRkcmVzcyhhc3NldDogQXNzZXRJRCwgbmV3U2V0dGxlbWVudEFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkCnVwZGF0ZVNldHRsZW1lbnRBZGRyZXNzOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMzMKCS8vIG9sZFNldHRsZW1lbnRBZGRyZXNzID0gdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MoYXNzZXQpLmV4aXN0cwoJLy8gICAgICAgICAgICAgPyB0aGlzLnNldHRsZW1lbnRfYWRkcmVzcyhhc3NldCkudmFsdWUKCS8vICAgICAgICAgICAgIDogZ2xvYmFscy56ZXJvQWRkcmVzcwoJYnl0ZSAweDczNjEgLy8gInNhIgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKnRlcm5hcnkzX2ZhbHNlCglieXRlIDB4NzM2MSAvLyAic2EiCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJYm94X2dldAoJYXNzZXJ0CgliICp0ZXJuYXJ5M19lbmQKCip0ZXJuYXJ5M19mYWxzZToKCWdsb2JhbCBaZXJvQWRkcmVzcwoKKnRlcm5hcnkzX2VuZDoKCWZyYW1lX2J1cnkgMCAvLyBvbGRTZXR0bGVtZW50QWRkcmVzczogYWRkcmVzcwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMzNgoJLy8gdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MoYXNzZXQpLnZhbHVlID0gbmV3U2V0dGxlbWVudEFkZHJlc3MKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbmV3U2V0dGxlbWVudEFkZHJlc3M6IEFkZHJlc3MKCWJveF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMzgKCS8vIHRoaXMuU2V0dGxlbWVudEFkZHJlc3NDaGFuZ2VkLmxvZyh7CgkvLyAgICAgICAgICAgICBvbGRTZXR0bGVtZW50QWRkcmVzczogb2xkU2V0dGxlbWVudEFkZHJlc3MsCgkvLyAgICAgICAgICAgICBuZXdTZXR0bGVtZW50QWRkcmVzczogbmV3U2V0dGxlbWVudEFkZHJlc3MsCgkvLyAgICAgICAgIH0pCglieXRlIDB4ZmQ1MzUzNTggLy8gU2V0dGxlbWVudEFkZHJlc3NDaGFuZ2VkKGFkZHJlc3MsYWRkcmVzcykKCWZyYW1lX2RpZyAwIC8vIG9sZFNldHRsZW1lbnRBZGRyZXNzOiBhZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gbmV3U2V0dGxlbWVudEFkZHJlc3M6IEFkZHJlc3MKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZGVwbG95KGFkZHJlc3MpYWRkcmVzcwoqYWJpX3JvdXRlX2RlcGxveToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGRlcGxveShhZGRyZXNzKWFkZHJlc3MKCWNhbGxzdWIgZGVwbG95Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZGVwbG95KG93bmVyOiBBZGRyZXNzKTogQWRkcmVzcwovLwovLyBEZXBsb3kgYSBwYXJ0bmVyIGNoYW5uZWwsIHNldHRpbmcgdGhlIG93bmVyIGFzIHByb3ZpZGVkCmRlcGxveToKCXByb3RvIDEgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM1MAoJLy8gdGhpcy5fdHJhbnNmZXJPd25lcnNoaXAob3duZXIpCglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyT3duZXJzaGlwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzUyCgkvLyByZXR1cm4gdGhpcy5hcHAuYWRkcmVzczsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglyZXRzdWIKCi8vIHVwZGF0ZSgpdm9pZAoqYWJpX3JvdXRlX3VwZGF0ZToKCS8vIGV4ZWN1dGUgdXBkYXRlKCl2b2lkCgljYWxsc3ViIHVwZGF0ZQoJaW50IDEKCXJldHVybgoKLy8gdXBkYXRlKCk6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBvd25lciB0byB1cGRhdGUgdGhlIHNtYXJ0IGNvbnRyYWN0CnVwZGF0ZToKCXByb3RvIDAgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM2MAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCXJldHN1YgoKLy8gZGVzdHJveSgpdm9pZAoqYWJpX3JvdXRlX2Rlc3Ryb3k6CgkvLyBleGVjdXRlIGRlc3Ryb3koKXZvaWQKCWNhbGxzdWIgZGVzdHJveQoJaW50IDEKCXJldHVybgoKLy8gZGVzdHJveSgpOiB2b2lkCi8vCi8vIERlc3Ryb3kgdGhlIHNtYXJ0IGNvbnRyYWN0LCBzZW5kaW5nIGFsbCBBbGdvIHRvIHRoZSBvd25lciBhY2NvdW50LiBUaGlzIGNhbiBvbmx5IGJlIGRvbmUgaWYgdGhlcmUgYXJlIG5vIGFjdGl2ZSBjYXJkIGZ1bmRzCmRlc3Ryb3k6Cglwcm90byAwIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNjgKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzcxCgkvLyBhc3NlcnQoIXRoaXMuY2FyZF9mdW5kc19hY3RpdmVfY291bnQudmFsdWUpCglieXRlIDB4NjM2NjYxNjMgLy8gImNmYWMiCglhcHBfZ2xvYmFsX2dldAoJIQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzczCgkvLyBhc3NlcnQoIXRoaXMucGFydG5lcl9jaGFubmVsc19hY3RpdmVfY291bnQudmFsdWUpCglieXRlIDB4NzA2MzYxNjMgLy8gInBjYWMiCglhcHBfZ2xvYmFsX2dldAoJIQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mzc1CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMub3duZXIoKSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNzYKCS8vIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM3NwoJLy8gYW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNzgKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMub3duZXIoKQoJY2FsbHN1YiBvd25lcgoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBzZXRXaXRoZHJhd2FsVGltZW91dCh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NldFdpdGhkcmF3YWxUaW1lb3V0OgoJLy8gc2Vjb25kczogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzZXRXaXRoZHJhd2FsVGltZW91dCh1aW50NjQpdm9pZAoJY2FsbHN1YiBzZXRXaXRoZHJhd2FsVGltZW91dAoJaW50IDEKCXJldHVybgoKLy8gc2V0V2l0aGRyYXdhbFRpbWVvdXQoc2Vjb25kczogdWludDY0KTogdm9pZAovLwovLyBTZXQgdGhlIG51bWJlciBvZiBzZWNvbmRzIGEgd2l0aGRyYXdhbCByZXF1ZXN0IG11c3Qgd2FpdCB1bnRpbCBiZWluZyB3aXRoZHJhd24KLy8gQHBhcmFtIHNlY29uZHMgTmV3IG51bWJlciBvZiBzZWNvbmRzIHRvIHdhaXQKc2V0V2l0aGRyYXdhbFRpbWVvdXQ6Cglwcm90byAxIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozODgKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzkwCgkvLyB0aGlzLndpdGhkcmF3YWxfd2FpdF90aW1lLnZhbHVlID0gc2Vjb25kcwoJYnl0ZSAweDc3Nzc3NCAvLyAid3d0IgoJZnJhbWVfZGlnIC0xIC8vIHNlY29uZHM6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9zZXRFYXJseVdpdGhkcmF3YWxQdWJrZXk6CgkvLyBwdWJrZXk6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXkoYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXkKCWludCAxCglyZXR1cm4KCi8vIHNldEVhcmx5V2l0aGRyYXdhbFB1YmtleShwdWJrZXk6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIFNldHMgdGhlIGVhcmx5IHdpdGhkcmF3YWwgcHVibGljIGtleS4KLy8gQHBhcmFtIHB1YmtleSAtIFRoZSBwdWJsaWMga2V5IHRvIHNldC4Kc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5OgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mzk4CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQwMAoJLy8gdGhpcy5lYXJseV93aXRoZHJhd2FsX3B1YmtleS52YWx1ZSA9IHB1YmtleQoJYnl0ZSAweDY1Nzc3MDZiIC8vICJld3BrIgoJZnJhbWVfZGlnIC0xIC8vIHB1YmtleTogYnl0ZXMzMgoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gcGFydG5lckNoYW5uZWxDcmVhdGUocGF5LHN0cmluZylhZGRyZXNzCiphYmlfcm91dGVfcGFydG5lckNoYW5uZWxDcmVhdGU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHBhcnRuZXJDaGFubmVsTmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHBhcnRuZXJDaGFubmVsQ3JlYXRlKHBheSxzdHJpbmcpYWRkcmVzcwoJY2FsbHN1YiBwYXJ0bmVyQ2hhbm5lbENyZWF0ZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHBhcnRuZXJDaGFubmVsQ3JlYXRlKG1icjogUGF5VHhuLCBwYXJ0bmVyQ2hhbm5lbE5hbWU6IHN0cmluZyk6IEFkZHJlc3MKLy8KLy8gQ3JlYXRlcyBhIHBhcnRuZXIgY2hhbm5lbCBhY2NvdW50IGFuZCBhc3NvY2lhdGVzIGl0IHdpdGggdGhlIHByb3ZpZGVkIHBhcnRuZXIgY2hhbm5lbCBuYW1lLgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIGNhbGwgdGhpcyBmdW5jdGlvbi4KLy8KLy8gQHBhcmFtIG1iciAtIFRoZSBQYXlUeG4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcGF5bWVudCB0cmFuc2FjdGlvbi4KLy8gQHBhcmFtIHBhcnRuZXJDaGFubmVsTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwYXJ0bmVyIGNoYW5uZWwuCi8vIEByZXR1cm5zIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXdseSBjcmVhdGVkIHBhcnRuZXIgY2hhbm5lbCBhY2NvdW50LgpwYXJ0bmVyQ2hhbm5lbENyZWF0ZToKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTIKCS8vIGJveENvc3QgPSAyNTAwICsgNDAwICogKDMgKyAzMiArIGxlbihwYXJ0bmVyQ2hhbm5lbE5hbWUpKQoJaW50IDI1MDAKCWludCA0MDAKCWludCAzNQoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXJDaGFubmVsTmFtZTogc3RyaW5nCglsZW4KCSsKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBib3hDb3N0OiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTQKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UgKyBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlICsgYm94Q29zdCwKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIE1pbkJhbGFuY2UKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJKwoJZnJhbWVfZGlnIDAgLy8gYm94Q29zdDogdWludDY0CgkrCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDIwCgkvLyBwYXJ0bmVyQ2hhbm5lbEFkZHIgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ29udHJvbGxlZEFkZHJlc3MucHJvdG90eXBlLm5ldz4oewoJLy8gICAgICAgICAgICAgb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uRGVsZXRlQXBwbGljYXRpb24sCgkvLyAgICAgICAgICAgICBhcHByb3ZhbFByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmFwcHJvdmFsUHJvZ3JhbSgpLAoJLy8gICAgICAgICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmNsZWFyUHJvZ3JhbSgpLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAibmV3KClhZGRyZXNzIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjEKCS8vIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uCglpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjIKCS8vIGFwcHJvdmFsUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuYXBwcm92YWxQcm9ncmFtKCkKCWJ5dGUgYjY0IENpQUNBUUF4R0JTQkJnc3hHUWlOREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKd0NBQkJVZmZIV0lBQVJRc0NKRGlnQUJzU0t5RURJS3NnY2pzZ2d5RHJJZ0k3SUJzeklLaVlBRVZoMHY2allhQUk0Qi84MEEKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDIzCgkvLyBjbGVhclN0YXRlUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuY2xlYXJQcm9ncmFtKCkKCWJ5dGUgYjY0IENnPT0KCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWZyYW1lX2J1cnkgMSAvLyBwYXJ0bmVyQ2hhbm5lbEFkZHI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjcKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBwYXJ0bmVyQ2hhbm5lbEFkZHIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjgKCS8vIHJlY2VpdmVyOiBwYXJ0bmVyQ2hhbm5lbEFkZHIKCWZyYW1lX2RpZyAxIC8vIHBhcnRuZXJDaGFubmVsQWRkcjogYWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQyOQoJLy8gYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UKCWdsb2JhbCBNaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MzIKCS8vIHRoaXMucGFydG5lcl9jaGFubmVscyhwYXJ0bmVyQ2hhbm5lbEFkZHIpLnZhbHVlID0gcGFydG5lckNoYW5uZWxOYW1lCglieXRlIDB4NzA2MyAvLyAicGMiCglmcmFtZV9kaWcgMSAvLyBwYXJ0bmVyQ2hhbm5lbEFkZHI6IGFkZHJlc3MKCWNvbmNhdAoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyQ2hhbm5lbE5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJveF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MzUKCS8vIHRoaXMucGFydG5lcl9jaGFubmVsc19hY3RpdmVfY291bnQudmFsdWUgPSB0aGlzLnBhcnRuZXJfY2hhbm5lbHNfYWN0aXZlX2NvdW50LnZhbHVlICsgMQoJYnl0ZSAweDcwNjM2MTYzIC8vICJwY2FjIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDM3CgkvLyB0aGlzLlBhcnRuZXJDaGFubmVsQ3JlYXRlZC5sb2coewoJLy8gICAgICAgICAgICAgcGFydG5lckNoYW5uZWw6IHBhcnRuZXJDaGFubmVsQWRkciwKCS8vICAgICAgICAgICAgIHBhcnRuZXJDaGFubmVsTmFtZTogcGFydG5lckNoYW5uZWxOYW1lLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDJjOTI0ZGVlIC8vIFBhcnRuZXJDaGFubmVsQ3JlYXRlZChhZGRyZXNzLHN0cmluZykKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMjIgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gcGFydG5lckNoYW5uZWxBZGRyOiBhZGRyZXNzCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTIgLy8gcGFydG5lckNoYW5uZWxOYW1lOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJcG9wIC8vIHBvcCBoZWFkIG9mZnNldAoJY29uY2F0IC8vIGNvbmNhdCBoZWFkIGFuZCB0YWlsCgljb25jYXQKCWxvZwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0MgoJLy8gcmV0dXJuIHBhcnRuZXJDaGFubmVsQWRkcjsKCWZyYW1lX2RpZyAxIC8vIHBhcnRuZXJDaGFubmVsQWRkcjogYWRkcmVzcwoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gcGFydG5lckNoYW5uZWxDbG9zZShhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9wYXJ0bmVyQ2hhbm5lbENsb3NlOgoJLy8gcGFydG5lckNoYW5uZWw6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHBhcnRuZXJDaGFubmVsQ2xvc2UoYWRkcmVzcyl2b2lkCgljYWxsc3ViIHBhcnRuZXJDaGFubmVsQ2xvc2UKCWludCAxCglyZXR1cm4KCi8vIHBhcnRuZXJDaGFubmVsQ2xvc2UocGFydG5lckNoYW5uZWw6IEFkZHJlc3MpOiB2b2lkCnBhcnRuZXJDaGFubmVsQ2xvc2U6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDQ2CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0OAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBwYXJ0bmVyQ2hhbm5lbCwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBwYXJ0bmVyQ2hhbm5lbCwKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NDkKCS8vIHNlbmRlcjogcGFydG5lckNoYW5uZWwKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NTAKCS8vIHJlY2VpdmVyOiBwYXJ0bmVyQ2hhbm5lbAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXJDaGFubmVsOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDUxCgkvLyBhbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ1MgoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDU1CgkvLyBwYXJ0bmVyQ2hhbm5lbFNpemUgPSB0aGlzLnBhcnRuZXJfY2hhbm5lbHMocGFydG5lckNoYW5uZWwpLnNpemUKCWJ5dGUgMHg3MDYzIC8vICJwYyIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBwYXJ0bmVyQ2hhbm5lbFNpemU6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ1NgoJLy8gYm94Q29zdCA9IDI1MDAgKyA0MDAgKiAoMyArIDMyICsgcGFydG5lckNoYW5uZWxTaXplKQoJaW50IDI1MDAKCWludCA0MDAKCWludCAzNQoJZnJhbWVfZGlnIDAgLy8gcGFydG5lckNoYW5uZWxTaXplOiB1aW50NjQKCSsKCSoKCSsKCWZyYW1lX2J1cnkgMSAvLyBib3hDb3N0OiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NTgKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGJveENvc3QsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDU5CgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDYwCgkvLyBhbW91bnQ6IGJveENvc3QKCWZyYW1lX2RpZyAxIC8vIGJveENvc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDY0CgkvLyB0aGlzLnBhcnRuZXJfY2hhbm5lbHMocGFydG5lckNoYW5uZWwpLmRlbGV0ZSgpCglieXRlIDB4NzA2MyAvLyAicGMiCglmcmFtZV9kaWcgLTEgLy8gcGFydG5lckNoYW5uZWw6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2RlbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ2NwoJLy8gdGhpcy5wYXJ0bmVyX2NoYW5uZWxzX2FjdGl2ZV9jb3VudC52YWx1ZSA9IHRoaXMucGFydG5lcl9jaGFubmVsc19hY3RpdmVfY291bnQudmFsdWUgLSAxCglieXRlIDB4NzA2MzYxNjMgLy8gInBjYWMiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJLQoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gY2FyZEZ1bmRDcmVhdGUocGF5LGFkZHJlc3MsdWludDY0KWFkZHJlc3MKKmFiaV9yb3V0ZV9jYXJkRnVuZENyZWF0ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHBhcnRuZXJDaGFubmVsOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gbWJyOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRDcmVhdGUocGF5LGFkZHJlc3MsdWludDY0KWFkZHJlc3MKCWNhbGxzdWIgY2FyZEZ1bmRDcmVhdGUKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZENyZWF0ZShtYnI6IFBheVR4biwgcGFydG5lckNoYW5uZWw6IEFkZHJlc3MsIGFzc2V0OiBBc3NldElEKTogQWRkcmVzcwovLwovLyBDcmVhdGUgYWNjb3VudC4gVGhpcyBnZW5lcmF0ZXMgYSBicmFuZCBuZXcgYWNjb3VudCBhbmQgZnVuZHMgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudAovLyBAcGFyYW0gbWJyIFBheW1lbnQgdHJhbnNhY3Rpb24gb2YgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50Ci8vIEBwYXJhbSBwYXJ0bmVyQ2hhbm5lbCBGdW5kaW5nIENoYW5uZWwgbmFtZQovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gb3B0LWluIHRvLiAwID0gTm8gYXNzZXQgb3B0LWluCi8vIEByZXR1cm5zIE5ld2x5IGdlbmVyYXRlZCBhY2NvdW50IHVzZWQgYnkgdGhlaXIgY2FyZApjYXJkRnVuZENyZWF0ZToKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDMKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzgKCS8vIGFzc2VydCh0aGlzLnBhcnRuZXJfY2hhbm5lbHMocGFydG5lckNoYW5uZWwpLmV4aXN0cykKCWJ5dGUgMHg3MDYzIC8vICJwYyIKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ4MAoJLy8gY2FyZEZ1bmREYXRhOiBDYXJkRnVuZERhdGEgPSB7CgkvLyAgICAgICAgICAgICBwYXJ0bmVyQ2hhbm5lbDogcGFydG5lckNoYW5uZWwsCgkvLyAgICAgICAgICAgICBvd25lcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYWRkcmVzczogZ2xvYmFscy56ZXJvQWRkcmVzcywKCS8vICAgICAgICAgICAgIG5vbmNlOiAwLAoJLy8gICAgICAgICB9CglmcmFtZV9kaWcgLTIgLy8gcGFydG5lckNoYW5uZWw6IEFkZHJlc3MKCXR4biBTZW5kZXIKCWNvbmNhdAoJZ2xvYmFsIFplcm9BZGRyZXNzCgljb25jYXQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyBjYXJkRnVuZERhdGE6IENhcmRGdW5kRGF0YQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ4NgoJLy8gYm94Q29zdCA9IDI1MDAgKyA0MDAgKiAoMyArIDMyICsgbGVuKGNhcmRGdW5kRGF0YSkpCglpbnQgNTgxMDAKCWZyYW1lX2J1cnkgMSAvLyBib3hDb3N0OiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0ODcKCS8vIGFzc2V0TWJyID0gYXNzZXQgPyBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlIDogMAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglieiAqdGVybmFyeTVfZmFsc2UKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJYiAqdGVybmFyeTVfZW5kCgoqdGVybmFyeTVfZmFsc2U6CglpbnQgMAoKKnRlcm5hcnk1X2VuZDoKCWZyYW1lX2J1cnkgMiAvLyBhc3NldE1icjogdWludDY0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDg5CgkvLyB2ZXJpZnlQYXlUeG4obWJyLCB7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlICsgYXNzZXRNYnIgKyBib3hDb3N0LAoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgTWluQmFsYW5jZQoJZnJhbWVfZGlnIDIgLy8gYXNzZXRNYnI6IHVpbnQ2NAoJKwoJaW50IDU4MTAwIC8vIGJveENvc3Q6IHVpbnQ2NAoJKwoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ5NQoJLy8gY2FyZEZ1bmRBZGRyID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENvbnRyb2xsZWRBZGRyZXNzLnByb3RvdHlwZS5uZXc+KHsKCS8vICAgICAgICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uLAoJLy8gICAgICAgICAgICAgYXBwcm92YWxQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5hcHByb3ZhbFByb2dyYW0oKSwKCS8vICAgICAgICAgICAgIGNsZWFyU3RhdGVQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5jbGVhclByb2dyYW0oKSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgIm5ldygpYWRkcmVzcyIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDk2CgkvLyBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5EZWxldGVBcHBsaWNhdGlvbgoJaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDk3CgkvLyBhcHByb3ZhbFByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmFwcHJvdmFsUHJvZ3JhbSgpCglieXRlIGI2NCBDaUFDQVFBeEdCU0JCZ3N4R1FpTkRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSndDQUJCVWZmSFdJQUFSUXNDSkRpZ0FCc1NLeUVESUtzZ2Nqc2dneURySWdJN0lCc3pJS2lZQUVWaDB2NmpZYUFJNEIvODBBCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ5OAoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmNsZWFyUHJvZ3JhbSgpCglieXRlIGI2NCBDZz09CglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnQgMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglmcmFtZV9idXJ5IDMgLy8gY2FyZEZ1bmRBZGRyOiBhZGRyZXNzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTAyCgkvLyBjYXJkRnVuZERhdGEuYWRkcmVzcyA9IGNhcmRGdW5kQWRkcgoJZnJhbWVfZGlnIDAgLy8gY2FyZEZ1bmREYXRhOiBDYXJkRnVuZERhdGEKCWludCA2NCAvLyBoZWFkT2Zmc2V0CglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCXJlcGxhY2UzCglmcmFtZV9idXJ5IDAgLy8gY2FyZEZ1bmREYXRhOiBDYXJkRnVuZERhdGEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MDUKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBjYXJkRnVuZEFkZHIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSArIGFzc2V0TWJyLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUwNgoJLy8gcmVjZWl2ZXI6IGNhcmRGdW5kQWRkcgoJZnJhbWVfZGlnIDMgLy8gY2FyZEZ1bmRBZGRyOiBhZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTA3CgkvLyBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSArIGFzc2V0TWJyCglnbG9iYWwgTWluQmFsYW5jZQoJZnJhbWVfZGlnIDIgLy8gYXNzZXRNYnI6IHVpbnQ2NAoJKwoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gKmlmMF9jb25kaXRpb24KCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUxMQoJLy8gYXNzZXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUxMgoJLy8gdGhpcy5jYXJkRnVuZEFzc2V0T3B0SW4oY2FyZEZ1bmRBZGRyLCBhc3NldCkKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJZnJhbWVfZGlnIDMgLy8gY2FyZEZ1bmRBZGRyOiBhZGRyZXNzCgljYWxsc3ViIGNhcmRGdW5kQXNzZXRPcHRJbgoKKmlmMF9lbmQ6CgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTYKCS8vIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZEFkZHIpLnZhbHVlID0gY2FyZEZ1bmREYXRhCglieXRlIDB4NjM2NiAvLyAiY2YiCglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY2FyZEZ1bmREYXRhOiBDYXJkRnVuZERhdGEKCWJveF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTkKCS8vIHRoaXMuY2FyZF9mdW5kc19hY3RpdmVfY291bnQudmFsdWUgPSB0aGlzLmNhcmRfZnVuZHNfYWN0aXZlX2NvdW50LnZhbHVlICsgMQoJYnl0ZSAweDYzNjY2MTYzIC8vICJjZmFjIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTIxCgkvLyB0aGlzLkNhcmRGdW5kQ3JlYXRlZC5sb2coewoJLy8gICAgICAgICAgICAgY2FyZEZ1bmRPd25lcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgY2FyZEZ1bmQ6IGNhcmRGdW5kQWRkciwKCS8vICAgICAgICAgICAgIHBhcnRuZXJDaGFubmVsOiBwYXJ0bmVyQ2hhbm5lbCwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhiNDg5NWU0NyAvLyBDYXJkRnVuZENyZWF0ZWQoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXJDaGFubmVsOiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTI4CgkvLyByZXR1cm4gY2FyZEZ1bmRBZGRyOwoJZnJhbWVfZGlnIDMgLy8gY2FyZEZ1bmRBZGRyOiBhZGRyZXNzCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMwoJcmV0c3ViCgovLyBjYXJkRnVuZENsb3NlKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2NhcmRGdW5kQ2xvc2U6CgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRDbG9zZShhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRDbG9zZQoJaW50IDEKCXJldHVybgoKLy8gY2FyZEZ1bmRDbG9zZShjYXJkRnVuZDogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQ2xvc2UgYWNjb3VudC4gVGhpcyBwZXJtYW5lbnRseSByZW1vdmVzIHRoZSByZWtleSBhbmQgZGVsZXRlcyB0aGUgYWNjb3VudCBmcm9tIHRoZSBsZWRnZXIKLy8gQHBhcmFtIGNhcmRGdW5kIEFkZHJlc3MgdG8gY2xvc2UKY2FyZEZ1bmRDbG9zZToKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MzYKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSB8fCB0aGlzLmlzQ2FyZEZ1bmRPd25lcihjYXJkRnVuZCkpCgljYWxsc3ViIGlzT3duZXIKCWR1cAoJYm56ICpza2lwX29yMAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljYWxsc3ViIGlzQ2FyZEZ1bmRPd25lcgoJfHwKCipza2lwX29yMDoKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUzOAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MzkKCS8vIHNlbmRlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NDAKCS8vIHJlY2VpdmVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTQxCgkvLyBhbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU0MgoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTQ1CgkvLyBjYXJkRnVuZFNpemUgPSB0aGlzLmNhcmRfZnVuZHMoY2FyZEZ1bmQpLnNpemUKCWJ5dGUgMHg2MzY2IC8vICJjZiIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY29uY2F0Cglib3hfbGVuCglhc3NlcnQKCWZyYW1lX2J1cnkgMCAvLyBjYXJkRnVuZFNpemU6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU0NgoJLy8gYm94Q29zdCA9IDI1MDAgKyA0MDAgKiAoMSArIGNhcmRGdW5kU2l6ZSArIDMyKQoJaW50IDI1MDAKCWludCA0MDAKCWludCAxCglmcmFtZV9kaWcgMCAvLyBjYXJkRnVuZFNpemU6IHVpbnQ2NAoJKwoJaW50IDMyCgkrCgkqCgkrCglmcmFtZV9idXJ5IDEgLy8gYm94Q29zdDogdWludDY0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTQ4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBib3hDb3N0LAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU0OQoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU1MAoJLy8gYW1vdW50OiBib3hDb3N0CglmcmFtZV9kaWcgMSAvLyBib3hDb3N0OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU1NAoJLy8gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS5kZWxldGUoKQoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWJveF9kZWwKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NTcKCS8vIHRoaXMuY2FyZF9mdW5kc19hY3RpdmVfY291bnQudmFsdWUgPSB0aGlzLmNhcmRfZnVuZHNfYWN0aXZlX2NvdW50LnZhbHVlIC0gMQoJYnl0ZSAweDYzNjY2MTYzIC8vICJjZmFjIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCS0KCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNhcmRGdW5kUmVjb3ZlcihhZGRyZXNzLGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2NhcmRGdW5kUmVjb3ZlcjoKCS8vIG5ld0NhcmRGdW5kSG9sZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kUmVjb3ZlcihhZGRyZXNzLGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZFJlY292ZXIKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kUmVjb3ZlcihjYXJkRnVuZDogQWRkcmVzcywgbmV3Q2FyZEZ1bmRIb2xkZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFJlY292ZXJzIGZ1bmRzIGZyb20gYW4gb2xkIGNhcmQgYW5kIHRyYW5zZmVycyB0aGVtIHRvIGEgbmV3IGNhcmQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4KLy8KLy8gQHBhcmFtIGNhcmRGdW5kIC0gVGhlIGNhcmQgZnVuZCB0byByZWNvdmVyLgovLyBAcGFyYW0gbmV3Q2FyZEZ1bmRIb2xkZXIgLSBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IGNhcmQgaG9sZGVyLgpjYXJkRnVuZFJlY292ZXI6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2OAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzEKCS8vIG9sZENhcmRGdW5kSG9sZGVyID0gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS52YWx1ZS5vd25lcgoJaW50IDMyIC8vIGhlYWRPZmZzZXQKCWludCAzMgoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglmcmFtZV9idXJ5IDAgLy8gb2xkQ2FyZEZ1bmRIb2xkZXI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzIKCS8vIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUub3duZXIgPSBuZXdDYXJkRnVuZEhvbGRlcgoJaW50IDMyIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBuZXdDYXJkRnVuZEhvbGRlcjogQWRkcmVzcwoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9yZXBsYWNlCglyZXRzdWIKCi8vIGFzc2V0QWxsb3dsaXN0QWRkKHBheSx1aW50NjQsYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfYXNzZXRBbGxvd2xpc3RBZGQ6CgkvLyBzZXR0bGVtZW50QWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBtYnI6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhc3NldEFsbG93bGlzdEFkZChwYXksdWludDY0LGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBhc3NldEFsbG93bGlzdEFkZAoJaW50IDEKCXJldHVybgoKLy8gYXNzZXRBbGxvd2xpc3RBZGQobWJyOiBQYXlUeG4sIGFzc2V0OiBBc3NldElELCBzZXR0bGVtZW50QWRkcmVzczogQWRkcmVzcyk6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBtYXN0ZXIgY29udHJhY3QgdG8gZmxhZyBpbnRlbnQgb2YgYWNjZXB0aW5nIGFuIGFzc2V0LgovLwovLyBAcGFyYW0gbWJyIFBheW1lbnQgdHJhbnNhY3Rpb24gb2YgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50LgovLyBAcGFyYW0gYXNzZXQgVGhlIEFzc2V0SUQgb2YgdGhlIGFzc2V0IGJlaW5nIHRyYW5zZmVycmVkLgphc3NldEFsbG93bGlzdEFkZDoKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU4NAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1ODYKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlICsgQVNTRVRfU0VUVExFTUVOVF9BRERSRVNTX0NPU1QsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJaW50IDE5MzAwCgkrCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTkxCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTkyCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5MwoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5NAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5NQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5OAoJLy8gdGhpcy5Bc3NldEFsbG93bGlzdEFkZGVkLmxvZyh7IGFzc2V0OiBhc3NldCB9KQoJYnl0ZSAweDI2MzZiYzdlIC8vIEFzc2V0QWxsb3dsaXN0QWRkZWQodWludDY0KQoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWxvZwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYwMAoJLy8gdGhpcy51cGRhdGVTZXR0bGVtZW50QWRkcmVzcyhhc3NldCwgc2V0dGxlbWVudEFkZHJlc3MpCglmcmFtZV9kaWcgLTMgLy8gc2V0dGxlbWVudEFkZHJlc3M6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJY2FsbHN1YiB1cGRhdGVTZXR0bGVtZW50QWRkcmVzcwoJcmV0c3ViCgovLyBhc3NldEFsbG93bGlzdFJlbW92ZSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2Fzc2V0QWxsb3dsaXN0UmVtb3ZlOgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYXNzZXRBbGxvd2xpc3RSZW1vdmUodWludDY0KXZvaWQKCWNhbGxzdWIgYXNzZXRBbGxvd2xpc3RSZW1vdmUKCWludCAxCglyZXR1cm4KCi8vIGFzc2V0QWxsb3dsaXN0UmVtb3ZlKGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG1hc3RlciBjb250cmFjdCB0byByZWplY3QgYWNjZXB0aW5nIGFuIGFzc2V0LgovLwovLyBAcGFyYW0gYXNzZXQgLSBUaGUgQXNzZXRJRCBvZiB0aGUgYXNzZXQgYmVpbmcgdHJhbnNmZXJyZWQuCmFzc2V0QWxsb3dsaXN0UmVtb3ZlOgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjA5CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYxMgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYxMwoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MTQKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MTUKCS8vIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRDbG9zZVRvCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjE2CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjE3CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjIxCgkvLyB0aGlzLnNldHRsZW1lbnRfYWRkcmVzcyhhc3NldCkuZGVsZXRlKCkKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglib3hfZGVsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjIzCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlICsgQVNTRVRfU0VUVExFTUVOVF9BRERSRVNTX0NPU1QsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjI0CgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjI1CgkvLyBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UgKyBBU1NFVF9TRVRUTEVNRU5UX0FERFJFU1NfQ09TVAoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCglpbnQgMTkzMDAKCSsKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYyOAoJLy8gdGhpcy5Bc3NldEFsbG93bGlzdFJlbW92ZWQubG9nKHsgYXNzZXQ6IGFzc2V0IH0pCglieXRlIDB4MDY1YzAzNzQgLy8gQXNzZXRBbGxvd2xpc3RSZW1vdmVkKHVpbnQ2NCkKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2FyZEZ1bmREZWJpdChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZERlYml0OgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGNhcmRGdW5kOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkRnVuZERlYml0KGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZERlYml0CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZERlYml0KGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCwgYW1vdW50OiB1aW50NjQsIG5vbmNlOiB1aW50NjQpOiB2b2lkCi8vCi8vIERlYml0cyB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiB0aGUgZ2l2ZW4gYXNzZXQgZnJvbSB0aGUgY2FyZCBhY2NvdW50LgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24uCi8vCi8vIEBwYXJhbSBjYXJkRnVuZCBUaGUgY2FyZCBmdW5kIGZyb20gd2hpY2ggdGhlIGFzc2V0IHdpbGwgYmUgZGViaXRlZC4KLy8gQHBhcmFtIGFzc2V0IFRoZSBhc3NldCB0byBiZSBkZWJpdGVkLgovLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIGRlYml0ZWQuCmNhcmRGdW5kRGViaXQ6Cglwcm90byA0IDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY0MAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NDMKCS8vIG5leHROb25jZSA9IHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUubm9uY2UKCWludCA5NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9idXJ5IDAgLy8gbmV4dE5vbmNlOiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NDQKCS8vIGFzc2VydChuZXh0Tm9uY2UgPT09IG5vbmNlKQoJZnJhbWVfZGlnIDAgLy8gbmV4dE5vbmNlOiB1aW50NjQKCWZyYW1lX2RpZyAtNCAvLyBub25jZTogdWludDY0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ3CgkvLyBzZW5kZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ4CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ5CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjUwCgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjUzCgkvLyB0aGlzLkRlYml0LmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICAgICAgbm9uY2U6IG5vbmNlLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDVjNWI5MTM0IC8vIERlYml0KGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NjEKCS8vIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUubm9uY2UgPSBuZXh0Tm9uY2UgKyAxCglpbnQgOTYgLy8gaGVhZE9mZnNldAoJZnJhbWVfZGlnIDAgLy8gbmV4dE5vbmNlOiB1aW50NjQKCWludCAxCgkrCglpdG9iCglieXRlIDB4NjM2NiAvLyAiY2YiCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNvbmNhdAoJY292ZXIgMgoJYm94X3JlcGxhY2UKCXJldHN1YgoKLy8gZ2V0UmVmdW5kQWRkcmVzcygpYWRkcmVzcwoqYWJpX3JvdXRlX2dldFJlZnVuZEFkZHJlc3M6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0UmVmdW5kQWRkcmVzcygpYWRkcmVzcwoJY2FsbHN1YiBnZXRSZWZ1bmRBZGRyZXNzCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0UmVmdW5kQWRkcmVzcygpOiBBZGRyZXNzCi8vCi8vIFJldHJpZXZlcyB0aGUgcmVmdW5kIGFkZHJlc3MuCi8vCi8vIEByZXR1cm5zIFRoZSByZWZ1bmQgYWRkcmVzcy4KZ2V0UmVmdW5kQWRkcmVzczoKCXByb3RvIDAgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY3MQoJLy8gcmV0dXJuIHRoaXMucmVmdW5kX2FkZHJlc3MudmFsdWU7CglieXRlIDB4NzI2MSAvLyAicmEiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBzZXRSZWZ1bmRBZGRyZXNzKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3NldFJlZnVuZEFkZHJlc3M6CgkvLyBuZXdSZWZ1bmRBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRSZWZ1bmRBZGRyZXNzKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBzZXRSZWZ1bmRBZGRyZXNzCglpbnQgMQoJcmV0dXJuCgovLyBzZXRSZWZ1bmRBZGRyZXNzKG5ld1JlZnVuZEFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFNldHMgdGhlIHJlZnVuZCBhZGRyZXNzLgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIGNhbGwgdGhpcyBtZXRob2QuCi8vCi8vIEBwYXJhbSBuZXdSZWZ1bmRBZGRyZXNzIFRoZSBuZXcgcmVmdW5kIGFkZHJlc3MgdG8gYmUgc2V0LgpzZXRSZWZ1bmRBZGRyZXNzOgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjgxCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY4MwoJLy8gdGhpcy5yZWZ1bmRfYWRkcmVzcy52YWx1ZSA9IG5ld1JlZnVuZEFkZHJlc3MKCWJ5dGUgMHg3MjYxIC8vICJyYSIKCWZyYW1lX2RpZyAtMSAvLyBuZXdSZWZ1bmRBZGRyZXNzOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkRnVuZFJlZnVuZChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZFJlZnVuZDoKCS8vIG5vbmNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRSZWZ1bmQoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNhcmRGdW5kUmVmdW5kCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZFJlZnVuZChjYXJkRnVuZDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0LCBub25jZTogdWludDY0KTogdm9pZAovLwovLyBSZWZ1bmRzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBhbiBhc3NldCB0byBhIGNhcmQgYWNjb3VudC4KLy8gT25seSB0aGUgb3duZXIgb2YgdGhlIGNvbnRyYWN0IGNhbiBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLgovLwovLyBAcGFyYW0gY2FyZEZ1bmQgLSBUaGUgY2FyZCBhY2NvdW50IHRvIHJlZnVuZCB0aGUgYXNzZXQgdG8uCi8vIEBwYXJhbSBhc3NldCAtIFRoZSBhc3NldCB0byByZWZ1bmQuCi8vIEBwYXJhbSBhbW91bnQgLSBUaGUgYW1vdW50IG9mIHRoZSBhc3NldCB0byByZWZ1bmQuCmNhcmRGdW5kUmVmdW5kOgoJcHJvdG8gNCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2OTUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucmVmdW5kX2FkZHJlc3MudmFsdWUsICdPbmx5IHRoZSByZWZ1bmQgYWRkcmVzcyBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uJykKCXR4biBTZW5kZXIKCWJ5dGUgMHg3MjYxIC8vICJyYSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoKCS8vIE9ubHkgdGhlIHJlZnVuZCBhZGRyZXNzIGNhbiBjYWxsIHRoaXMgZnVuY3Rpb24KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY5OAoJLy8gbmV4dE5vbmNlID0gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS52YWx1ZS5ub25jZQoJaW50IDk2IC8vIGhlYWRPZmZzZXQKCWludCA4CglieXRlIDB4NjM2NiAvLyAiY2YiCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBuZXh0Tm9uY2U6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY5OQoJLy8gYXNzZXJ0KG5leHROb25jZSA9PT0gbm9uY2UpCglmcmFtZV9kaWcgMCAvLyBuZXh0Tm9uY2U6IHVpbnQ2NAoJZnJhbWVfZGlnIC00IC8vIG5vbmNlOiB1aW50NjQKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDEKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDIKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzAzCgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDQKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDUKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDgKCS8vIHRoaXMuUmVmdW5kLmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICAgICAgbm9uY2U6IG5vbmNlLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweGUzN2FhZTVjIC8vIFJlZnVuZChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtNCAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzE2CgkvLyB0aGlzLmNhcmRfZnVuZHMoY2FyZEZ1bmQpLnZhbHVlLm5vbmNlID0gbmV4dE5vbmNlICsgMQoJaW50IDk2IC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAwIC8vIG5leHROb25jZTogdWludDY0CglpbnQgMQoJKwoJaXRvYgoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9yZXBsYWNlCglyZXRzdWIKCi8vIGdldE5leHRTZXR0bGVtZW50Tm9uY2UoKXVpbnQ2NAoqYWJpX3JvdXRlX2dldE5leHRTZXR0bGVtZW50Tm9uY2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0TmV4dFNldHRsZW1lbnROb25jZSgpdWludDY0CgljYWxsc3ViIGdldE5leHRTZXR0bGVtZW50Tm9uY2UKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXROZXh0U2V0dGxlbWVudE5vbmNlKCk6IHVpbnQ2NAovLwovLyBSZXRyaWV2ZXMgdGhlIG5leHQgYXZhaWxhYmxlIG5vbmNlIGZvciBzZXR0bGVtZW50cy4KLy8KLy8gQHJldHVybnMgVGhlIHNldHRsZW1lbnQgbm9uY2UuCmdldE5leHRTZXR0bGVtZW50Tm9uY2U6Cglwcm90byAwIDEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MjYKCS8vIHJldHVybiB0aGlzLnNldHRsZW1lbnRfbm9uY2UudmFsdWU7CglieXRlIDB4NzM2ZSAvLyAic24iCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBnZXROZXh0Q2FyZEZ1bmROb25jZShhZGRyZXNzKXVpbnQ2NAoqYWJpX3JvdXRlX2dldE5leHRDYXJkRnVuZE5vbmNlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ2V0TmV4dENhcmRGdW5kTm9uY2UoYWRkcmVzcyl1aW50NjQKCWNhbGxzdWIgZ2V0TmV4dENhcmRGdW5kTm9uY2UKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBnZXROZXh0Q2FyZEZ1bmROb25jZShjYXJkRnVuZDogQWRkcmVzcyk6IHVpbnQ2NAovLwovLyBSZXRyaWV2ZXMgdGhlIG5leHQgYXZhaWxhYmxlIG5vbmNlIGZvciB0aGUgY2FyZCBmdW5kLgovLwovLyBAcGFyYW0gY2FyZEZ1bmQgVGhlIGNhcmQgZnVuZCBhZGRyZXNzLgovLyBAcmV0dXJucyBUaGUgbm9uY2UgZm9yIHRoZSBjYXJkIGZ1bmQuCmdldE5leHRDYXJkRnVuZE5vbmNlOgoJcHJvdG8gMSAxCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzM3CgkvLyByZXR1cm4gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS52YWx1ZS5ub25jZTsKCWludCA5NiAvLyBoZWFkT2Zmc2V0CglpbnQgOAoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglyZXRzdWIKCi8vIGdldENhcmRGdW5kRGF0YShhZGRyZXNzKShhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpCiphYmlfcm91dGVfZ2V0Q2FyZEZ1bmREYXRhOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZ2V0Q2FyZEZ1bmREYXRhKGFkZHJlc3MpKGFkZHJlc3MsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCkKCWNhbGxzdWIgZ2V0Q2FyZEZ1bmREYXRhCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0Q2FyZEZ1bmREYXRhKGNhcmRGdW5kOiBBZGRyZXNzKTogQ2FyZEZ1bmREYXRhCi8vCi8vIFJldHJpZXZlcyB0aGUgY2FyZCBmdW5kIGRhdGEgZm9yIGEgZ2l2ZW4gY2FyZCBmdW5kIGFkZHJlc3MuCi8vCi8vIEBwYXJhbSBjYXJkRnVuZCBUaGUgYWRkcmVzcyBvZiB0aGUgY2FyZCBmdW5kLgovLyBAcmV0dXJucyBUaGUgY2FyZCBmdW5kIGRhdGEuCmdldENhcmRGdW5kRGF0YToKCXByb3RvIDEgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc0OAoJLy8gcmV0dXJuIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWU7CglieXRlIDB4NjM2NiAvLyAiY2YiCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2dldAoJYXNzZXJ0CglyZXRzdWIKCi8vIGdldFNldHRsZW1lbnRBZGRyZXNzKHVpbnQ2NClhZGRyZXNzCiphYmlfcm91dGVfZ2V0U2V0dGxlbWVudEFkZHJlc3M6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGdldFNldHRsZW1lbnRBZGRyZXNzKHVpbnQ2NClhZGRyZXNzCgljYWxsc3ViIGdldFNldHRsZW1lbnRBZGRyZXNzCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0U2V0dGxlbWVudEFkZHJlc3MoYXNzZXQ6IEFzc2V0SUQpOiBBZGRyZXNzCi8vCi8vIFJldHJpZXZlcyB0aGUgc2V0dGxlbWVudCBhZGRyZXNzIGZvciB0aGUgc3BlY2lmaWVkIGFzc2V0LgovLwovLyBAcGFyYW0gYXNzZXQgVGhlIElEIG9mIHRoZSBhc3NldC4KLy8gQHJldHVybnMgVGhlIHNldHRsZW1lbnQgYWRkcmVzcyBmb3IgdGhlIGFzc2V0LgpnZXRTZXR0bGVtZW50QWRkcmVzczoKCXByb3RvIDEgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc1OQoJLy8gcmV0dXJuIHRoaXMuc2V0dGxlbWVudF9hZGRyZXNzKGFzc2V0KS52YWx1ZTsKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCXJldHN1YgoKLy8gc2V0U2V0dGxlbWVudEFkZHJlc3ModWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3NldFNldHRsZW1lbnRBZGRyZXNzOgoJLy8gbmV3U2V0dGxlbWVudEFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBzZXR0bGVtZW50QXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2V0U2V0dGxlbWVudEFkZHJlc3ModWludDY0LGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBzZXRTZXR0bGVtZW50QWRkcmVzcwoJaW50IDEKCXJldHVybgoKLy8gc2V0U2V0dGxlbWVudEFkZHJlc3Moc2V0dGxlbWVudEFzc2V0OiBBc3NldElELCBuZXdTZXR0bGVtZW50QWRkcmVzczogQWRkcmVzcyk6IHZvaWQKLy8KLy8gU2V0cyB0aGUgc2V0dGxlbWVudCBhZGRyZXNzIGZvciBhIGdpdmVuIHNldHRsZW1lbnQgYXNzZXQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIG1ldGhvZC4KLy8KLy8gQHBhcmFtIHNldHRsZW1lbnRBc3NldCBUaGUgSUQgb2YgdGhlIHNldHRsZW1lbnQgYXNzZXQuCi8vIEBwYXJhbSBuZXdTZXR0bGVtZW50QWRkcmVzcyBUaGUgbmV3IHNldHRsZW1lbnQgYWRkcmVzcyB0byBiZSBzZXQuCnNldFNldHRsZW1lbnRBZGRyZXNzOgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzcwCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc3MgoJLy8gdGhpcy51cGRhdGVTZXR0bGVtZW50QWRkcmVzcyhzZXR0bGVtZW50QXNzZXQsIG5ld1NldHRsZW1lbnRBZGRyZXNzKQoJZnJhbWVfZGlnIC0yIC8vIG5ld1NldHRsZW1lbnRBZGRyZXNzOiBBZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gc2V0dGxlbWVudEFzc2V0OiBBc3NldElECgljYWxsc3ViIHVwZGF0ZVNldHRsZW1lbnRBZGRyZXNzCglyZXRzdWIKCi8vIHNldHRsZSh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfc2V0dGxlOgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2V0dGxlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0dGxlCglpbnQgMQoJcmV0dXJuCgovLyBzZXR0bGUoYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0LCBub25jZTogdWludDY0KTogdm9pZAovLwovLyBTZXR0bGVzIGEgcGF5bWVudCBieSB0cmFuc2ZlcnJpbmcgYW4gYXNzZXQgdG8gdGhlIHNwZWNpZmllZCByZWNpcGllbnQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLgovLwovLyBAcGFyYW0gYXNzZXQgVGhlIGFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgovLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgovLyBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIHRvIHByZXZlbnQgZHVwbGljYXRlIHNldHRsZW1lbnRzLgpzZXR0bGU6Cglwcm90byAzIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3ODQKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Nzg3CgkvLyBhc3NlcnQodGhpcy5zZXR0bGVtZW50X25vbmNlLnZhbHVlID09PSBub25jZSkKCWJ5dGUgMHg3MzZlIC8vICJzbiIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc4OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MoYXNzZXQpLnZhbHVlLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3OTAKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzkxCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnNldHRsZW1lbnRfYWRkcmVzcyhhc3NldCkudmFsdWUKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5MgoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5MwoJLy8gYXNzZXRBbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5NgoJLy8gdGhpcy5TZXR0bGVtZW50LmxvZyh7CgkvLyAgICAgICAgICAgICByZWNpcGllbnQ6IHRoaXMuc2V0dGxlbWVudF9hZGRyZXNzKGFzc2V0KS52YWx1ZSwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICAgICAgbm9uY2U6IG5vbmNlLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDU1ODA0NmVjIC8vIFNldHRsZW1lbnQoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCkKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4MDQKCS8vIHRoaXMuc2V0dGxlbWVudF9ub25jZS52YWx1ZSA9IHRoaXMuc2V0dGxlbWVudF9ub25jZS52YWx1ZSArIDEKCWJ5dGUgMHg3MzZlIC8vICJzbiIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgkrCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkRnVuZEVuYWJsZUFzc2V0KHBheSxhZGRyZXNzLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY2FyZEZ1bmRFbmFibGVBc3NldDoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kRW5hYmxlQXNzZXQocGF5LGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRFbmFibGVBc3NldAoJaW50IDEKCXJldHVybgoKLy8gY2FyZEZ1bmRFbmFibGVBc3NldChtYnI6IFBheVR4biwgY2FyZEZ1bmQ6IEFkZHJlc3MsIGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIGRlcG9zaXRvciAob3Igb3duZXIpIHRvIE9wdEluIHRvIGFuIGFzc2V0LCBpbmNyZWFzaW5nIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgb2YgdGhlIGFjY291bnQKLy8KLy8gQHBhcmFtIGNhcmRGdW5kIEFkZHJlc3MgdG8gYWRkIGFzc2V0IHRvCi8vIEBwYXJhbSBhc3NldCBBc3NldCB0byBhZGQKY2FyZEZ1bmRFbmFibGVBc3NldDoKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgxNQoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkRnVuZE93bmVyKGNhcmRGdW5kKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3IxCglmcmFtZV9kaWcgLTIgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgaXNDYXJkRnVuZE93bmVyCgl8fAoKKnNraXBfb3IxOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODE3CgkvLyB2ZXJpZnlQYXlUeG4obWJyLCB7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZSwKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODIyCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODIzCgkvLyByZWNlaXZlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgyNAoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgyNwoJLy8gdGhpcy5jYXJkRnVuZEFzc2V0T3B0SW4oY2FyZEZ1bmQsIGFzc2V0KQoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglmcmFtZV9kaWcgLTIgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgY2FyZEZ1bmRBc3NldE9wdEluCglyZXRzdWIKCi8vIGNhcmRGdW5kRGlzYWJsZUFzc2V0KGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZERpc2FibGVBc3NldDoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmREaXNhYmxlQXNzZXQoYWRkcmVzcyx1aW50NjQpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZERpc2FibGVBc3NldAoJaW50IDEKCXJldHVybgoKLy8gY2FyZEZ1bmREaXNhYmxlQXNzZXQoY2FyZEZ1bmQ6IEFkZHJlc3MsIGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIGRlcG9zaXRvciAob3Igb3duZXIpIHRvIENsb3NlT3V0IG9mIGFuIGFzc2V0LCByZWR1Y2luZyB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IG9mIHRoZSBhY2NvdW50Ci8vCi8vIEBwYXJhbSBjYXJkRnVuZCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBjYXJkLgovLyBAcGFyYW0gYXNzZXQgLSBUaGUgSUQgb2YgdGhlIGFzc2V0IHRvIGJlIHJlbW92ZWQuCmNhcmRGdW5kRGlzYWJsZUFzc2V0OgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODM3CgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjI6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4MzkKCS8vIHRoaXMuY2FyZEZ1bmRBc3NldENsb3NlT3V0KGNhcmRGdW5kLCBhc3NldCkKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljYWxsc3ViIGNhcmRGdW5kQXNzZXRDbG9zZU91dAoJcmV0c3ViCgovLyBjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdCiphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhd2FsUmVxdWVzdDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gcmVjaXBpZW50OiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0KCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhd2FsUmVxdWVzdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QoY2FyZEZ1bmQ6IEFkZHJlc3MsIHJlY2lwaWVudDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogYnl0ZXMzMgovLwovLyBBbGxvd3MgdGhlIENhcmQgSG9sZGVyIChvciBjb250cmFjdCBvd25lcikgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIGNhcmRGdW5kIEFkZHJlc3MgdG8gd2l0aGRyYXcgZnJvbQovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gd2l0aGRyYXcKLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgdG8gd2l0aGRyYXcKLy8gQHJldHVybnMgV2l0aGRyYXdhbCBoYXNoIHVzZWQgZm9yIGNvbXBsZXRpbmcgb3IgY2FuY2VsbGluZyB0aGUgd2l0aGRyYXdhbApjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0OgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjg1MgoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkRnVuZE93bmVyKGNhcmRGdW5kKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3IzCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgaXNDYXJkRnVuZE93bmVyCgl8fAoKKnNraXBfb3IzOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODU0CgkvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdCA9IHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIHJlY2lwaWVudDogcmVjaXBpZW50LAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgICAgICB0aW1lc3RhbXA6IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wICsgdGhpcy53aXRoZHJhd2FsX3dhaXRfdGltZS52YWx1ZSwKCS8vICAgICAgICAgICAgIG5vbmNlOiB0aGlzLndpdGhkcmF3YWxfbm9uY2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSwKCS8vICAgICAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gcmVjaXBpZW50OiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJYnl0ZSAweDc3Nzc3NCAvLyAid3d0IgoJYXBwX2dsb2JhbF9nZXQKCSsKCWl0b2IKCWNvbmNhdAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc3NmUgLy8gInduIgoJYXBwX2xvY2FsX2dldAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4NjIKCS8vIHRoaXMud2l0aGRyYXdhbF9ub25jZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gdGhpcy53aXRoZHJhd2FsX25vbmNlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgKyAxCgl0eG4gU2VuZGVyCglieXRlIDB4Nzc2ZSAvLyAid24iCgl0eG4gU2VuZGVyCglieXRlIDB4Nzc2ZSAvLyAid24iCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2xvY2FsX3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjg2MwoJLy8gd2l0aGRyYXdhbF9oYXNoID0gc2hhMjU2KHJhd0J5dGVzKHdpdGhkcmF3YWwpKQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCXNoYTI1NgoJZnJhbWVfYnVyeSAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4NjUKCS8vIHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlID0gd2l0aGRyYXdhbAoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDEgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWFwcF9sb2NhbF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4NjcKCS8vIHRoaXMuV2l0aGRyYXdhbFJlcXVlc3QubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiB3aXRoZHJhd2FsLmNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgcmVjaXBpZW50OiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIGFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgICAgIHRpbWVzdGFtcDogd2l0aGRyYXdhbC50aW1lc3RhbXAsCgkvLyAgICAgICAgICAgICBub25jZTogd2l0aGRyYXdhbC5ub25jZSwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhkODVmNjIwYSAvLyBXaXRoZHJhd2FsUmVxdWVzdChhZGRyZXNzLGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCA3MiA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDgwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgODggOAoJYnRvaQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjg3NgoJLy8gcmV0dXJuIHdpdGhkcmF3YWxfaGFzaDsKCWZyYW1lX2RpZyAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIGNhcmRGdW5kV2l0aGRyYXdhbENhbmNlbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWw6CgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXdhbENhbmNlbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhd2FsQ2FuY2VsCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwoY2FyZEZ1bmQ6IEFkZHJlc3MsIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBDYXJkIEhvbGRlciAob3IgY29udHJhY3Qgb3duZXIpIHRvIGNhbmNlbCBhIHdpdGhkcmF3YWwgcmVxdWVzdAovLyBAcGFyYW0gY2FyZEZ1bmQgQWRkcmVzcyB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSB3aXRoZHJhd2FsX2hhc2ggSGFzaCBvZiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0CmNhcmRGdW5kV2l0aGRyYXdhbENhbmNlbDoKCXByb3RvIDIgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjg4NQoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkRnVuZE93bmVyKGNhcmRGdW5kKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3I0CglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgaXNDYXJkRnVuZE93bmVyCgl8fAoKKnNraXBfb3I0OgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODg3CgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgovLyBjYXJkRnVuZFdpdGhkcmF3KGFkZHJlc3MsYnl0ZVszMl0pdm9pZAoqYWJpX3JvdXRlX2NhcmRGdW5kV2l0aGRyYXc6CgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXcoYWRkcmVzcyxieXRlWzMyXSl2b2lkCgljYWxsc3ViIGNhcmRGdW5kV2l0aGRyYXcKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kV2l0aGRyYXcoY2FyZEZ1bmQ6IEFkZHJlc3MsIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBDYXJkIEhvbGRlciB0byBzZW5kIGFuIGFtb3VudCBvZiBhc3NldHMgZnJvbSB0aGUgYWNjb3VudAovLyBAcGFyYW0gY2FyZEZ1bmQgQWRkcmVzcyB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSB3aXRoZHJhd2FsX2hhc2ggSGFzaCBvZiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0CmNhcmRGdW5kV2l0aGRyYXc6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODk4CgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjUKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjU6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo5MDAKCS8vIHdpdGhkcmF3YWwgPSB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS52YWx1ZQoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTAwCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo5MDIKCS8vIGFzc2VydChnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA+PSB3aXRoZHJhd2FsLnRpbWVzdGFtcCB8fCB0aGlzLmlzT3duZXIoKSkKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vd2l0aGRyYXdhbAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL3dpdGhkcmF3YWwKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgODAgOAoJYnRvaQoJPj0KCWR1cAoJYm56ICpza2lwX29yNgoJY2FsbHN1YiBpc093bmVyCgl8fAoKKnNraXBfb3I2OgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTA1CgkvLyB0aGlzLndpdGhkcmF3RnVuZHMod2l0aGRyYXdhbCkKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vd2l0aGRyYXdhbAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL3dpdGhkcmF3YWwKCWFwcF9sb2NhbF9nZXQKCWNhbGxzdWIgd2l0aGRyYXdGdW5kcwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjkwOAoJLy8gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkuZGVsZXRlKCkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWFwcF9sb2NhbF9kZWwKCXJldHN1YgoKLy8gY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5KGFkZHJlc3MsYnl0ZVszMl0sYnl0ZVs2NF0pdm9pZAoqYWJpX3JvdXRlX2NhcmRGdW5kV2l0aGRyYXdFYXJseToKCS8vIGVhcmx5X3dpdGhkcmF3YWxfc2lnOiBieXRlWzY0XQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCA2NAoJPT0KCWFzc2VydAoKCS8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5KGFkZHJlc3MsYnl0ZVszMl0sYnl0ZVs2NF0pdm9pZAoJY2FsbHN1YiBjYXJkRnVuZFdpdGhkcmF3RWFybHkKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kV2l0aGRyYXdFYXJseShjYXJkRnVuZDogQWRkcmVzcywgd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyLCBlYXJseV93aXRoZHJhd2FsX3NpZzogYnl0ZXM2NCk6IHZvaWQKLy8KLy8gV2l0aGRyYXdzIGZ1bmRzIGJlZm9yZSB0aGUgd2l0aGRyYXdhbCB0aW1lc3RhbXAgaGFzIGxhcHNlZCwgYnkgdXNpbmcgdGhlIGVhcmx5IHdpdGhkcmF3YWwgc2lnbmF0dXJlIHByb3ZpZGVkIGJ5IEltbWVyc3ZlLgovLyBAcGFyYW0gY2FyZEZ1bmQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgY2FyZC4KLy8gQHBhcmFtIHdpdGhkcmF3YWxfaGFzaCAtIFRoZSBoYXNoIG9mIHRoZSB3aXRoZHJhd2FsLgovLyBAcGFyYW0gZWFybHlfd2l0aGRyYXdhbF9zaWcgLSBUaGUgc2lnbmF0dXJlIGZvciBlYXJseSB3aXRoZHJhd2FsLgpjYXJkRnVuZFdpdGhkcmF3RWFybHk6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTE4CgkvLyBhc3NlcnQodGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljYWxsc3ViIGlzQ2FyZEZ1bmRPd25lcgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTIwCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCWZyYW1lX2RpZyAtMiAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjkyMAoJLy8gd2l0aGRyYXdhbCA9IHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjkyMwoJLy8gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgPCB3aXRoZHJhd2FsLnRpbWVzdGFtcAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCA4MCA4CglidG9pCgk8CglieiAqaWYxX2VuZAoKLy8gKmlmMV9jb25zZXF1ZW50Cip3aGlsZV8wOgoKKndoaWxlXzBfY29udGludWU6CgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo5MjYKCS8vIGdsb2JhbHMub3Bjb2RlQnVkZ2V0IDwgMjUwMAoJZ2xvYmFsIE9wY29kZUJ1ZGdldAoJaW50IDI1MDAKCTwKCWJ6ICp3aGlsZV8wX2VuZAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjkyNwoJLy8gaW5jcmVhc2VPcGNvZGVCdWRnZXQoKQoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWludCAwCglpdHhuX2ZpZWxkIEZlZQoJYnl0ZSBiNjQgQ29FQiAvLyAjcHJhZ21hIHZlcnNpb24gMTA7IGludCAxCglkdXAKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCglpbnQgRGVsZXRlQXBwbGljYXRpb24KCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCglpdHhuX3N1Ym1pdAoJYiAqd2hpbGVfMAoKKndoaWxlXzBfZW5kOgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTMwCgkvLyBhc3NlcnQoZWQyNTUxOVZlcmlmeUJhcmUod2l0aGRyYXdhbF9oYXNoLCBlYXJseV93aXRoZHJhd2FsX3NpZywgdGhpcy5lYXJseV93aXRoZHJhd2FsX3B1YmtleS52YWx1ZSkpCglmcmFtZV9kaWcgLTIgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyCglmcmFtZV9kaWcgLTMgLy8gZWFybHlfd2l0aGRyYXdhbF9zaWc6IGJ5dGVzNjQKCWJ5dGUgMHg2NTc3NzA2YiAvLyAiZXdwayIKCWFwcF9nbG9iYWxfZ2V0CgllZDI1NTE5dmVyaWZ5X2JhcmUKCWFzc2VydAoKKmlmMV9lbmQ6CgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo5MzQKCS8vIHRoaXMud2l0aGRyYXdGdW5kcyh3aXRoZHJhd2FsKQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJY2FsbHN1YiB3aXRoZHJhd0Z1bmRzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTM3CgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImRlcGxveShhZGRyZXNzKWFkZHJlc3MiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RlcGxveQoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJvd25lcigpYWRkcmVzcyIKCW1ldGhvZCAidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJzZXRXaXRoZHJhd2FsVGltZW91dCh1aW50NjQpdm9pZCIKCW1ldGhvZCAic2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgInBhcnRuZXJDaGFubmVsQ3JlYXRlKHBheSxzdHJpbmcpYWRkcmVzcyIKCW1ldGhvZCAicGFydG5lckNoYW5uZWxDbG9zZShhZGRyZXNzKXZvaWQiCgltZXRob2QgImNhcmRGdW5kQ3JlYXRlKHBheSxhZGRyZXNzLHVpbnQ2NClhZGRyZXNzIgoJbWV0aG9kICJjYXJkRnVuZENsb3NlKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiY2FyZEZ1bmRSZWNvdmVyKGFkZHJlc3MsYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJhc3NldEFsbG93bGlzdEFkZChwYXksdWludDY0LGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiYXNzZXRBbGxvd2xpc3RSZW1vdmUodWludDY0KXZvaWQiCgltZXRob2QgImNhcmRGdW5kRGViaXQoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJnZXRSZWZ1bmRBZGRyZXNzKClhZGRyZXNzIgoJbWV0aG9kICJzZXRSZWZ1bmRBZGRyZXNzKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiY2FyZEZ1bmRSZWZ1bmQoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJnZXROZXh0U2V0dGxlbWVudE5vbmNlKCl1aW50NjQiCgltZXRob2QgImdldE5leHRDYXJkRnVuZE5vbmNlKGFkZHJlc3MpdWludDY0IgoJbWV0aG9kICJnZXRDYXJkRnVuZERhdGEoYWRkcmVzcykoYWRkcmVzcyxhZGRyZXNzLGFkZHJlc3MsdWludDY0KSIKCW1ldGhvZCAiZ2V0U2V0dGxlbWVudEFkZHJlc3ModWludDY0KWFkZHJlc3MiCgltZXRob2QgInNldFNldHRsZW1lbnRBZGRyZXNzKHVpbnQ2NCxhZGRyZXNzKXZvaWQiCgltZXRob2QgInNldHRsZSh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZEVuYWJsZUFzc2V0KHBheSxhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZERpc2FibGVBc3NldChhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwoYWRkcmVzcyxieXRlWzMyXSl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3KGFkZHJlc3MsYnl0ZVszMl0pdm9pZCIKCW1ldGhvZCAiY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5KGFkZHJlc3MsYnl0ZVszMl0sYnl0ZVs2NF0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3duZXIgKmFiaV9yb3V0ZV90cmFuc2Zlck93bmVyc2hpcCAqYWJpX3JvdXRlX3NldFdpdGhkcmF3YWxUaW1lb3V0ICphYmlfcm91dGVfc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5ICphYmlfcm91dGVfcGFydG5lckNoYW5uZWxDcmVhdGUgKmFiaV9yb3V0ZV9wYXJ0bmVyQ2hhbm5lbENsb3NlICphYmlfcm91dGVfY2FyZEZ1bmRDcmVhdGUgKmFiaV9yb3V0ZV9jYXJkRnVuZENsb3NlICphYmlfcm91dGVfY2FyZEZ1bmRSZWNvdmVyICphYmlfcm91dGVfYXNzZXRBbGxvd2xpc3RBZGQgKmFiaV9yb3V0ZV9hc3NldEFsbG93bGlzdFJlbW92ZSAqYWJpX3JvdXRlX2NhcmRGdW5kRGViaXQgKmFiaV9yb3V0ZV9nZXRSZWZ1bmRBZGRyZXNzICphYmlfcm91dGVfc2V0UmVmdW5kQWRkcmVzcyAqYWJpX3JvdXRlX2NhcmRGdW5kUmVmdW5kICphYmlfcm91dGVfZ2V0TmV4dFNldHRsZW1lbnROb25jZSAqYWJpX3JvdXRlX2dldE5leHRDYXJkRnVuZE5vbmNlICphYmlfcm91dGVfZ2V0Q2FyZEZ1bmREYXRhICphYmlfcm91dGVfZ2V0U2V0dGxlbWVudEFkZHJlc3MgKmFiaV9yb3V0ZV9zZXRTZXR0bGVtZW50QWRkcmVzcyAqYWJpX3JvdXRlX3NldHRsZSAqYWJpX3JvdXRlX2NhcmRGdW5kRW5hYmxlQXNzZXQgKmFiaV9yb3V0ZV9jYXJkRnVuZERpc2FibGVBc3NldCAqYWJpX3JvdXRlX2NhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QgKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwgKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3ICphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5CgllcnIKCipjYWxsX09wdEluOgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0CgllcnIKCipjYWxsX0Nsb3NlT3V0OgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3KGFkZHJlc3MsYnl0ZVszMl0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhdwoJZXJyCgoqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCW1ldGhvZCAidXBkYXRlKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV91cGRhdGUKCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CgltZXRob2QgImRlc3Ryb3koKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2Rlc3Ryb3kKCWVycgoKKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWIKCipwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJY29uY2F0CglmcmFtZV9idXJ5IC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50CglkdXAKCWxlbgoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglidG9pCgkrCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfYnVyeSAtMiAvLyBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy a partner channel, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active card funds",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalTimeout",
        "desc": "Set the number of seconds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "seconds",
            "type": "uint64",
            "desc": "New number of seconds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setEarlyWithdrawalPubkey",
        "desc": "Sets the early withdrawal public key.",
        "args": [
          {
            "name": "pubkey",
            "type": "byte[32]",
            "desc": "The public key to set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerChannelCreate",
        "desc": "Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "The name of the partner channel."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner channel account."
        },
        "events": [
          {
            "name": "PartnerChannelCreated",
            "args": [
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              },
              {
                "name": "partnerChannelName",
                "type": "string",
                "desc": "Partner Channel Name"
              }
            ],
            "desc": "Partner Channel Created event"
          }
        ]
      },
      {
        "name": "partnerChannelClose",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Funding Channel name"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt-in to. 0 = No asset opt-in"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        },
        "events": [
          {
            "name": "CardFundCreated",
            "args": [
              {
                "name": "cardFundOwner",
                "type": "address",
                "desc": "Card Fund Owner"
              },
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Card Fund"
              },
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              }
            ],
            "desc": "Card Created event"
          }
        ]
      },
      {
        "name": "cardFundClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund to recover."
          },
          {
            "name": "newCardFundHolder",
            "type": "address",
            "desc": "The address of the new card holder."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          },
          {
            "name": "settlementAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "AssetAllowlistAdded",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset added to allowlist"
              }
            ],
            "desc": "Asset Allowlist Added event"
          }
        ]
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "AssetAllowlistRemoved",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset removed from allowlist"
              }
            ],
            "desc": "Asset Allowlist Removed event"
          }
        ]
      },
      {
        "name": "cardFundDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be debited."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "getRefundAddress",
        "desc": "Retrieves the refund address.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address",
          "desc": "The refund address."
        }
      },
      {
        "name": "setRefundAddress",
        "desc": "Sets the refund address.Only the owner of the contract can call this method.",
        "args": [
          {
            "name": "newRefundAddress",
            "type": "address",
            "desc": "The new refund address to be set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card account to refund the asset to."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to refund."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to refund."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "getNextSettlementNonce",
        "desc": "Retrieves the next available nonce for settlements.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "The settlement nonce."
        }
      },
      {
        "name": "getNextCardFundNonce",
        "desc": "Retrieves the next available nonce for the card fund.",
        "readonly": true,
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund address."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The nonce for the card fund."
        }
      },
      {
        "name": "getCardFundData",
        "desc": "Retrieves the card fund data for a given card fund address.",
        "readonly": true,
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card fund."
          }
        ],
        "returns": {
          "type": "(address,address,address,uint64)",
          "desc": "The card fund data."
        }
      },
      {
        "name": "getSettlementAddress",
        "desc": "Retrieves the settlement address for the specified asset.",
        "readonly": true,
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The settlement address for the asset."
        }
      },
      {
        "name": "setSettlementAddress",
        "desc": "Sets the settlement address for a given settlement asset.Only the owner of the contract can call this method.",
        "args": [
          {
            "name": "settlementAsset",
            "type": "uint64",
            "desc": "The ID of the settlement asset."
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "The new settlement address to be set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be transferred."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "The nonce to prevent duplicate settlements."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "recipient",
                "type": "address",
                "desc": "Settlement destination address"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Settlement nonce to prevent duplicate settlements"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "cardFundEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        },
        "events": [
          {
            "name": "WithdrawalRequest",
            "args": [
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Funding Source to withdraw from"
              },
              {
                "name": "recipient",
                "type": "address",
                "desc": "Recipient address to withdraw to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset to withdraw"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount to withdraw"
              },
              {
                "name": "timestamp",
                "type": "uint64",
                "desc": "Timestamp that must be reached before withdrawal can be completed"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Withdrawal nonce"
              }
            ],
            "desc": "Withdrawal Request event"
          }
        ]
      },
      {
        "name": "cardFundWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawEarly",
        "desc": "Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "The hash of the withdrawal."
          },
          {
            "name": "early_withdrawal_sig",
            "type": "byte[64]",
            "desc": "The signature for early withdrawal."
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "PartnerChannelCreated",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "Partner Channel Name"
          }
        ],
        "desc": "Partner Channel Created event"
      },
      {
        "name": "CardFundCreated",
        "args": [
          {
            "name": "cardFundOwner",
            "type": "address",
            "desc": "Card Fund Owner"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          }
        ],
        "desc": "Card Created event"
      },
      {
        "name": "CardFundAssetEnabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Enabled event"
      },
      {
        "name": "CardFundAssetDisabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Disabled event"
      },
      {
        "name": "AssetAllowlistAdded",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset added to allowlist"
          }
        ],
        "desc": "Asset Allowlist Added event"
      },
      {
        "name": "AssetAllowlistRemoved",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset removed from allowlist"
          }
        ],
        "desc": "Asset Allowlist Removed event"
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "SettlementAddressChanged",
        "args": [
          {
            "name": "oldSettlementAddress",
            "type": "address",
            "desc": "Old settlement address"
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "New settlement address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "Settlement destination address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Settlement nonce to prevent duplicate settlements"
          }
        ],
        "desc": "Settlement event"
      },
      {
        "name": "WithdrawalRequest",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address to withdraw to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          },
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "Timestamp that must be reached before withdrawal can be completed"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal Request event"
      },
      {
        "name": "Withdrawal",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source withdrawn from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address withdrawn to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount withdrawn"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal event"
      }
    ]
  }
}