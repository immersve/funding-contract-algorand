{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauser()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePauser(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalTimeout(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEarlyWithdrawalPubkey(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPartnerChannelMbr(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCardFundMbr(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundCreate(pay,address,uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRecover(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetAllowlistMbr()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDebit(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRefundAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setRefundAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRefund(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextSettlementNonce()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextCardFundNonce(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCardFundData(address)(address,address,address,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSettlementAddress(uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSettlementAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCardFundAssetMbr()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundEnableAsset(pay,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDisableAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardFundWithdrawalCancel(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdraw(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    },
    "cardFundWithdrawEarly(address,byte[32],byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "wn"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pauser": {
          "type": "bytes",
          "key": "_pauser"
        },
        "paused": {
          "type": "bytes",
          "key": "paused"
        },
        "card_funds_active_count": {
          "type": "uint64",
          "key": "cfac"
        },
        "partner_channels_active_count": {
          "type": "uint64",
          "key": "pcac"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "wwt"
        },
        "early_withdrawal_pubkey": {
          "type": "bytes",
          "key": "ewpk"
        },
        "settlement_nonce": {
          "type": "uint64",
          "key": "sn"
        },
        "refund_address": {
          "type": "bytes",
          "key": "ra"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pauser",
        "desc": "@noticeReturns current pauser@returnPauser's address",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "pause",
        "desc": "@devcalled by the owner to pause, triggers stopped state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Pause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "unpause",
        "desc": "@devcalled by the owner to unpause, returns to normal state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Unpause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "updatePauser",
        "desc": "@devupdate the pauser role",
        "args": [
          {
            "name": "_newPauser",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PauserChanged",
            "args": [
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deploy",
        "desc": "Deploy a partner channel, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active card funds",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalTimeout",
        "desc": "Set the number of seconds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "seconds",
            "type": "uint64",
            "desc": "New number of seconds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setEarlyWithdrawalPubkey",
        "desc": "Sets the early withdrawal public key.",
        "args": [
          {
            "name": "pubkey",
            "type": "byte[32]",
            "desc": "The public key to set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getPartnerChannelMbr",
        "desc": "Retrieves the minimum balance requirement for creating a partner channel account.",
        "args": [
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "The name of the partner channel."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The minimum balance requirement for creating a partner channel account."
        }
      },
      {
        "name": "partnerChannelCreate",
        "desc": "Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "The name of the partner channel."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner channel account."
        },
        "events": [
          {
            "name": "PartnerChannelCreated",
            "args": [
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              },
              {
                "name": "partnerChannelName",
                "type": "string",
                "desc": "Partner Channel Name"
              }
            ],
            "desc": "Partner Channel Created event"
          }
        ]
      },
      {
        "name": "partnerChannelClose",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getCardFundMbr",
        "desc": "Retrieves the minimum balance requirement for creating a card fund account.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt-in to. 0 = No asset opt-in"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement for creating a card fund account"
        }
      },
      {
        "name": "cardFundCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Funding Channel name"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt-in to. 0 = No asset opt-in"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        },
        "events": [
          {
            "name": "CardFundCreated",
            "args": [
              {
                "name": "cardFundOwner",
                "type": "address",
                "desc": "Card Fund Owner"
              },
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Card Fund"
              },
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              }
            ],
            "desc": "Card Created event"
          }
        ]
      },
      {
        "name": "cardFundClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund to recover."
          },
          {
            "name": "newCardFundHolder",
            "type": "address",
            "desc": "The address of the new card holder."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAssetAllowlistMbr",
        "desc": "Retrieves the minimum balance requirement for adding an asset to the allowlist.",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "Minimum balance requirement for adding an asset to the allowlist"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          },
          {
            "name": "settlementAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "AssetAllowlistAdded",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset added to allowlist"
              }
            ],
            "desc": "Asset Allowlist Added event"
          }
        ]
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "AssetAllowlistRemoved",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset removed from allowlist"
              }
            ],
            "desc": "Asset Allowlist Removed event"
          }
        ]
      },
      {
        "name": "cardFundDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be debited."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "getRefundAddress",
        "desc": "Retrieves the refund address.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address",
          "desc": "The refund address."
        }
      },
      {
        "name": "setRefundAddress",
        "desc": "Sets the refund address.Only the owner of the contract can call this method.",
        "args": [
          {
            "name": "newRefundAddress",
            "type": "address",
            "desc": "The new refund address to be set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card account to refund the asset to."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to refund."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to refund."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "getNextSettlementNonce",
        "desc": "Retrieves the next available nonce for settlements.",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "The settlement nonce."
        }
      },
      {
        "name": "getNextCardFundNonce",
        "desc": "Retrieves the next available nonce for the card fund.",
        "readonly": true,
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund address."
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "The nonce for the card fund."
        }
      },
      {
        "name": "getCardFundData",
        "desc": "Retrieves the card fund data for a given card fund address.",
        "readonly": true,
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card fund."
          }
        ],
        "returns": {
          "type": "(address,address,address,uint64)",
          "desc": "The card fund data."
        }
      },
      {
        "name": "getSettlementAddress",
        "desc": "Retrieves the settlement address for the specified asset.",
        "readonly": true,
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The settlement address for the asset."
        }
      },
      {
        "name": "setSettlementAddress",
        "desc": "Sets the settlement address for a given settlement asset.Only the owner of the contract can call this method.",
        "args": [
          {
            "name": "settlementAsset",
            "type": "uint64",
            "desc": "The ID of the settlement asset."
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "The new settlement address to be set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be transferred."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "The nonce to prevent duplicate settlements."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "recipient",
                "type": "address",
                "desc": "Settlement destination address"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Settlement nonce to prevent duplicate settlements"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "getCardFundAssetMbr",
        "desc": "Retrieves the minimum balance requirement for adding an asset to the card fund.",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "The minimum balance requirement for adding an asset to the card fund."
        }
      },
      {
        "name": "cardFundEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        },
        "events": [
          {
            "name": "WithdrawalRequest",
            "args": [
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Funding Source to withdraw from"
              },
              {
                "name": "recipient",
                "type": "address",
                "desc": "Recipient address to withdraw to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset to withdraw"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount to withdraw"
              },
              {
                "name": "timestamp",
                "type": "uint64",
                "desc": "Timestamp that must be reached before withdrawal can be completed"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Withdrawal nonce"
              }
            ],
            "desc": "Withdrawal Request event"
          }
        ]
      },
      {
        "name": "cardFundWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawEarly",
        "desc": "Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "The hash of the withdrawal."
          },
          {
            "name": "early_withdrawal_sig",
            "type": "byte[64]",
            "desc": "The signature for early withdrawal."
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "Pause",
        "args": [],
        "desc": ""
      },
      {
        "name": "Unpause",
        "args": [],
        "desc": ""
      },
      {
        "name": "PauserChanged",
        "args": [
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      },
      {
        "name": "PartnerChannelCreated",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "Partner Channel Name"
          }
        ],
        "desc": "Partner Channel Created event"
      },
      {
        "name": "CardFundCreated",
        "args": [
          {
            "name": "cardFundOwner",
            "type": "address",
            "desc": "Card Fund Owner"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          }
        ],
        "desc": "Card Created event"
      },
      {
        "name": "CardFundAssetEnabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Enabled event"
      },
      {
        "name": "CardFundAssetDisabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Disabled event"
      },
      {
        "name": "AssetAllowlistAdded",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset added to allowlist"
          }
        ],
        "desc": "Asset Allowlist Added event"
      },
      {
        "name": "AssetAllowlistRemoved",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset removed from allowlist"
          }
        ],
        "desc": "Asset Allowlist Removed event"
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "SettlementAddressChanged",
        "args": [
          {
            "name": "oldSettlementAddress",
            "type": "address",
            "desc": "Old settlement address"
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "New settlement address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "Settlement destination address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Settlement nonce to prevent duplicate settlements"
          }
        ],
        "desc": "Settlement event"
      },
      {
        "name": "WithdrawalRequest",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address to withdraw to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          },
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "Timestamp that must be reached before withdrawal can be completed"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal Request event"
      },
      {
        "name": "Withdrawal",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source withdrawn from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address withdrawn to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount withdrawn"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal event"
      }
    ]
  }
}