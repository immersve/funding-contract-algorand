{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalRounds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEarlyWithdrawalPubkey(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerClose(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardCreate(pay,string,address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardClose(string,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRecover(string,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerAcceptAsset(pay,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerRejectAsset(string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDebit(string,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRefund(string,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardEnableAsset(pay,string,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDisableAsset(string,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdrawalRequest(string,address,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardWithdrawalCancel(string,address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdraw(string,address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    },
    "cardWithdrawEarly(string,address,byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "n"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "active_cards": {
          "type": "uint64",
          "key": "c"
        },
        "active_partners": {
          "type": "uint64",
          "key": "p"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "w"
        },
        "early_withdrawal_pubkey": {
          "type": "bytes",
          "key": "k"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg2LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpjYWxsX0Nsb3NlT3V0ICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKmNhbGxfRGVsZXRlQXBwbGljYXRpb24gKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gb25seU93bmVyKCk6IHZvaWQKLy8KLy8gQXNzZXJ0IHRoZSB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdC4Kb25seU93bmVyOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo1MwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBpc093bmVyKCk6IGJvb2xlYW4KLy8KLy8gQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIHNlbmRlciBpcyB0aGUgb3duZXIuCi8vIEByZXR1cm5zIGJvb2xlYW4gVHJ1ZSBpZiB0aGUgc2VuZGVyIGlzIHRoZSBvd25lciwgZmFsc2Ugb3RoZXJ3aXNlLgppc093bmVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo2MQoJLy8gcmV0dXJuIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWU7Cgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCXJldHN1YgoKLy8gb3duZXIoKWFkZHJlc3MKKmFiaV9yb3V0ZV9vd25lcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBvd25lcigpYWRkcmVzcwoJY2FsbHN1YiBvd25lcgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIG93bmVyKCk6IEFkZHJlc3MKb3duZXI6Cglwcm90byAwIDEKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjY3CgkvLyByZXR1cm4gdGhpcy5fb3duZXIudmFsdWU7CglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBvd25lci4KLy8gQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgb3duZXIuCl90cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo3NgoJLy8gcHJldmlvdXNPd25lciA9IHRoaXMuX293bmVyLmV4aXN0cyA/IHRoaXMuX293bmVyLnZhbHVlIDogZ2xvYmFscy56ZXJvQWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYnogKnRlcm5hcnkxX2ZhbHNlCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglnbG9iYWwgWmVyb0FkZHJlc3MKCip0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDAgLy8gcHJldmlvdXNPd25lcjogYWRkcmVzcwoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NzcKCS8vIHRoaXMuX293bmVyLnZhbHVlID0gbmV3T3duZXIKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjc5CgkvLyB0aGlzLk93bmVyc2hpcFRyYW5zZmVycmVkLmxvZyh7CgkvLyAgICAgICAgICAgICBwcmV2aW91c093bmVyOiBwcmV2aW91c093bmVyLAoJLy8gICAgICAgICAgICAgbmV3T3duZXI6IG5ld093bmVyLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDlhMjIzZWZiIC8vIE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcykKCWZyYW1lX2RpZyAwIC8vIHByZXZpb3VzT3duZXI6IGFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV90cmFuc2Zlck93bmVyc2hpcDoKCS8vIG5ld093bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKCWNhbGxzdWIgdHJhbnNmZXJPd25lcnNoaXAKCWludCAxCglyZXR1cm4KCi8vIHRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgb3duZXIuCi8vIFJlcXVpcmVzIHRoZSBjYWxsZXIgdG8gYmUgdGhlIGN1cnJlbnQgb3duZXIuCi8vCi8vIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgp0cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6OTMKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSkKCWNhbGxzdWIgaXNPd25lcgoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo5NQoJLy8gdGhpcy5fdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpCglmcmFtZV9kaWcgLTEgLy8gbmV3T3duZXI6IEFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyT3duZXJzaGlwCglyZXRzdWIKCi8vIGlzQ2FyZEhvbGRlcihwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFkZHJlc3MpOiBib29sZWFuCi8vCi8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIHNlbmRlciBpcyB0aGUgQ2FyZCBIb2xkZXIgb2YgdGhlIGNhcmQgYWNjb3VudAovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIGNoZWNrCi8vIEByZXR1cm5zIFRydWUgaWYgdGhlIHNlbmRlciBpcyB0aGUgQ2FyZCBIb2xkZXIgb2YgdGhlIGNhcmQKaXNDYXJkSG9sZGVyOgoJcHJvdG8gMiAxCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTQ3CgkvLyByZXR1cm4gdGhpcy5jYXJkcyh7IHBhcnRuZXI6IHBhcnRuZXIsIGNhcmRIb2xkZXI6IHRoaXMudHhuLnNlbmRlciB9IGFzIENhcmREZXRhaWxzKS52YWx1ZSA9PT0gY2FyZDsKCWJ5dGUgMHg2MyAvLyAiYyIKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMjIgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cgl0eG4gU2VuZGVyCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWNvbmNhdAoJYm94X2dldAoJYXNzZXJ0CglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJPT0KCXJldHN1YgoKLy8gd2l0aGRyYXdGdW5kcyh3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdCk6IHZvaWQKd2l0aGRyYXdGdW5kczoKCXByb3RvIDEgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE1MQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB3aXRoZHJhd2FsLmNhcmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogd2l0aGRyYXdhbC5hc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE1MgoJLy8gc2VuZGVyOiB3aXRoZHJhd2FsLmNhcmQKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCAxNiAzMgoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNTMKCS8vIGFzc2V0UmVjZWl2ZXI6IHdpdGhkcmF3YWwucmVjaXBpZW50CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNDggMzIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE1NAoJLy8geGZlckFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgODAgOAoJYnRvaQoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNTUKCS8vIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDg4IDgKCWJ0b2kKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTU5CgkvLyB0aGlzLldpdGhkcmF3YWwubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmQ6IHdpdGhkcmF3YWwuY2FyZCwKCS8vICAgICAgICAgICAgIHJlY2lwaWVudDogd2l0aGRyYXdhbC5yZWNpcGllbnQsCgkvLyAgICAgICAgICAgICBhc3NldDogd2l0aGRyYXdhbC5hc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogd2l0aGRyYXdhbC5hbW91bnQsCgkvLyAgICAgICAgICAgICBub25jZTogd2l0aGRyYXdhbC5ub25jZSwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHgzYjdiMzYwYiAvLyBXaXRoZHJhd2FsKGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCkKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCAxNiAzMgoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDQ4IDMyCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCA4MCA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCA4OCA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZGVwbG95KGFkZHJlc3MpYWRkcmVzcwoqYWJpX3JvdXRlX2RlcGxveToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGRlcGxveShhZGRyZXNzKWFkZHJlc3MKCWNhbGxzdWIgZGVwbG95Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZGVwbG95KG93bmVyOiBBZGRyZXNzKTogQWRkcmVzcwovLwovLyBEZXBsb3kgYSBQYXJ0bmVyLCBzZXR0aW5nIHRoZSBvd25lciBhcyBwcm92aWRlZApkZXBsb3k6Cglwcm90byAxIDEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNzQKCS8vIHRoaXMuX3RyYW5zZmVyT3duZXJzaGlwKG93bmVyKQoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCgljYWxsc3ViIF90cmFuc2Zlck93bmVyc2hpcAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE3NgoJLy8gcmV0dXJuIHRoaXMuYXBwLmFkZHJlc3M7CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJcmV0c3ViCgovLyB1cGRhdGUoKXZvaWQKKmFiaV9yb3V0ZV91cGRhdGU6CgkvLyBleGVjdXRlIHVwZGF0ZSgpdm9pZAoJY2FsbHN1YiB1cGRhdGUKCWludCAxCglyZXR1cm4KCi8vIHVwZGF0ZSgpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgb3duZXIgdG8gdXBkYXRlIHRoZSBzbWFydCBjb250cmFjdAp1cGRhdGU6Cglwcm90byAwIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxODQKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCglyZXRzdWIKCi8vIGRlc3Ryb3koKXZvaWQKKmFiaV9yb3V0ZV9kZXN0cm95OgoJLy8gZXhlY3V0ZSBkZXN0cm95KCl2b2lkCgljYWxsc3ViIGRlc3Ryb3kKCWludCAxCglyZXR1cm4KCi8vIGRlc3Ryb3koKTogdm9pZAovLwovLyBEZXN0cm95IHRoZSBzbWFydCBjb250cmFjdCwgc2VuZGluZyBhbGwgQWxnbyB0byB0aGUgb3duZXIgYWNjb3VudC4gVGhpcyBjYW4gb25seSBiZSBkb25lIGlmIHRoZXJlIGFyZSBubyBhY3RpdmUgY2FyZHMKZGVzdHJveToKCXByb3RvIDAgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE5MgoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxOTUKCS8vIGFzc2VydCghdGhpcy5hY3RpdmVfY2FyZHMudmFsdWUpCglieXRlIDB4NjMgLy8gImMiCglhcHBfZ2xvYmFsX2dldAoJIQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTk3CgkvLyBhc3NlcnQoIXRoaXMuYWN0aXZlX3BhcnRuZXJzLnZhbHVlKQoJYnl0ZSAweDcwIC8vICJwIgoJYXBwX2dsb2JhbF9nZXQKCSEKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE5OQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IDAsCgkvLyAgICAgICAgICAgICBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLm93bmVyKCksCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjAwCgkvLyByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMDEKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjAyCgkvLyBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLm93bmVyKCkKCWNhbGxzdWIgb3duZXIKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gc2V0V2l0aGRyYXdhbFJvdW5kcyh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NldFdpdGhkcmF3YWxSb3VuZHM6CgkvLyByb3VuZHM6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2V0V2l0aGRyYXdhbFJvdW5kcyh1aW50NjQpdm9pZAoJY2FsbHN1YiBzZXRXaXRoZHJhd2FsUm91bmRzCglpbnQgMQoJcmV0dXJuCgovLyBzZXRXaXRoZHJhd2FsUm91bmRzKHJvdW5kczogdWludDY0KTogdm9pZAovLwovLyBTZXQgdGhlIG51bWJlciBvZiByb3VuZHMgYSB3aXRoZHJhd2FsIHJlcXVlc3QgbXVzdCB3YWl0IHVudGlsIGJlaW5nIHdpdGhkcmF3bgovLyBAcGFyYW0gcm91bmRzIE5ldyBudW1iZXIgb2Ygcm91bmRzIHRvIHdhaXQKc2V0V2l0aGRyYXdhbFJvdW5kczoKCXByb3RvIDEgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIxMgoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMTQKCS8vIHRoaXMud2l0aGRyYXdhbF93YWl0X3RpbWUudmFsdWUgPSByb3VuZHMKCWJ5dGUgMHg3NyAvLyAidyIKCWZyYW1lX2RpZyAtMSAvLyByb3VuZHM6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9zZXRFYXJseVdpdGhkcmF3YWxQdWJrZXk6CgkvLyBwdWJrZXk6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXkoYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXkKCWludCAxCglyZXR1cm4KCi8vIHNldEVhcmx5V2l0aGRyYXdhbFB1YmtleShwdWJrZXk6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIFNldHMgdGhlIGVhcmx5IHdpdGhkcmF3YWwgcHVibGljIGtleS4KLy8gQHBhcmFtIHB1YmtleSAtIFRoZSBwdWJsaWMga2V5IHRvIHNldC4Kc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5OgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjIyCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIyNAoJLy8gdGhpcy5lYXJseV93aXRoZHJhd2FsX3B1YmtleS52YWx1ZSA9IHB1YmtleQoJYnl0ZSAweDZiIC8vICJrIgoJZnJhbWVfZGlnIC0xIC8vIHB1YmtleTogYnl0ZXMzMgoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gcGFydG5lckNyZWF0ZShwYXksc3RyaW5nKWFkZHJlc3MKKmFiaV9yb3V0ZV9wYXJ0bmVyQ3JlYXRlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gbWJyOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgcGFydG5lckNyZWF0ZShwYXksc3RyaW5nKWFkZHJlc3MKCWNhbGxzdWIgcGFydG5lckNyZWF0ZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHBhcnRuZXJDcmVhdGUobWJyOiBQYXlUeG4sIHBhcnRuZXI6IHN0cmluZyk6IEFkZHJlc3MKLy8KLy8gQ3JlYXRlcyBhIHBhcnRuZXIgYWNjb3VudCBhbmQgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBwcm92aWRlZCBwYXJ0bmVyIG5hbWUuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLgovLwovLyBAcGFyYW0gbWJyIC0gVGhlIFBheVR4biBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwYXltZW50IHRyYW5zYWN0aW9uLgovLyBAcGFyYW0gcGFydG5lciAtIFRoZSBuYW1lIG9mIHRoZSBwYXJ0bmVyLgovLyBAcmV0dXJucyBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3bHkgY3JlYXRlZCBwYXJ0bmVyIGFjY291bnQuCnBhcnRuZXJDcmVhdGU6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjM2CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIzOAoJLy8gYXNzZXJ0KCF0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLmV4aXN0cykKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjQwCgkvLyBib3hDb3N0ID0gMjUwMCArIDQwMCAqICgzICsgbGVuKHBhcnRuZXIpICsgMzIpCglpbnQgMjUwMAoJaW50IDQwMAoJaW50IDMKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyOiBzdHJpbmcKCWxlbgoJKwoJaW50IDMyCgkrCgkqCgkrCglmcmFtZV9idXJ5IDAgLy8gYm94Q29zdDogdWludDY0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjQyCgkvLyB2ZXJpZnlQYXlUeG4obWJyLCB7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlICsgZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZSArIGJveENvc3QsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBNaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCSsKCWZyYW1lX2RpZyAwIC8vIGJveENvc3Q6IHVpbnQ2NAoJKwoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI0OAoJLy8gcGFydG5lckFkZHIgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ29udHJvbGxlZEFkZHJlc3MucHJvdG90eXBlLm5ldz4oewoJLy8gICAgICAgICAgICAgb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uRGVsZXRlQXBwbGljYXRpb24sCgkvLyAgICAgICAgICAgICBhcHByb3ZhbFByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmFwcHJvdmFsUHJvZ3JhbSgpLAoJLy8gICAgICAgICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmNsZWFyUHJvZ3JhbSgpLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAibmV3KClhZGRyZXNzIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNDkKCS8vIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uCglpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNTAKCS8vIGFwcHJvdmFsUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuYXBwcm92YWxQcm9ncmFtKCkKCWJ5dGUgYjY0IENpQUNBUUF4R0JTQkJnc3hHUWlOREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKd0NBQkJVZmZIV0lBQVJRc0NKRGlnQUJzU0t5RURJS3NnY2pzZ2d5RHJJZ0k3SUJzeklLaVlBRVZoMHY2allhQUk0Qi84MEEKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjUxCgkvLyBjbGVhclN0YXRlUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuY2xlYXJQcm9ncmFtKCkKCWJ5dGUgYjY0IENnPT0KCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWZyYW1lX2J1cnkgMSAvLyBwYXJ0bmVyQWRkcjogYWRkcmVzcwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI1NQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHBhcnRuZXJBZGRyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjU2CgkvLyByZWNlaXZlcjogcGFydG5lckFkZHIKCWZyYW1lX2RpZyAxIC8vIHBhcnRuZXJBZGRyOiBhZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjU3CgkvLyBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZQoJZ2xvYmFsIE1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2MAoJLy8gdGhpcy5wYXJ0bmVycyhwYXJ0bmVyKS52YWx1ZSA9IHBhcnRuZXJBZGRyCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTIgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9kaWcgMSAvLyBwYXJ0bmVyQWRkcjogYWRkcmVzcwoJYm94X3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2MwoJLy8gdGhpcy5hY3RpdmVfcGFydG5lcnMudmFsdWUgPSB0aGlzLmFjdGl2ZV9wYXJ0bmVycy52YWx1ZSArIDEKCWJ5dGUgMHg3MCAvLyAicCIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgkrCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2NQoJLy8gcmV0dXJuIHBhcnRuZXJBZGRyOwoJZnJhbWVfZGlnIDEgLy8gcGFydG5lckFkZHI6IGFkZHJlc3MKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIHBhcnRuZXJDbG9zZShzdHJpbmcpdm9pZAoqYWJpX3JvdXRlX3BhcnRuZXJDbG9zZToKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHBhcnRuZXJDbG9zZShzdHJpbmcpdm9pZAoJY2FsbHN1YiBwYXJ0bmVyQ2xvc2UKCWludCAxCglyZXR1cm4KCi8vIHBhcnRuZXJDbG9zZShwYXJ0bmVyOiBzdHJpbmcpOiB2b2lkCnBhcnRuZXJDbG9zZToKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjY5CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3MQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IDAsCgkvLyAgICAgICAgICAgICBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjcyCgkvLyBzZW5kZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzMKCS8vIHJlY2VpdmVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTEgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzQKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjc1CgkvLyBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzgKCS8vIGJveENvc3QgPSAyNTAwICsgNDAwICogKDMgKyBsZW4ocGFydG5lcikgKyAzMikKCWludCAyNTAwCglpbnQgNDAwCglpbnQgMwoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJbGVuCgkrCglpbnQgMzIKCSsKCSoKCSsKCWZyYW1lX2J1cnkgMCAvLyBib3hDb3N0OiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyODAKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGJveENvc3QsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjgxCgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjgyCgkvLyBhbW91bnQ6IGJveENvc3QKCWZyYW1lX2RpZyAwIC8vIGJveENvc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjg2CgkvLyB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLmRlbGV0ZSgpCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTEgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfZGVsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjg5CgkvLyB0aGlzLmFjdGl2ZV9wYXJ0bmVycy52YWx1ZSA9IHRoaXMuYWN0aXZlX3BhcnRuZXJzLnZhbHVlIC0gMQoJYnl0ZSAweDcwIC8vICJwIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCS0KCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNhcmRDcmVhdGUocGF5LHN0cmluZyxhZGRyZXNzKWFkZHJlc3MKKmFiaV9yb3V0ZV9jYXJkQ3JlYXRlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBjYXJkSG9sZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRDcmVhdGUocGF5LHN0cmluZyxhZGRyZXNzKWFkZHJlc3MKCWNhbGxzdWIgY2FyZENyZWF0ZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRDcmVhdGUobWJyOiBQYXlUeG4sIHBhcnRuZXI6IHN0cmluZywgY2FyZEhvbGRlcjogQWRkcmVzcyk6IEFkZHJlc3MKLy8KLy8gQ3JlYXRlIGFjY291bnQuIFRoaXMgZ2VuZXJhdGVzIGEgYnJhbmQgbmV3IGFjY291bnQgYW5kIGZ1bmRzIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQKLy8gQHBhcmFtIGNhcmRIb2xkZXIgQWRkcmVzcyB0byBoYXZlIGNvbnRyb2wgb3ZlciBhc3NldCB3aXRoZHJhd2FscwovLyBAcmV0dXJucyBOZXdseSBnZW5lcmF0ZWQgYWNjb3VudCB1c2VkIGJ5IHRoZWlyIGNhcmQKY2FyZENyZWF0ZToKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTgKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzAwCgkvLyBhc3NlcnQodGhpcy5wYXJ0bmVycyhwYXJ0bmVyKS5leGlzdHMpCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTIgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwMgoJLy8gY2FyZEZ1bmRzOiBDYXJkRGV0YWlscyA9IHsgcGFydG5lcjogcGFydG5lciwgY2FyZEhvbGRlcjogY2FyZEhvbGRlciB9CglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDIyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0zIC8vIGNhcmRIb2xkZXI6IEFkZHJlc3MKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJZnJhbWVfYnVyeSAwIC8vIGNhcmRGdW5kczogQ2FyZERldGFpbHMKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMDMKCS8vIGJveENvc3QgPSAyNTAwICsgNDAwICogKDEgKyBsZW4oY2FyZEZ1bmRzKSArIDMyKQoJaW50IDI1MDAKCWludCA0MDAKCWludCAxCglmcmFtZV9kaWcgMCAvLyBjYXJkRnVuZHM6IENhcmREZXRhaWxzCglsZW4KCSsKCWludCAzMgoJKwoJKgoJKwoJZnJhbWVfYnVyeSAxIC8vIGJveENvc3Q6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwNQoJLy8gdmVyaWZ5UGF5VHhuKG1iciwgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSArIGJveENvc3QsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBNaW5CYWxhbmNlCglmcmFtZV9kaWcgMSAvLyBib3hDb3N0OiB1aW50NjQKCSsKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTEKCS8vIGNhcmRBZGRyID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIENvbnRyb2xsZWRBZGRyZXNzLnByb3RvdHlwZS5uZXc+KHsKCS8vICAgICAgICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uLAoJLy8gICAgICAgICAgICAgYXBwcm92YWxQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5hcHByb3ZhbFByb2dyYW0oKSwKCS8vICAgICAgICAgICAgIGNsZWFyU3RhdGVQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5jbGVhclByb2dyYW0oKSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgIm5ldygpYWRkcmVzcyIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzEyCgkvLyBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5EZWxldGVBcHBsaWNhdGlvbgoJaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzEzCgkvLyBhcHByb3ZhbFByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmFwcHJvdmFsUHJvZ3JhbSgpCglieXRlIGI2NCBDaUFDQVFBeEdCU0JCZ3N4R1FpTkRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSndDQUJCVWZmSFdJQUFSUXNDSkRpZ0FCc1NLeUVESUtzZ2Nqc2dneURySWdJN0lCc3pJS2lZQUVWaDB2NmpZYUFJNEIvODBBCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxNAoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmNsZWFyUHJvZ3JhbSgpCglieXRlIGI2NCBDZz09CglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnQgMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglmcmFtZV9idXJ5IDIgLy8gY2FyZEFkZHI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTgKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBjYXJkQWRkciwKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxOQoJLy8gcmVjZWl2ZXI6IGNhcmRBZGRyCglmcmFtZV9kaWcgMiAvLyBjYXJkQWRkcjogYWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMyMAoJLy8gYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UKCWdsb2JhbCBNaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMjQKCS8vIHRoaXMuY2FyZHMoY2FyZEZ1bmRzKS52YWx1ZSA9IGNhcmRBZGRyCglieXRlIDB4NjMgLy8gImMiCglmcmFtZV9kaWcgMCAvLyBjYXJkRnVuZHM6IENhcmREZXRhaWxzCgljb25jYXQKCWZyYW1lX2RpZyAyIC8vIGNhcmRBZGRyOiBhZGRyZXNzCglib3hfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzI3CgkvLyB0aGlzLmFjdGl2ZV9jYXJkcy52YWx1ZSA9IHRoaXMuYWN0aXZlX2NhcmRzLnZhbHVlICsgMQoJYnl0ZSAweDYzIC8vICJjIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzMwCgkvLyByZXR1cm4gY2FyZEFkZHI7CglmcmFtZV9kaWcgMiAvLyBjYXJkQWRkcjogYWRkcmVzcwoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gY2FyZENsb3NlKHN0cmluZyxhZGRyZXNzLGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX2NhcmRDbG9zZToKCS8vIGNhcmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBjYXJkSG9sZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZENsb3NlKHN0cmluZyxhZGRyZXNzLGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjYXJkQ2xvc2UKCWludCAxCglyZXR1cm4KCi8vIGNhcmRDbG9zZShwYXJ0bmVyOiBzdHJpbmcsIGNhcmRIb2xkZXI6IEFkZHJlc3MsIGNhcmQ6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIENsb3NlIGFjY291bnQuIFRoaXMgcGVybWFuZW50bHkgcmVtb3ZlcyB0aGUgcmVrZXkgYW5kIGRlbGV0ZXMgdGhlIGFjY291bnQgZnJvbSB0aGUgbGVkZ2VyCi8vIEBwYXJhbSBwYXJ0bmVyIEZ1bmRpbmcgQ2hhbm5lbCBuYW1lCi8vIEBwYXJhbSBjYXJkSG9sZGVyIEFkZHJlc3Mgd2hpY2ggaGFzIGNvbnRyb2wgb3ZlciBhc3NldCB3aXRoZHJhd2FscwovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIGNsb3NlCmNhcmRDbG9zZToKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNDAKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzQyCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogY2FyZCwKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNDMKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzQ0CgkvLyByZWNlaXZlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNDUKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzQ2CgkvLyBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNDkKCS8vIGNhcmRGdW5kczogQ2FyZERldGFpbHMgPSB7IHBhcnRuZXI6IHBhcnRuZXIsIGNhcmRIb2xkZXI6IGNhcmRIb2xkZXIgfQoJYnl0ZSAweCAvLyBpbml0aWFsIGhlYWQKCWJ5dGUgMHggLy8gaW5pdGlhbCB0YWlsCglieXRlIDB4MDAyMiAvLyBpbml0aWFsIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTEgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkSG9sZGVyOiBBZGRyZXNzCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWZyYW1lX2J1cnkgMCAvLyBjYXJkRnVuZHM6IENhcmREZXRhaWxzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzUwCgkvLyBib3hDb3N0ID0gMjUwMCArIDQwMCAqICgxICsgbGVuKGNhcmRGdW5kcykgKyAzMikKCWludCAyNTAwCglpbnQgNDAwCglpbnQgMQoJZnJhbWVfZGlnIDAgLy8gY2FyZEZ1bmRzOiBDYXJkRGV0YWlscwoJbGVuCgkrCglpbnQgMzIKCSsKCSoKCSsKCWZyYW1lX2J1cnkgMSAvLyBib3hDb3N0OiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNTIKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGJveENvc3QsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzUzCgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzU0CgkvLyBhbW91bnQ6IGJveENvc3QKCWZyYW1lX2RpZyAxIC8vIGJveENvc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzU4CgkvLyB0aGlzLmNhcmRzKGNhcmRGdW5kcykuZGVsZXRlKCkKCWJ5dGUgMHg2MyAvLyAiYyIKCWZyYW1lX2RpZyAwIC8vIGNhcmRGdW5kczogQ2FyZERldGFpbHMKCWNvbmNhdAoJYm94X2RlbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM2MQoJLy8gdGhpcy5hY3RpdmVfY2FyZHMudmFsdWUgPSB0aGlzLmFjdGl2ZV9jYXJkcy52YWx1ZSAtIDEKCWJ5dGUgMHg2MyAvLyAiYyIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgktCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkUmVjb3ZlcihzdHJpbmcsYWRkcmVzcyxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9jYXJkUmVjb3ZlcjoKCS8vIG5ld0NhcmRIb2xkZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBvbGRDYXJkSG9sZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZFJlY292ZXIoc3RyaW5nLGFkZHJlc3MsYWRkcmVzcyl2b2lkCgljYWxsc3ViIGNhcmRSZWNvdmVyCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkUmVjb3ZlcihwYXJ0bmVyOiBzdHJpbmcsIG9sZENhcmRIb2xkZXI6IEFkZHJlc3MsIG5ld0NhcmRIb2xkZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFJlY292ZXJzIGZ1bmRzIGZyb20gYW4gb2xkIGNhcmQgYW5kIHRyYW5zZmVycyB0aGVtIHRvIGEgbmV3IGNhcmQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4KLy8KLy8gQHBhcmFtIHBhcnRuZXIgLSBUaGUgcGFydG5lciBhc3NvY2lhdGVkIHdpdGggdGhlIGNhcmRzLgovLyBAcGFyYW0gb2xkQ2FyZEhvbGRlciAtIFRoZSBhZGRyZXNzIG9mIHRoZSBvbGQgY2FyZCBob2xkZXIuCi8vIEBwYXJhbSBuZXdDYXJkSG9sZGVyIC0gVGhlIGFkZHJlc3Mgb2YgdGhlIG5ldyBjYXJkIGhvbGRlci4KY2FyZFJlY292ZXI6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzczCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM3NQoJLy8gb2xkQ2FyZEZ1bmRzOiBDYXJkRGV0YWlscyA9IHsgcGFydG5lcjogcGFydG5lciwgY2FyZEhvbGRlcjogb2xkQ2FyZEhvbGRlciB9CglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDIyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViICpwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudAoJZnJhbWVfZGlnIC0yIC8vIG9sZENhcmRIb2xkZXI6IEFkZHJlc3MKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJZnJhbWVfYnVyeSAwIC8vIG9sZENhcmRGdW5kczogQ2FyZERldGFpbHMKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNzYKCS8vIG5ld0NhcmRGdW5kczogQ2FyZERldGFpbHMgPSB7IHBhcnRuZXI6IHBhcnRuZXIsIGNhcmRIb2xkZXI6IG5ld0NhcmRIb2xkZXIgfQoJYnl0ZSAweCAvLyBpbml0aWFsIGhlYWQKCWJ5dGUgMHggLy8gaW5pdGlhbCB0YWlsCglieXRlIDB4MDAyMiAvLyBpbml0aWFsIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgLTEgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY2FsbHN1YiAqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMyAvLyBuZXdDYXJkSG9sZGVyOiBBZGRyZXNzCgljYWxsc3ViICpwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWZyYW1lX2J1cnkgMSAvLyBuZXdDYXJkRnVuZHM6IENhcmREZXRhaWxzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mzc3CgkvLyB0aGlzLmNhcmRzKG5ld0NhcmRGdW5kcykudmFsdWUgPSB0aGlzLmNhcmRzKG9sZENhcmRGdW5kcykudmFsdWUKCWJ5dGUgMHg2MyAvLyAiYyIKCWZyYW1lX2RpZyAxIC8vIG5ld0NhcmRGdW5kczogQ2FyZERldGFpbHMKCWNvbmNhdAoJYnl0ZSAweDYzIC8vICJjIgoJZnJhbWVfZGlnIDAgLy8gb2xkQ2FyZEZ1bmRzOiBDYXJkRGV0YWlscwoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWJveF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNzkKCS8vIHRoaXMuY2FyZHMob2xkQ2FyZEZ1bmRzKS5kZWxldGUoKQoJYnl0ZSAweDYzIC8vICJjIgoJZnJhbWVfZGlnIDAgLy8gb2xkQ2FyZEZ1bmRzOiBDYXJkRGV0YWlscwoJY29uY2F0Cglib3hfZGVsCglyZXRzdWIKCi8vIGFzc2V0QWxsb3dsaXN0QWRkKHBheSx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2Fzc2V0QWxsb3dsaXN0QWRkOgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFzc2V0QWxsb3dsaXN0QWRkKHBheSx1aW50NjQpdm9pZAoJY2FsbHN1YiBhc3NldEFsbG93bGlzdEFkZAoJaW50IDEKCXJldHVybgoKLy8gYXNzZXRBbGxvd2xpc3RBZGQobWJyOiBQYXlUeG4sIGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG1hc3RlciBjb250cmFjdCB0byBmbGFnIGludGVudCBvZiBhY2NlcHRpbmcgYW4gYXNzZXQuCi8vIFRoaXMgY2FuIGJlIGNvbnNpZGVyZWQgdGhlIHdoaXRlbGlzdHMgd2hpdGVsaXN0LgovLwovLyBAcGFyYW0gbWJyIC0gUGF5bWVudCB0cmFuc2FjdGlvbiBvZiBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQKLy8gQHBhcmFtIGFzc2V0IC0gVGhlIEFzc2V0SUQgb2YgdGhlIGFzc2V0IGJlaW5nIHRyYW5zZmVycmVkLgphc3NldEFsbG93bGlzdEFkZDoKCXByb3RvIDIgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM5MAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozOTIKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozOTcKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozOTgKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mzk5CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDAwCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDAxCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGFzc2V0QWxsb3dsaXN0UmVtb3ZlKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYXNzZXRBbGxvd2xpc3RSZW1vdmU6CgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhc3NldEFsbG93bGlzdFJlbW92ZSh1aW50NjQpdm9pZAoJY2FsbHN1YiBhc3NldEFsbG93bGlzdFJlbW92ZQoJaW50IDEKCXJldHVybgoKLy8gYXNzZXRBbGxvd2xpc3RSZW1vdmUoYXNzZXQ6IEFzc2V0SUQpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgbWFzdGVyIGNvbnRyYWN0IHRvIHJlamVjdCBhY2NlcHRpbmcgYW4gYXNzZXQuCi8vCi8vIEBwYXJhbSBhc3NldCAtIFRoZSBBc3NldElEIG9mIHRoZSBhc3NldCBiZWluZyB0cmFuc2ZlcnJlZC4KYXNzZXRBbGxvd2xpc3RSZW1vdmU6Cglwcm90byAxIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTEKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDE0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXNzZXRDbG9zZVRvOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDE1CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQxNgoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQxNwoJLy8gYXNzZXRDbG9zZVRvOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTgKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTkKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjIKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDIzCgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDI0CgkvLyBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHBhcnRuZXJBY2NlcHRBc3NldChwYXksc3RyaW5nLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcGFydG5lckFjY2VwdEFzc2V0OgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBtYnI6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBwYXJ0bmVyQWNjZXB0QXNzZXQocGF5LHN0cmluZyx1aW50NjQpdm9pZAoJY2FsbHN1YiBwYXJ0bmVyQWNjZXB0QXNzZXQKCWludCAxCglyZXR1cm4KCi8vIHBhcnRuZXJBY2NlcHRBc3NldChtYnI6IFBheVR4biwgcGFydG5lcjogc3RyaW5nLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBzcGVjaWZpZWQgYXNzZXQgdG8gYmUgdHJhbnNmZXJyZWQgZm9yIHVzZXJzIG9mIHRoaXMgcGFydG5lci4KLy8KLy8gQHBhcmFtIG1iciAtIFRoZSBQYXlUeG4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgdHJhbnNhY3Rpb24uCi8vIEBwYXJhbSBhc3NldCAtIFRoZSBJRCBvZiB0aGUgYXNzZXQgdG8gYmUgYWxsb3dlZC4KcGFydG5lckFjY2VwdEFzc2V0OgoJcHJvdG8gMyAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDM1CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQzNwoJLy8gdmVyaWZ5UGF5VHhuKG1iciwgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0MgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDQzCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0NAoJLy8gcmVjZWl2ZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0NQoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0OAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5wYXJ0bmVycyhwYXJ0bmVyKS52YWx1ZSwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0OQoJLy8gc2VuZGVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTIgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDUwCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlCglieXRlIDB4NzAgLy8gInAiCglmcmFtZV9kaWcgLTIgLy8gcGFydG5lcjogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglib3hfZ2V0Cglhc3NlcnQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ1MQoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ1MgoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBwYXJ0bmVyUmVqZWN0QXNzZXQoc3RyaW5nLHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfcGFydG5lclJlamVjdEFzc2V0OgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHBhcnRuZXJSZWplY3RBc3NldChzdHJpbmcsdWludDY0KXZvaWQKCWNhbGxzdWIgcGFydG5lclJlamVjdEFzc2V0CglpbnQgMQoJcmV0dXJuCgovLyBwYXJ0bmVyUmVqZWN0QXNzZXQocGFydG5lcjogc3RyaW5nLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gUmV2b2tlcyBhbiBhc3NldCBieSBjbG9zaW5nIG91dCBpdHMgYmFsYW5jZSBhbmQgdHJhbnNmZXJyaW5nIHRoZSBtaW5pbXVtIGJhbGFuY2UgdG8gdGhlIHNlbmRlci4KLy8KLy8gQHBhcmFtIGFzc2V0IFRoZSBJRCBvZiB0aGUgYXNzZXQgdG8gcmV2b2tlLgpwYXJ0bmVyUmVqZWN0QXNzZXQ6Cglwcm90byAyIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjIKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDY1CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgYXNzZXRDbG9zZVRvOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDY2CgkvLyBzZW5kZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjcKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDY4CgkvLyBhc3NldENsb3NlVG86IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjkKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzAKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzMKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5wYXJ0bmVycyhwYXJ0bmVyKS52YWx1ZSwKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDc0CgkvLyBzZW5kZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzUKCS8vIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzYKCS8vIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gY2FyZERlYml0KHN0cmluZyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NhcmREZWJpdDoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGNhcmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjYXJkRGViaXQoc3RyaW5nLGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNhcmREZWJpdAoJaW50IDEKCXJldHVybgoKLy8gY2FyZERlYml0KHBhcnRuZXI6IHN0cmluZywgY2FyZDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogdm9pZAovLwovLyBEZWJpdHMgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgdGhlIGdpdmVuIGFzc2V0IGZyb20gdGhlIGNhcmQgYWNjb3VudC4KLy8gT25seSB0aGUgb3duZXIgb2YgdGhlIGNvbnRyYWN0IGNhbiBwZXJmb3JtIHRoaXMgb3BlcmF0aW9uLgovLwovLyBAcGFyYW0gY2FyZCBUaGUgY2FyZCBhY2NvdW50IGZyb20gd2hpY2ggdGhlIGFzc2V0IHdpbGwgYmUgZGViaXRlZC4KLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IG9mIHRoZSBhc3NldCB0byBiZSBkZWJpdGVkLgpjYXJkRGViaXQ6Cglwcm90byA0IDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0ODgKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDkwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0OTEKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDkyCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDkzCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTMgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDk0CgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDk3CgkvLyB0aGlzLkRlYml0LmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkOiBjYXJkLAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglieXRlIDB4NmU0MGE0YzQgLy8gRGViaXQoYWRkcmVzcyx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2FyZFJlZnVuZChzdHJpbmcsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkUmVmdW5kOgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gY2FyZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNhcmRSZWZ1bmQoc3RyaW5nLGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNhcmRSZWZ1bmQKCWludCAxCglyZXR1cm4KCi8vIGNhcmRSZWZ1bmQocGFydG5lcjogc3RyaW5nLCBjYXJkOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCwgYW1vdW50OiB1aW50NjQpOiB2b2lkCi8vCi8vIFJlZnVuZHMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGFuIGFzc2V0IHRvIGEgY2FyZCBhY2NvdW50LgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24uCi8vCi8vIEBwYXJhbSBjYXJkIC0gVGhlIGNhcmQgYWNjb3VudCB0byByZWZ1bmQgdGhlIGFzc2V0IHRvLgovLyBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiB0aGUgYXNzZXQgdG8gcmVmdW5kLgpjYXJkUmVmdW5kOgoJcHJvdG8gNCAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTEyCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUxNAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnBhcnRuZXJzKHBhcnRuZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogY2FyZCwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTE1CgkvLyBzZW5kZXI6IHRoaXMucGFydG5lcnMocGFydG5lcikudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCWFzc2VydAoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTYKCS8vIGFzc2V0UmVjZWl2ZXI6IGNhcmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTcKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTgKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtNCAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MjEKCS8vIHRoaXMuUmVmdW5kLmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkOiBjYXJkLAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglieXRlIDB4ZjRmNTJhZDMgLy8gUmVmdW5kKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCWZyYW1lX2RpZyAtMiAvLyBjYXJkOiBBZGRyZXNzCglmcmFtZV9kaWcgLTMgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHNldHRsZShhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX3NldHRsZToKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHJlY2lwaWVudDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgc2V0dGxlKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNldHRsZQoJaW50IDEKCXJldHVybgoKLy8gc2V0dGxlKHJlY2lwaWVudDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogdm9pZAovLwovLyBTZXR0bGVzIGEgcGF5bWVudCBieSB0cmFuc2ZlcnJpbmcgYW4gYXNzZXQgdG8gdGhlIHNwZWNpZmllZCByZWNpcGllbnQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLgovLwovLyBAcGFyYW0gcmVjaXBpZW50IFRoZSBhZGRyZXNzIG9mIHRoZSByZWNpcGllbnQuCi8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgYXNzZXQgdG8gYmUgdHJhbnNmZXJyZWQuCnNldHRsZToKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUzNgoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MzgKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTM5CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU0MAoJLy8gYXNzZXRSZWNlaXZlcjogcmVjaXBpZW50CglmcmFtZV9kaWcgLTEgLy8gcmVjaXBpZW50OiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NDEKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NDIKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NDUKCS8vIHRoaXMuU2V0dGxlbWVudC5sb2coewoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglieXRlIDB4OGI2NmU1ODkgLy8gU2V0dGxlbWVudCh1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdG9iCglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2FyZEVuYWJsZUFzc2V0KHBheSxzdHJpbmcsYWRkcmVzcyx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NhcmRFbmFibGVBc3NldDoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBjYXJkOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRFbmFibGVBc3NldChwYXksc3RyaW5nLGFkZHJlc3MsdWludDY0KXZvaWQKCWNhbGxzdWIgY2FyZEVuYWJsZUFzc2V0CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRW5hYmxlQXNzZXQobWJyOiBQYXlUeG4sIHBhcnRuZXI6IHN0cmluZywgY2FyZDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgZGVwb3NpdG9yIChvciBvd25lcikgdG8gT3B0SW4gdG8gYW4gYXNzZXQsIGluY3JlYXNpbmcgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBvZiB0aGUgYWNjb3VudAovLwovLyBAcGFyYW0gcGFydG5lciBGdW5kaW5nIENoYW5uZWwgbmFtZQovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIGFkZCBhc3NldCB0bwovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gYWRkCmNhcmRFbmFibGVBc3NldDoKCXByb3RvIDQgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2MAoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkSG9sZGVyKHBhcnRuZXIsIGNhcmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjAKCWZyYW1lX2RpZyAtMyAvLyBjYXJkOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gcGFydG5lcjogc3RyaW5nCgljYWxsc3ViIGlzQ2FyZEhvbGRlcgoJfHwKCipza2lwX29yMDoKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2NgoJLy8gdmVyaWZ5UGF5VHhuKG1iciwgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU3MQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTcyCgkvLyByZWNlaXZlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzMKCS8vIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzYKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZCwKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzcKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTc4CgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkCglmcmFtZV9kaWcgLTMgLy8gY2FyZDogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTc5CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTQgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTgwCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNhcmREaXNhYmxlQXNzZXQoc3RyaW5nLGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRGlzYWJsZUFzc2V0OgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGNhcmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjYXJkRGlzYWJsZUFzc2V0KHN0cmluZyxhZGRyZXNzLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNhcmREaXNhYmxlQXNzZXQKCWludCAxCglyZXR1cm4KCi8vIGNhcmREaXNhYmxlQXNzZXQocGFydG5lcjogc3RyaW5nLCBjYXJkOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBkZXBvc2l0b3IgKG9yIG93bmVyKSB0byBDbG9zZU91dCBvZiBhbiBhc3NldCwgcmVkdWNpbmcgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBvZiB0aGUgYWNjb3VudAovLwovLyBAcGFyYW0gcGFydG5lciAtIFRoZSBmdW5kaW5nIGNoYW5uZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBjYXJkLgovLyBAcGFyYW0gY2FyZCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBjYXJkLgovLyBAcGFyYW0gYXNzZXQgLSBUaGUgSUQgb2YgdGhlIGFzc2V0IHRvIGJlIHJlbW92ZWQuCmNhcmREaXNhYmxlQXNzZXQ6Cglwcm90byAzIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1OTIKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSB8fCB0aGlzLmlzQ2FyZEhvbGRlcihwYXJ0bmVyLCBjYXJkKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3IxCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc0NhcmRIb2xkZXIKCXx8Cgoqc2tpcF9vcjE6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1OTQKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZCwKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhc3NldENsb3NlVG86IGNhcmQsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1OTUKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTk2CgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTk3CgkvLyBhc3NldENsb3NlVG86IGNhcmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0Q2xvc2VUbwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5OAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU5OQoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYwMgoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBjYXJkLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDMKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjA0CgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjA1CgkvLyBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UKCWdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGNhcmRXaXRoZHJhd2FsUmVxdWVzdChzdHJpbmcsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0KKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbFJlcXVlc3Q6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIHJlY2lwaWVudDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGNhcmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjYXJkV2l0aGRyYXdhbFJlcXVlc3Qoc3RyaW5nLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdCgljYWxsc3ViIGNhcmRXaXRoZHJhd2FsUmVxdWVzdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRXaXRoZHJhd2FsUmVxdWVzdChwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFkZHJlc3MsIHJlY2lwaWVudDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogYnl0ZXMzMgovLwovLyBBbGxvd3MgdGhlIENhcmQgSG9sZGVyIChvciBjb250cmFjdCBvd25lcikgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIHBhcnRuZXIgRnVuZGluZyBDaGFubmVsIG5hbWUKLy8gQHBhcmFtIGNhcmQgQWRkcmVzcyB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSBhc3NldCBBc3NldCB0byB3aXRoZHJhdwovLyBAcGFyYW0gYW1vdW50IEFtb3VudCB0byB3aXRoZHJhdwovLyBAcmV0dXJucyBXaXRoZHJhd2FsIGhhc2ggdXNlZCBmb3IgY29tcGxldGluZyBvciBjYW5jZWxsaW5nIHRoZSB3aXRoZHJhd2FsCmNhcmRXaXRoZHJhd2FsUmVxdWVzdDoKCXByb3RvIDUgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MjAKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSB8fCB0aGlzLmlzQ2FyZEhvbGRlcihwYXJ0bmVyLCBjYXJkKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3IyCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc0NhcmRIb2xkZXIKCXx8Cgoqc2tpcF9vcjI6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MjIKCS8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0ID0gewoJLy8gICAgICAgICAgICAgbm9uY2U6IHRoaXMud2l0aGRyYXdhbF9ub25jZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlLAoJLy8gICAgICAgICAgICAgcm91bmQ6IGdsb2JhbHMucm91bmQgKyB0aGlzLndpdGhkcmF3YWxfd2FpdF90aW1lLnZhbHVlLAoJLy8gICAgICAgICAgICAgY2FyZDogY2FyZCwKCS8vICAgICAgICAgICAgIHJlY2lwaWVudDogcmVjaXBpZW50LAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0KCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZSAvLyAibiIKCWFwcF9sb2NhbF9nZXQKCWl0b2IKCWdsb2JhbCBSb3VuZAoJYnl0ZSAweDc3IC8vICJ3IgoJYXBwX2dsb2JhbF9nZXQKCSsKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHJlY2lwaWVudDogQWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgLTQgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC01IC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYzMAoJLy8gdGhpcy53aXRoZHJhd2FsX25vbmNlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSB0aGlzLndpdGhkcmF3YWxfbm9uY2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSArIDEKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZSAvLyAibiIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZSAvLyAibiIKCWFwcF9sb2NhbF9nZXQKCWludCAxCgkrCglhcHBfbG9jYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjMxCgkvLyB3aXRoZHJhd2FsX2hhc2ggPSBzaGEyNTYocmF3Qnl0ZXMod2l0aGRyYXdhbCkpCglmcmFtZV9kaWcgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJc2hhMjU2CglmcmFtZV9idXJ5IDEgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYzMwoJLy8gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUgPSB3aXRoZHJhd2FsCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgMSAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCglmcmFtZV9kaWcgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJYXBwX2xvY2FsX3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYzNQoJLy8gcmV0dXJuIHdpdGhkcmF3YWxfaGFzaDsKCWZyYW1lX2RpZyAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIGNhcmRXaXRoZHJhd2FsQ2FuY2VsKHN0cmluZyxhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbENhbmNlbDoKCS8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBjYXJkOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZFdpdGhkcmF3YWxDYW5jZWwoc3RyaW5nLGFkZHJlc3MsYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBjYXJkV2l0aGRyYXdhbENhbmNlbAoJaW50IDEKCXJldHVybgoKLy8gY2FyZFdpdGhkcmF3YWxDYW5jZWwocGFydG5lcjogc3RyaW5nLCBjYXJkOiBBZGRyZXNzLCB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgQ2FyZCBIb2xkZXIgKG9yIGNvbnRyYWN0IG93bmVyKSB0byBjYW5jZWwgYSB3aXRoZHJhd2FsIHJlcXVlc3QKLy8gQHBhcmFtIHBhcnRuZXIgRnVuZGluZyBDaGFubmVsIG5hbWUKLy8gQHBhcmFtIGNhcmQgQWRkcmVzcyB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSB3aXRoZHJhd2FsX2hhc2ggSGFzaCBvZiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0CmNhcmRXaXRoZHJhd2FsQ2FuY2VsOgoJcHJvdG8gMyAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ1CgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRIb2xkZXIocGFydG5lciwgY2FyZCkpCgljYWxsc3ViIGlzT3duZXIKCWR1cAoJYm56ICpza2lwX29yMwoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWNhbGxzdWIgaXNDYXJkSG9sZGVyCgl8fAoKKnNraXBfb3IzOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjQ3CgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0zIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgovLyBjYXJkV2l0aGRyYXcoc3RyaW5nLGFkZHJlc3MsYnl0ZVszMl0pdm9pZAoqYWJpX3JvdXRlX2NhcmRXaXRoZHJhdzoKCS8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBjYXJkOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZFdpdGhkcmF3KHN0cmluZyxhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZFdpdGhkcmF3CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkV2l0aGRyYXcocGFydG5lcjogc3RyaW5nLCBjYXJkOiBBZGRyZXNzLCB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgQ2FyZCBIb2xkZXIgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIHBhcnRuZXIgRnVuZGluZyBDaGFubmVsIG5hbWUKLy8gQHBhcmFtIGNhcmQgQWRkcmVzcyB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSB3aXRoZHJhd2FsX2hhc2ggSGFzaCBvZiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0Ci8vIEBwYXJhbSBlYXJseV93aXRoZHJhd2FsX3NpZyBTaWduYXR1cmUgb2Ygd2l0aGRyYXdhbF9oYXNoIGZyb20gdGhlIGVhcmx5X3dpdGhkcmF3YWxfcHVia2V5CmNhcmRXaXRoZHJhdzoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NjAKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSB8fCB0aGlzLmlzQ2FyZEhvbGRlcihwYXJ0bmVyLCBjYXJkKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3I0CglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc0NhcmRIb2xkZXIKCXx8Cgoqc2tpcF9vcjQ6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NjIKCS8vIHdpdGhkcmF3YWwgPSB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS52YWx1ZQoJZnJhbWVfZGlnIC0zIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjYyCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NjQKCS8vIGFzc2VydChnbG9iYWxzLnJvdW5kID49IHdpdGhkcmF3YWwucm91bmQgfHwgdGhpcy5pc093bmVyKCkpCglnbG9iYWwgUm91bmQKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vd2l0aGRyYXdhbAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL3dpdGhkcmF3YWwKCWFwcF9sb2NhbF9nZXQKCWV4dHJhY3QgOCA4CglidG9pCgk+PQoJZHVwCglibnogKnNraXBfb3I1CgljYWxsc3ViIGlzT3duZXIKCXx8Cgoqc2tpcF9vcjU6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NjcKCS8vIHRoaXMud2l0aGRyYXdGdW5kcyh3aXRoZHJhd2FsKQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJY2FsbHN1YiB3aXRoZHJhd0Z1bmRzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjcwCgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0zIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgovLyBjYXJkV2l0aGRyYXdFYXJseShzdHJpbmcsYWRkcmVzcyxieXRlWzMyXSxieXRlWzMyXSl2b2lkCiphYmlfcm91dGVfY2FyZFdpdGhkcmF3RWFybHk6CgkvLyBlYXJseV93aXRoZHJhd2FsX3NpZzogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNhcmRXaXRoZHJhd0Vhcmx5KHN0cmluZyxhZGRyZXNzLGJ5dGVbMzJdLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZFdpdGhkcmF3RWFybHkKCWludCAxCglyZXR1cm4KCi8vIGNhcmRXaXRoZHJhd0Vhcmx5KHBhcnRuZXI6IHN0cmluZywgY2FyZDogQWRkcmVzcywgd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyLCBlYXJseV93aXRoZHJhd2FsX3NpZzogYnl0ZXMzMik6IHZvaWQKLy8KLy8gV2l0aGRyYXdzIGZ1bmRzIGJlZm9yZSB0aGUgd2l0aGRyYXdhbCByb3VuZCBoYXMgbGFwc2VkLCBieSB1c2luZyB0aGUgZWFybHkgd2l0aGRyYXdhbCBzaWduYXR1cmUgcHJvdmlkZWQgYnkgSW1tZXJzdmUuCi8vIEBwYXJhbSBwYXJ0bmVyIC0gVGhlIHBhcnRuZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjYXJkLgovLyBAcGFyYW0gY2FyZCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBjYXJkLgovLyBAcGFyYW0gd2l0aGRyYXdhbF9oYXNoIC0gVGhlIGhhc2ggb2YgdGhlIHdpdGhkcmF3YWwuCi8vIEBwYXJhbSBlYXJseV93aXRoZHJhd2FsX3NpZyAtIFRoZSBzaWduYXR1cmUgZm9yIGVhcmx5IHdpdGhkcmF3YWwuCmNhcmRXaXRoZHJhd0Vhcmx5OgoJcHJvdG8gNCAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY4MQoJLy8gYXNzZXJ0KHRoaXMuaXNDYXJkSG9sZGVyKHBhcnRuZXIsIGNhcmQpKQoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWNhbGxzdWIgaXNDYXJkSG9sZGVyCglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2ODMKCS8vIHdpdGhkcmF3YWwgPSB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS52YWx1ZQoJZnJhbWVfZGlnIC0zIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJZnJhbWVfYnVyeSAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjgzCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Njg2CgkvLyBnbG9iYWxzLnJvdW5kIDwgd2l0aGRyYXdhbC5yb3VuZAoJZ2xvYmFsIFJvdW5kCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDggOAoJYnRvaQoJPAoJYnogKmlmMF9lbmQKCi8vICppZjBfY29uc2VxdWVudAoqd2hpbGVfMDoKCip3aGlsZV8wX2NvbnRpbnVlOgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Njg5CgkvLyBnbG9iYWxzLm9wY29kZUJ1ZGdldCA8IDI1MDAKCWdsb2JhbCBPcGNvZGVCdWRnZXQKCWludCAyNTAwCgk8CglieiAqd2hpbGVfMF9lbmQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2OTAKCS8vIGluY3JlYXNlT3Bjb2RlQnVkZ2V0KCkKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCWJ5dGUgYjY0IENvRUIgLy8gI3ByYWdtYSB2ZXJzaW9uIDEwOyBpbnQgMQoJZHVwCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoJaW50IERlbGV0ZUFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgoJaXR4bl9zdWJtaXQKCWIgKndoaWxlXzAKCip3aGlsZV8wX2VuZDoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY5MwoJLy8gYXNzZXJ0KGVkMjU1MTlWZXJpZnlCYXJlKHdpdGhkcmF3YWxfaGFzaCwgZWFybHlfd2l0aGRyYXdhbF9zaWcsIHRoaXMuZWFybHlfd2l0aGRyYXdhbF9wdWJrZXkudmFsdWUpKQoJZnJhbWVfZGlnIC0zIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJZnJhbWVfZGlnIC00IC8vIGVhcmx5X3dpdGhkcmF3YWxfc2lnOiBieXRlczMyCglieXRlIDB4NmIgLy8gImsiCglhcHBfZ2xvYmFsX2dldAoJZWQyNTUxOXZlcmlmeV9iYXJlCglhc3NlcnQKCippZjBfZW5kOgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Njk3CgkvLyB0aGlzLndpdGhkcmF3RnVuZHMod2l0aGRyYXdhbCkKCWZyYW1lX2RpZyAxIC8vIHN0b3JhZ2UgYWNjb3VudC8vd2l0aGRyYXdhbAoJZnJhbWVfZGlnIDAgLy8gc3RvcmFnZSBrZXkvL3dpdGhkcmF3YWwKCWFwcF9sb2NhbF9nZXQKCWNhbGxzdWIgd2l0aGRyYXdGdW5kcwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjcwMAoJLy8gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkuZGVsZXRlKCkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMyAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWFwcF9sb2NhbF9kZWwKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJkZXBsb3koYWRkcmVzcylhZGRyZXNzIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZXBsb3kKCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAib3duZXIoKWFkZHJlc3MiCgltZXRob2QgInRyYW5zZmVyT3duZXJzaGlwKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAic2V0V2l0aGRyYXdhbFJvdW5kcyh1aW50NjQpdm9pZCIKCW1ldGhvZCAic2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgInBhcnRuZXJDcmVhdGUocGF5LHN0cmluZylhZGRyZXNzIgoJbWV0aG9kICJwYXJ0bmVyQ2xvc2Uoc3RyaW5nKXZvaWQiCgltZXRob2QgImNhcmRDcmVhdGUocGF5LHN0cmluZyxhZGRyZXNzKWFkZHJlc3MiCgltZXRob2QgImNhcmRDbG9zZShzdHJpbmcsYWRkcmVzcyxhZGRyZXNzKXZvaWQiCgltZXRob2QgImNhcmRSZWNvdmVyKHN0cmluZyxhZGRyZXNzLGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiYXNzZXRBbGxvd2xpc3RBZGQocGF5LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJhc3NldEFsbG93bGlzdFJlbW92ZSh1aW50NjQpdm9pZCIKCW1ldGhvZCAicGFydG5lckFjY2VwdEFzc2V0KHBheSxzdHJpbmcsdWludDY0KXZvaWQiCgltZXRob2QgInBhcnRuZXJSZWplY3RBc3NldChzdHJpbmcsdWludDY0KXZvaWQiCgltZXRob2QgImNhcmREZWJpdChzdHJpbmcsYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImNhcmRSZWZ1bmQoc3RyaW5nLGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJzZXR0bGUoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImNhcmRFbmFibGVBc3NldChwYXksc3RyaW5nLGFkZHJlc3MsdWludDY0KXZvaWQiCgltZXRob2QgImNhcmREaXNhYmxlQXNzZXQoc3RyaW5nLGFkZHJlc3MsdWludDY0KXZvaWQiCgltZXRob2QgImNhcmRXaXRoZHJhd2FsUmVxdWVzdChzdHJpbmcsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0iCgltZXRob2QgImNhcmRXaXRoZHJhd2FsQ2FuY2VsKHN0cmluZyxhZGRyZXNzLGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgImNhcmRXaXRoZHJhdyhzdHJpbmcsYWRkcmVzcyxieXRlWzMyXSl2b2lkIgoJbWV0aG9kICJjYXJkV2l0aGRyYXdFYXJseShzdHJpbmcsYWRkcmVzcyxieXRlWzMyXSxieXRlWzMyXSl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9vd25lciAqYWJpX3JvdXRlX3RyYW5zZmVyT3duZXJzaGlwICphYmlfcm91dGVfc2V0V2l0aGRyYXdhbFJvdW5kcyAqYWJpX3JvdXRlX3NldEVhcmx5V2l0aGRyYXdhbFB1YmtleSAqYWJpX3JvdXRlX3BhcnRuZXJDcmVhdGUgKmFiaV9yb3V0ZV9wYXJ0bmVyQ2xvc2UgKmFiaV9yb3V0ZV9jYXJkQ3JlYXRlICphYmlfcm91dGVfY2FyZENsb3NlICphYmlfcm91dGVfY2FyZFJlY292ZXIgKmFiaV9yb3V0ZV9hc3NldEFsbG93bGlzdEFkZCAqYWJpX3JvdXRlX2Fzc2V0QWxsb3dsaXN0UmVtb3ZlICphYmlfcm91dGVfcGFydG5lckFjY2VwdEFzc2V0ICphYmlfcm91dGVfcGFydG5lclJlamVjdEFzc2V0ICphYmlfcm91dGVfY2FyZERlYml0ICphYmlfcm91dGVfY2FyZFJlZnVuZCAqYWJpX3JvdXRlX3NldHRsZSAqYWJpX3JvdXRlX2NhcmRFbmFibGVBc3NldCAqYWJpX3JvdXRlX2NhcmREaXNhYmxlQXNzZXQgKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbFJlcXVlc3QgKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbENhbmNlbCAqYWJpX3JvdXRlX2NhcmRXaXRoZHJhdyAqYWJpX3JvdXRlX2NhcmRXaXRoZHJhd0Vhcmx5CgllcnIKCipjYWxsX09wdEluOgoJbWV0aG9kICJjYXJkV2l0aGRyYXdhbFJlcXVlc3Qoc3RyaW5nLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbFJlcXVlc3QKCWVycgoKKmNhbGxfQ2xvc2VPdXQ6CgltZXRob2QgImNhcmRXaXRoZHJhdyhzdHJpbmcsYWRkcmVzcyxieXRlWzMyXSl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jYXJkV2l0aGRyYXcKCWVycgoKKmNhbGxfVXBkYXRlQXBwbGljYXRpb246CgltZXRob2QgInVwZGF0ZSgpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfdXBkYXRlCgllcnIKCipjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJkZXN0cm95KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9kZXN0cm95CgllcnIKCipwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50OgoJcHJvdG8gNCAzCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0xIC8vIGVsZW1lbnQKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3ViCgoqcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJZHVwCglsZW4KCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJYnRvaQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2J1cnkgLTIgLy8gaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy a Partner, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active cards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalRounds",
        "desc": "Set the number of rounds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "rounds",
            "type": "uint64",
            "desc": "New number of rounds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setEarlyWithdrawalPubkey",
        "desc": "Sets the early withdrawal public key.",
        "args": [
          {
            "name": "pubkey",
            "type": "byte[32]",
            "desc": "The public key to set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerCreate",
        "desc": "Creates a partner account and associates it with the provided partner name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "The name of the partner."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner account."
        }
      },
      {
        "name": "partnerClose",
        "args": [
          {
            "name": "partner",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "cardHolder",
            "type": "address",
            "desc": "Address to have control over asset withdrawals"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        }
      },
      {
        "name": "cardClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "cardHolder",
            "type": "address",
            "desc": "Address which has control over asset withdrawals"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "The partner associated with the cards."
          },
          {
            "name": "oldCardHolder",
            "type": "address",
            "desc": "The address of the old card holder."
          },
          {
            "name": "newCardHolder",
            "type": "address",
            "desc": "The address of the new card holder."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerAcceptAsset",
        "desc": "Allows the specified asset to be transferred for users of this partner.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the transaction."
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be allowed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerRejectAsset",
        "desc": "Revokes an asset by closing out its balance and transferring the minimum balance to the sender.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to revoke."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The card account from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "cardRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The card account to refund the asset to."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to refund."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "The address of the recipient."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "cardEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "The funding channel associated with the card."
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        }
      },
      {
        "name": "cardWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdrawEarly",
        "desc": "Withdraws funds before the withdrawal round has lapsed, by using the early withdrawal signature provided by Immersve.",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "The partner associated with the card."
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "The hash of the withdrawal."
          },
          {
            "name": "early_withdrawal_sig",
            "type": "byte[32]",
            "desc": "The signature for early withdrawal."
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "CardCreated",
        "args": [],
        "desc": ""
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          }
        ],
        "desc": "Settlement event"
      },
      {
        "name": "Withdrawal",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source withdrawn from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address withdrawn to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount withdrawn"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal event"
      }
    ]
  }
}