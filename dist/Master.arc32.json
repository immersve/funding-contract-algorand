{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalTimeout(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEarlyWithdrawalPubkey(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundCreate(pay,address,uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRecover(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDebit(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRefund(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextSettlementNonce()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSettlementAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundEnableAsset(pay,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDisableAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardFundWithdrawalCancel(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdraw(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    },
    "cardFundWithdrawEarly(address,byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "wn"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "card_funds_active_count": {
          "type": "uint64",
          "key": "cfac"
        },
        "partner_channels_active_count": {
          "type": "uint64",
          "key": "pcac"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "wwt"
        },
        "early_withdrawal_pubkey": {
          "type": "bytes",
          "key": "ewpk"
        },
        "settlement_nonce": {
          "type": "uint64",
          "key": "sn"
        },
        "settlement_address": {
          "type": "bytes",
          "key": "sa"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg4LjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpjYWxsX0Nsb3NlT3V0ICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKmNhbGxfRGVsZXRlQXBwbGljYXRpb24gKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gb25seU93bmVyKCk6IHZvaWQKLy8KLy8gQXNzZXJ0IHRoZSB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdC4Kb25seU93bmVyOgoJcHJvdG8gMCAwCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo1MwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBpc093bmVyKCk6IGJvb2xlYW4KLy8KLy8gQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIHNlbmRlciBpcyB0aGUgb3duZXIuCi8vIEByZXR1cm5zIGJvb2xlYW4gVHJ1ZSBpZiB0aGUgc2VuZGVyIGlzIHRoZSBvd25lciwgZmFsc2Ugb3RoZXJ3aXNlLgppc093bmVyOgoJcHJvdG8gMCAxCgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo2MQoJLy8gcmV0dXJuIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5fb3duZXIudmFsdWU7Cgl0eG4gU2VuZGVyCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCXJldHN1YgoKLy8gb3duZXIoKWFkZHJlc3MKKmFiaV9yb3V0ZV9vd25lcjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBvd25lcigpYWRkcmVzcwoJY2FsbHN1YiBvd25lcgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIG93bmVyKCk6IEFkZHJlc3MKb3duZXI6Cglwcm90byAwIDEKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjY3CgkvLyByZXR1cm4gdGhpcy5fb3duZXIudmFsdWU7CglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBfdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXI6IEFkZHJlc3MpOiB2b2lkCi8vCi8vIFRyYW5zZmVycyB0aGUgb3duZXJzaGlwIG9mIHRoZSBjb250cmFjdCB0byBhIG5ldyBvd25lci4KLy8gQHBhcmFtIG5ld093bmVyIFRoZSBhZGRyZXNzIG9mIHRoZSBuZXcgb3duZXIuCl90cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo3NgoJLy8gcHJldmlvdXNPd25lciA9IHRoaXMuX293bmVyLmV4aXN0cyA/IHRoaXMuX293bmVyLnZhbHVlIDogZ2xvYmFscy56ZXJvQWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDVmNmY3NzZlNjU3MiAvLyAiX293bmVyIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYnogKnRlcm5hcnkxX2ZhbHNlCglieXRlIDB4NWY2Zjc3NmU2NTcyIC8vICJfb3duZXIiCglhcHBfZ2xvYmFsX2dldAoJYiAqdGVybmFyeTFfZW5kCgoqdGVybmFyeTFfZmFsc2U6CglnbG9iYWwgWmVyb0FkZHJlc3MKCip0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDAgLy8gcHJldmlvdXNPd25lcjogYWRkcmVzcwoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6NzcKCS8vIHRoaXMuX293bmVyLnZhbHVlID0gbmV3T3duZXIKCWJ5dGUgMHg1ZjZmNzc2ZTY1NzIgLy8gIl9vd25lciIKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvcm9sZXMvT3duYWJsZS5hbGdvLnRzOjc5CgkvLyB0aGlzLk93bmVyc2hpcFRyYW5zZmVycmVkLmxvZyh7CgkvLyAgICAgICAgICAgICBwcmV2aW91c093bmVyOiBwcmV2aW91c093bmVyLAoJLy8gICAgICAgICAgICAgbmV3T3duZXI6IG5ld093bmVyLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDlhMjIzZWZiIC8vIE93bmVyc2hpcFRyYW5zZmVycmVkKGFkZHJlc3MsYWRkcmVzcykKCWZyYW1lX2RpZyAwIC8vIHByZXZpb3VzT3duZXI6IGFkZHJlc3MKCWZyYW1lX2RpZyAtMSAvLyBuZXdPd25lcjogQWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV90cmFuc2Zlck93bmVyc2hpcDoKCS8vIG5ld093bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB0cmFuc2Zlck93bmVyc2hpcChhZGRyZXNzKXZvaWQKCWNhbGxzdWIgdHJhbnNmZXJPd25lcnNoaXAKCWludCAxCglyZXR1cm4KCi8vIHRyYW5zZmVyT3duZXJzaGlwKG5ld093bmVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBUcmFuc2ZlcnMgdGhlIG93bmVyc2hpcCBvZiB0aGUgY29udHJhY3QgdG8gYSBuZXcgb3duZXIuCi8vIFJlcXVpcmVzIHRoZSBjYWxsZXIgdG8gYmUgdGhlIGN1cnJlbnQgb3duZXIuCi8vCi8vIEBwYXJhbSBuZXdPd25lciBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IG93bmVyLgp0cmFuc2Zlck93bmVyc2hpcDoKCXByb3RvIDEgMAoKCS8vIHNyYy9yb2xlcy9Pd25hYmxlLmFsZ28udHM6OTMKCS8vIGFzc2VydCh0aGlzLmlzT3duZXIoKSkKCWNhbGxzdWIgaXNPd25lcgoJYXNzZXJ0CgoJLy8gc3JjL3JvbGVzL093bmFibGUuYWxnby50czo5NQoJLy8gdGhpcy5fdHJhbnNmZXJPd25lcnNoaXAobmV3T3duZXIpCglmcmFtZV9kaWcgLTEgLy8gbmV3T3duZXI6IEFkZHJlc3MKCWNhbGxzdWIgX3RyYW5zZmVyT3duZXJzaGlwCglyZXRzdWIKCi8vIGlzQ2FyZEZ1bmRPd25lcihjYXJkRnVuZDogQWRkcmVzcyk6IGJvb2xlYW4KLy8KLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb24gc2VuZGVyIGlzIHRoZSBDYXJkIEZ1bmQgaG9sZGVyL293bmVyCi8vIEBwYXJhbSBjYXJkRnVuZCBDYXJkIEZ1bmQgYWRkcmVzcwovLyBAcmV0dXJucyBUcnVlIGlmIHRoZSBzZW5kZXIgaXMgdGhlIENhcmQgSG9sZGVyIG9mIHRoZSBjYXJkCmlzQ2FyZEZ1bmRPd25lcjoKCXByb3RvIDEgMQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI0MgoJLy8gcmV0dXJuIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUub3duZXIgPT09IHRoaXMudHhuLnNlbmRlcjsKCWludCAzMiAvLyBoZWFkT2Zmc2V0CglpbnQgMzIKCWJ5dGUgMHg2MzY2IC8vICJjZiIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJdHhuIFNlbmRlcgoJPT0KCXJldHN1YgoKLy8gY2FyZEZ1bmRBc3NldE9wdEluKGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKLy8KLy8gT3B0LWluIGEgQ2FyZCBGdW5kIGludG8gYW4gYXNzZXQuIE1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBtdXN0IGJlIG1ldCBwcmlvciB0byBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uCi8vIEBwYXJhbSBjYXJkRnVuZCBDYXJkIEZ1bmQgYWRkcmVzcwovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gb3B0LWluIHRvCmNhcmRGdW5kQXNzZXRPcHRJbjoKCXByb3RvIDIgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI1MgoJLy8gYXNzZXJ0KHRoaXMuYXBwLmFkZHJlc3MuaXNPcHRlZEluVG9Bc3NldChhc3NldCkpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjU0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNTUKCS8vIHNlbmRlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNTYKCS8vIGFzc2V0UmVjZWl2ZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI1NwoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI1OAoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2MQoJLy8gdGhpcy5DYXJkRnVuZEFzc2V0RW5hYmxlZC5sb2coewoJLy8gICAgICAgICAgICAgY2FyZEZ1bmQ6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDI0OGEwNTFlIC8vIENhcmRGdW5kQXNzZXRFbmFibGVkKGFkZHJlc3MsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gY2FyZEZ1bmRBc3NldENsb3NlT3V0KGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCk6IHZvaWQKY2FyZEZ1bmRBc3NldENsb3NlT3V0OgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjY4CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhc3NldENsb3NlVG86IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjY5CgkvLyBzZW5kZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjcwCgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzEKCS8vIGFzc2V0Q2xvc2VUbzogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzIKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzMKCS8vIGFzc2V0QW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNzYKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3NwoJLy8gc2VuZGVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3OAoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3OQoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI4MgoJLy8gdGhpcy5DYXJkRnVuZEFzc2V0RGlzYWJsZWQubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhkMTUzMTY3OCAvLyBDYXJkRnVuZEFzc2V0RGlzYWJsZWQoYWRkcmVzcyx1aW50NjQpCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyB3aXRoZHJhd0Z1bmRzKHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0KTogdm9pZAp3aXRoZHJhd0Z1bmRzOgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjg5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHdpdGhkcmF3YWwuY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogd2l0aGRyYXdhbC5hc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI5MAoJLy8gc2VuZGVyOiB3aXRoZHJhd2FsLmNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMCAzMgoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTEKCS8vIGFzc2V0UmVjZWl2ZXI6IHdpdGhkcmF3YWwucmVjaXBpZW50CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMzIgMzIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI5MgoJLy8geGZlckFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyOTMKCS8vIGFzc2V0QW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDcyIDgKCWJ0b2kKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Mjk3CgkvLyB0aGlzLldpdGhkcmF3YWwubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiB3aXRoZHJhd2FsLmNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgcmVjaXBpZW50OiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIGFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgICAgIG5vbmNlOiB3aXRoZHJhd2FsLm5vbmNlLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweDNiN2IzNjBiIC8vIFdpdGhkcmF3YWwoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAtMSAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCAzMiAzMgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNzIgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgODggOAoJYnRvaQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoJcmV0c3ViCgovLyBkZXBsb3koYWRkcmVzcylhZGRyZXNzCiphYmlfcm91dGVfZGVwbG95OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGVwbG95KGFkZHJlc3MpYWRkcmVzcwoJY2FsbHN1YiBkZXBsb3kKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBkZXBsb3kob3duZXI6IEFkZHJlc3MpOiBBZGRyZXNzCi8vCi8vIERlcGxveSBhIHBhcnRuZXIgY2hhbm5lbCwgc2V0dGluZyB0aGUgb3duZXIgYXMgcHJvdmlkZWQKZGVwbG95OgoJcHJvdG8gMSAxCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzEyCgkvLyB0aGlzLl90cmFuc2Zlck93bmVyc2hpcChvd25lcikKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJY2FsbHN1YiBfdHJhbnNmZXJPd25lcnNoaXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTQKCS8vIHJldHVybiB0aGlzLmFwcC5hZGRyZXNzOwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXJldHN1YgoKLy8gdXBkYXRlKCl2b2lkCiphYmlfcm91dGVfdXBkYXRlOgoJLy8gZXhlY3V0ZSB1cGRhdGUoKXZvaWQKCWNhbGxzdWIgdXBkYXRlCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGUoKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG93bmVyIHRvIHVwZGF0ZSB0aGUgc21hcnQgY29udHJhY3QKdXBkYXRlOgoJcHJvdG8gMCAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzIyCgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoJcmV0c3ViCgovLyBkZXN0cm95KCl2b2lkCiphYmlfcm91dGVfZGVzdHJveToKCS8vIGV4ZWN1dGUgZGVzdHJveSgpdm9pZAoJY2FsbHN1YiBkZXN0cm95CglpbnQgMQoJcmV0dXJuCgovLyBkZXN0cm95KCk6IHZvaWQKLy8KLy8gRGVzdHJveSB0aGUgc21hcnQgY29udHJhY3QsIHNlbmRpbmcgYWxsIEFsZ28gdG8gdGhlIG93bmVyIGFjY291bnQuIFRoaXMgY2FuIG9ubHkgYmUgZG9uZSBpZiB0aGVyZSBhcmUgbm8gYWN0aXZlIGNhcmQgZnVuZHMKZGVzdHJveToKCXByb3RvIDAgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMzMAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMzMKCS8vIGFzc2VydCghdGhpcy5jYXJkX2Z1bmRzX2FjdGl2ZV9jb3VudC52YWx1ZSkKCWJ5dGUgMHg2MzY2NjE2MyAvLyAiY2ZhYyIKCWFwcF9nbG9iYWxfZ2V0CgkhCglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMzUKCS8vIGFzc2VydCghdGhpcy5wYXJ0bmVyX2NoYW5uZWxzX2FjdGl2ZV9jb3VudC52YWx1ZSkKCWJ5dGUgMHg3MDYzNjE2MyAvLyAicGNhYyIKCWFwcF9nbG9iYWxfZ2V0CgkhCglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMzcKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiAwLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy5vd25lcigpLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMzOAoJLy8gcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzM5CgkvLyBhbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM0MAoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy5vd25lcigpCgljYWxsc3ViIG93bmVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIHNldFdpdGhkcmF3YWxUaW1lb3V0KHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfc2V0V2l0aGRyYXdhbFRpbWVvdXQ6CgkvLyBzZWNvbmRzOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHNldFdpdGhkcmF3YWxUaW1lb3V0KHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNldFdpdGhkcmF3YWxUaW1lb3V0CglpbnQgMQoJcmV0dXJuCgovLyBzZXRXaXRoZHJhd2FsVGltZW91dChzZWNvbmRzOiB1aW50NjQpOiB2b2lkCi8vCi8vIFNldCB0aGUgbnVtYmVyIG9mIHNlY29uZHMgYSB3aXRoZHJhd2FsIHJlcXVlc3QgbXVzdCB3YWl0IHVudGlsIGJlaW5nIHdpdGhkcmF3bgovLyBAcGFyYW0gc2Vjb25kcyBOZXcgbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdApzZXRXaXRoZHJhd2FsVGltZW91dDoKCXByb3RvIDEgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM1MAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNTIKCS8vIHRoaXMud2l0aGRyYXdhbF93YWl0X3RpbWUudmFsdWUgPSBzZWNvbmRzCglieXRlIDB4Nzc3Nzc0IC8vICJ3d3QiCglmcmFtZV9kaWcgLTEgLy8gc2Vjb25kczogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXkoYnl0ZVszMl0pdm9pZAoqYWJpX3JvdXRlX3NldEVhcmx5V2l0aGRyYXdhbFB1YmtleToKCS8vIHB1YmtleTogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldEVhcmx5V2l0aGRyYXdhbFB1YmtleShieXRlWzMyXSl2b2lkCgljYWxsc3ViIHNldEVhcmx5V2l0aGRyYXdhbFB1YmtleQoJaW50IDEKCXJldHVybgoKLy8gc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KHB1YmtleTogYnl0ZXMzMik6IHZvaWQKLy8KLy8gU2V0cyB0aGUgZWFybHkgd2l0aGRyYXdhbCBwdWJsaWMga2V5LgovLyBAcGFyYW0gcHVia2V5IC0gVGhlIHB1YmxpYyBrZXkgdG8gc2V0LgpzZXRFYXJseVdpdGhkcmF3YWxQdWJrZXk6Cglwcm90byAxIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozNjAKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzYyCgkvLyB0aGlzLmVhcmx5X3dpdGhkcmF3YWxfcHVia2V5LnZhbHVlID0gcHVia2V5CglieXRlIDB4NjU3NzcwNmIgLy8gImV3cGsiCglmcmFtZV9kaWcgLTEgLy8gcHVia2V5OiBieXRlczMyCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBwYXJ0bmVyQ2hhbm5lbENyZWF0ZShwYXksc3RyaW5nKWFkZHJlc3MKKmFiaV9yb3V0ZV9wYXJ0bmVyQ2hhbm5lbENyZWF0ZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gcGFydG5lckNoYW5uZWxOYW1lOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gbWJyOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgcGFydG5lckNoYW5uZWxDcmVhdGUocGF5LHN0cmluZylhZGRyZXNzCgljYWxsc3ViIHBhcnRuZXJDaGFubmVsQ3JlYXRlCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gcGFydG5lckNoYW5uZWxDcmVhdGUobWJyOiBQYXlUeG4sIHBhcnRuZXJDaGFubmVsTmFtZTogc3RyaW5nKTogQWRkcmVzcwovLwovLyBDcmVhdGVzIGEgcGFydG5lciBjaGFubmVsIGFjY291bnQgYW5kIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgcHJvdmlkZWQgcGFydG5lciBjaGFubmVsIG5hbWUuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLgovLwovLyBAcGFyYW0gbWJyIC0gVGhlIFBheVR4biBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBwYXltZW50IHRyYW5zYWN0aW9uLgovLyBAcGFyYW0gcGFydG5lckNoYW5uZWxOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHBhcnRuZXIgY2hhbm5lbC4KLy8gQHJldHVybnMgVGhlIGFkZHJlc3Mgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgcGFydG5lciBjaGFubmVsIGFjY291bnQuCnBhcnRuZXJDaGFubmVsQ3JlYXRlOgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM3NAoJLy8gYm94Q29zdCA9IDI1MDAgKyA0MDAgKiAoMyArIDMyICsgbGVuKHBhcnRuZXJDaGFubmVsTmFtZSkpCglpbnQgMjUwMAoJaW50IDQwMAoJaW50IDM1CglmcmFtZV9kaWcgLTIgLy8gcGFydG5lckNoYW5uZWxOYW1lOiBzdHJpbmcKCWxlbgoJKwoJKgoJKwoJZnJhbWVfYnVyeSAwIC8vIGJveENvc3Q6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM3NgoJLy8gdmVyaWZ5UGF5VHhuKG1iciwgewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSArIGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UgKyBib3hDb3N0LAoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgTWluQmFsYW5jZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgkrCglmcmFtZV9kaWcgMCAvLyBib3hDb3N0OiB1aW50NjQKCSsKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozODIKCS8vIHBhcnRuZXJDaGFubmVsQWRkciA9IHNlbmRNZXRob2RDYWxsPHR5cGVvZiBDb250cm9sbGVkQWRkcmVzcy5wcm90b3R5cGUubmV3Pih7CgkvLyAgICAgICAgICAgICBvbkNvbXBsZXRpb246IE9uQ29tcGxldGlvbi5EZWxldGVBcHBsaWNhdGlvbiwKCS8vICAgICAgICAgICAgIGFwcHJvdmFsUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuYXBwcm92YWxQcm9ncmFtKCksCgkvLyAgICAgICAgICAgICBjbGVhclN0YXRlUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuY2xlYXJQcm9ncmFtKCksCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJbWV0aG9kICJuZXcoKWFkZHJlc3MiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM4MwoJLy8gb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uRGVsZXRlQXBwbGljYXRpb24KCWludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM4NAoJLy8gYXBwcm92YWxQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5hcHByb3ZhbFByb2dyYW0oKQoJYnl0ZSBiNjQgQ2lBQ0FRQXhHQlNCQmdzeEdRaU5EQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp3Q0FCQlVmZkhXSUFBUlFzQ0pEaWdBQnNTS3lFRElLc2djanNnZ3lEcklnSTdJQnN6SUtpWUFFVmgwdjZqWWFBSTRCLzgwQQoJaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozODUKCS8vIGNsZWFyU3RhdGVQcm9ncmFtOiBDb250cm9sbGVkQWRkcmVzcy5jbGVhclByb2dyYW0oKQoJYnl0ZSBiNjQgQ2c9PQoJaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbQoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJZnJhbWVfYnVyeSAxIC8vIHBhcnRuZXJDaGFubmVsQWRkcjogYWRkcmVzcwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM4OQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHBhcnRuZXJDaGFubmVsQWRkciwKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM5MAoJLy8gcmVjZWl2ZXI6IHBhcnRuZXJDaGFubmVsQWRkcgoJZnJhbWVfZGlnIDEgLy8gcGFydG5lckNoYW5uZWxBZGRyOiBhZGRyZXNzCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzkxCgkvLyBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZQoJZ2xvYmFsIE1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM5NAoJLy8gdGhpcy5wYXJ0bmVyX2NoYW5uZWxzKHBhcnRuZXJDaGFubmVsQWRkcikudmFsdWUgPSBwYXJ0bmVyQ2hhbm5lbE5hbWUKCWJ5dGUgMHg3MDYzIC8vICJwYyIKCWZyYW1lX2RpZyAxIC8vIHBhcnRuZXJDaGFubmVsQWRkcjogYWRkcmVzcwoJY29uY2F0CglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXJDaGFubmVsTmFtZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYm94X3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjM5NwoJLy8gdGhpcy5wYXJ0bmVyX2NoYW5uZWxzX2FjdGl2ZV9jb3VudC52YWx1ZSA9IHRoaXMucGFydG5lcl9jaGFubmVsc19hY3RpdmVfY291bnQudmFsdWUgKyAxCglieXRlIDB4NzA2MzYxNjMgLy8gInBjYWMiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozOTkKCS8vIHRoaXMuUGFydG5lckNoYW5uZWxDcmVhdGVkLmxvZyh7CgkvLyAgICAgICAgICAgICBwYXJ0bmVyQ2hhbm5lbDogcGFydG5lckNoYW5uZWxBZGRyLAoJLy8gICAgICAgICAgICAgcGFydG5lckNoYW5uZWxOYW1lOiBwYXJ0bmVyQ2hhbm5lbE5hbWUsCgkvLyAgICAgICAgIH0pCglieXRlIDB4MmM5MjRkZWUgLy8gUGFydG5lckNoYW5uZWxDcmVhdGVkKGFkZHJlc3Msc3RyaW5nKQoJYnl0ZSAweCAvLyBpbml0aWFsIGhlYWQKCWJ5dGUgMHggLy8gaW5pdGlhbCB0YWlsCglieXRlIDB4MDAyMiAvLyBpbml0aWFsIGhlYWQgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBwYXJ0bmVyQ2hhbm5lbEFkZHI6IGFkZHJlc3MKCWNhbGxzdWIgKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyQ2hhbm5lbE5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgKnByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDA0CgkvLyByZXR1cm4gcGFydG5lckNoYW5uZWxBZGRyOwoJZnJhbWVfZGlnIDEgLy8gcGFydG5lckNoYW5uZWxBZGRyOiBhZGRyZXNzCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMQoJcmV0c3ViCgovLyBwYXJ0bmVyQ2hhbm5lbENsb3NlKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3BhcnRuZXJDaGFubmVsQ2xvc2U6CgkvLyBwYXJ0bmVyQ2hhbm5lbDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgcGFydG5lckNoYW5uZWxDbG9zZShhZGRyZXNzKXZvaWQKCWNhbGxzdWIgcGFydG5lckNoYW5uZWxDbG9zZQoJaW50IDEKCXJldHVybgoKLy8gcGFydG5lckNoYW5uZWxDbG9zZShwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcyk6IHZvaWQKcGFydG5lckNoYW5uZWxDbG9zZToKCXByb3RvIDEgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MDgKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDEwCgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHBhcnRuZXJDaGFubmVsLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHBhcnRuZXJDaGFubmVsLAoJLy8gICAgICAgICAgICAgYW1vdW50OiAwLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQxMQoJLy8gc2VuZGVyOiBwYXJ0bmVyQ2hhbm5lbAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXJDaGFubmVsOiBBZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQxMgoJLy8gcmVjZWl2ZXI6IHBhcnRuZXJDaGFubmVsCglmcmFtZV9kaWcgLTEgLy8gcGFydG5lckNoYW5uZWw6IEFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTMKCS8vIGFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDE0CgkvLyBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MTcKCS8vIHBhcnRuZXJDaGFubmVsU2l6ZSA9IHRoaXMucGFydG5lcl9jaGFubmVscyhwYXJ0bmVyQ2hhbm5lbCkuc2l6ZQoJYnl0ZSAweDcwNjMgLy8gInBjIgoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXJDaGFubmVsOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIHBhcnRuZXJDaGFubmVsU2l6ZTogdWludDY0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDE4CgkvLyBib3hDb3N0ID0gMjUwMCArIDQwMCAqICgzICsgMzIgKyBwYXJ0bmVyQ2hhbm5lbFNpemUpCglpbnQgMjUwMAoJaW50IDQwMAoJaW50IDM1CglmcmFtZV9kaWcgMCAvLyBwYXJ0bmVyQ2hhbm5lbFNpemU6IHVpbnQ2NAoJKwoJKgoJKwoJZnJhbWVfYnVyeSAxIC8vIGJveENvc3Q6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQyMAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGFtb3VudDogYm94Q29zdCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjEKCS8vIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjIKCS8vIGFtb3VudDogYm94Q29zdAoJZnJhbWVfZGlnIDEgLy8gYm94Q29zdDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0MjYKCS8vIHRoaXMucGFydG5lcl9jaGFubmVscyhwYXJ0bmVyQ2hhbm5lbCkuZGVsZXRlKCkKCWJ5dGUgMHg3MDYzIC8vICJwYyIKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcwoJY29uY2F0Cglib3hfZGVsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDI5CgkvLyB0aGlzLnBhcnRuZXJfY2hhbm5lbHNfYWN0aXZlX2NvdW50LnZhbHVlID0gdGhpcy5wYXJ0bmVyX2NoYW5uZWxzX2FjdGl2ZV9jb3VudC52YWx1ZSAtIDEKCWJ5dGUgMHg3MDYzNjE2MyAvLyAicGNhYyIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgktCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkRnVuZENyZWF0ZShwYXksYWRkcmVzcyx1aW50NjQpYWRkcmVzcwoqYWJpX3JvdXRlX2NhcmRGdW5kQ3JlYXRlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gcGFydG5lckNoYW5uZWw6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBtYnI6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkRnVuZENyZWF0ZShwYXksYWRkcmVzcyx1aW50NjQpYWRkcmVzcwoJY2FsbHN1YiBjYXJkRnVuZENyZWF0ZQoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kQ3JlYXRlKG1icjogUGF5VHhuLCBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQpOiBBZGRyZXNzCi8vCi8vIENyZWF0ZSBhY2NvdW50LiBUaGlzIGdlbmVyYXRlcyBhIGJyYW5kIG5ldyBhY2NvdW50IGFuZCBmdW5kcyB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50Ci8vIEBwYXJhbSBtYnIgUGF5bWVudCB0cmFuc2FjdGlvbiBvZiBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQKLy8gQHBhcmFtIHBhcnRuZXJDaGFubmVsIEZ1bmRpbmcgQ2hhbm5lbCBuYW1lCi8vIEBwYXJhbSBhc3NldCBBc3NldCB0byBvcHQtaW4gdG8uIDAgPSBObyBhc3NldCBvcHQtaW4KLy8gQHJldHVybnMgTmV3bHkgZ2VuZXJhdGVkIGFjY291bnQgdXNlZCBieSB0aGVpciBjYXJkCmNhcmRGdW5kQ3JlYXRlOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0MAoJLy8gYXNzZXJ0KHRoaXMucGFydG5lcl9jaGFubmVscyhwYXJ0bmVyQ2hhbm5lbCkuZXhpc3RzKQoJYnl0ZSAweDcwNjMgLy8gInBjIgoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXJDaGFubmVsOiBBZGRyZXNzCgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDQyCgkvLyBjYXJkRnVuZERhdGE6IENhcmRGdW5kRGF0YSA9IHsKCS8vICAgICAgICAgICAgIHBhcnRuZXJDaGFubmVsOiBwYXJ0bmVyQ2hhbm5lbCwKCS8vICAgICAgICAgICAgIG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhZGRyZXNzOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICAgICAgbm9uY2U6IDAsCgkvLyAgICAgICAgIH0KCWZyYW1lX2RpZyAtMiAvLyBwYXJ0bmVyQ2hhbm5lbDogQWRkcmVzcwoJdHhuIFNlbmRlcgoJY29uY2F0CglnbG9iYWwgWmVyb0FkZHJlc3MKCWNvbmNhdAoJYnl0ZSAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIGNhcmRGdW5kRGF0YTogQ2FyZEZ1bmREYXRhCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDQ4CgkvLyBib3hDb3N0ID0gMjUwMCArIDQwMCAqICgzICsgMzIgKyBsZW4oY2FyZEZ1bmREYXRhKSkKCWludCA1ODEwMAoJZnJhbWVfYnVyeSAxIC8vIGJveENvc3Q6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ0OQoJLy8gYXNzZXRNYnIgPSBhc3NldCA/IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UgOiAwCglmcmFtZV9kaWcgLTMgLy8gYXNzZXQ6IEFzc2V0SUQKCWJ6ICp0ZXJuYXJ5M19mYWxzZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgliICp0ZXJuYXJ5M19lbmQKCip0ZXJuYXJ5M19mYWxzZToKCWludCAwCgoqdGVybmFyeTNfZW5kOgoJZnJhbWVfYnVyeSAyIC8vIGFzc2V0TWJyOiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NTEKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UgKyBhc3NldE1iciArIGJveENvc3QsCgkvLyAgICAgICAgICAgICAvLyBhbW91bnQ6IHsKCS8vICAgICAgICAgICAgIC8vICAgICBncmVhdGVyVGhhbkVxdWFsVG86IGdsb2JhbHMubWluQmFsYW5jZSArIGFzc2V0TWJyICsgYm94Q29zdCwKCS8vICAgICAgICAgICAgIC8vIH0sCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBBbW91bnQKCWdsb2JhbCBNaW5CYWxhbmNlCglmcmFtZV9kaWcgMiAvLyBhc3NldE1icjogdWludDY0CgkrCglpbnQgNTgxMDAgLy8gYm94Q29zdDogdWludDY0CgkrCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDYwCgkvLyBjYXJkRnVuZEFkZHIgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQ29udHJvbGxlZEFkZHJlc3MucHJvdG90eXBlLm5ldz4oewoJLy8gICAgICAgICAgICAgb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uRGVsZXRlQXBwbGljYXRpb24sCgkvLyAgICAgICAgICAgICBhcHByb3ZhbFByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmFwcHJvdmFsUHJvZ3JhbSgpLAoJLy8gICAgICAgICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENvbnRyb2xsZWRBZGRyZXNzLmNsZWFyUHJvZ3JhbSgpLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAibmV3KClhZGRyZXNzIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjEKCS8vIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uCglpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjIKCS8vIGFwcHJvdmFsUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuYXBwcm92YWxQcm9ncmFtKCkKCWJ5dGUgYjY0IENpQUNBUUF4R0JTQkJnc3hHUWlOREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKd0NBQkJVZmZIV0lBQVJRc0NKRGlnQUJzU0t5RURJS3NnY2pzZ2d5RHJJZ0k3SUJzeklLaVlBRVZoMHY2allhQUk0Qi84MEEKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDYzCgkvLyBjbGVhclN0YXRlUHJvZ3JhbTogQ29udHJvbGxlZEFkZHJlc3MuY2xlYXJQcm9ncmFtKCkKCWJ5dGUgYjY0IENnPT0KCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWZyYW1lX2J1cnkgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NjcKCS8vIGNhcmRGdW5kRGF0YS5hZGRyZXNzID0gY2FyZEZ1bmRBZGRyCglmcmFtZV9kaWcgMCAvLyBjYXJkRnVuZERhdGE6IENhcmRGdW5kRGF0YQoJaW50IDY0IC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAzIC8vIGNhcmRGdW5kQWRkcjogYWRkcmVzcwoJcmVwbGFjZTMKCWZyYW1lX2J1cnkgMCAvLyBjYXJkRnVuZERhdGE6IENhcmRGdW5kRGF0YQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ3MAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IGNhcmRGdW5kQWRkciwKCS8vICAgICAgICAgICAgIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlICsgYXNzZXRNYnIsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDcxCgkvLyByZWNlaXZlcjogY2FyZEZ1bmRBZGRyCglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0NzIKCS8vIGFtb3VudDogZ2xvYmFscy5taW5CYWxhbmNlICsgYXNzZXRNYnIKCWdsb2JhbCBNaW5CYWxhbmNlCglmcmFtZV9kaWcgMiAvLyBhc3NldE1icjogdWludDY0CgkrCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDc2CgkvLyBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NDc3CgkvLyB0aGlzLmNhcmRGdW5kQXNzZXRPcHRJbihjYXJkRnVuZEFkZHIsIGFzc2V0KQoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCWNhbGxzdWIgY2FyZEZ1bmRBc3NldE9wdEluCgoqaWYwX2VuZDoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ4MQoJLy8gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kQWRkcikudmFsdWUgPSBjYXJkRnVuZERhdGEKCWJ5dGUgMHg2MzY2IC8vICJjZiIKCWZyYW1lX2RpZyAzIC8vIGNhcmRGdW5kQWRkcjogYWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyBjYXJkRnVuZERhdGE6IENhcmRGdW5kRGF0YQoJYm94X3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjQ4NAoJLy8gdGhpcy5jYXJkX2Z1bmRzX2FjdGl2ZV9jb3VudC52YWx1ZSA9IHRoaXMuY2FyZF9mdW5kc19hY3RpdmVfY291bnQudmFsdWUgKyAxCglieXRlIDB4NjM2NjYxNjMgLy8gImNmYWMiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0ODYKCS8vIHRoaXMuQ2FyZEZ1bmRDcmVhdGVkLmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkRnVuZE93bmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBjYXJkRnVuZDogY2FyZEZ1bmRBZGRyLAoJLy8gICAgICAgICAgICAgcGFydG5lckNoYW5uZWw6IHBhcnRuZXJDaGFubmVsLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweGI0ODk1ZTQ3IC8vIENhcmRGdW5kQ3JlYXRlZChhZGRyZXNzLGFkZHJlc3MsYWRkcmVzcykKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAzIC8vIGNhcmRGdW5kQWRkcjogYWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gcGFydG5lckNoYW5uZWw6IEFkZHJlc3MKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo0OTMKCS8vIHJldHVybiBjYXJkRnVuZEFkZHI7CglmcmFtZV9kaWcgMyAvLyBjYXJkRnVuZEFkZHI6IGFkZHJlc3MKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAzCglyZXRzdWIKCi8vIGNhcmRGdW5kQ2xvc2UoYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfY2FyZEZ1bmRDbG9zZToKCS8vIGNhcmRGdW5kOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkRnVuZENsb3NlKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZENsb3NlCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZENsb3NlKGNhcmRGdW5kOiBBZGRyZXNzKTogdm9pZAovLwovLyBDbG9zZSBhY2NvdW50LiBUaGlzIHBlcm1hbmVudGx5IHJlbW92ZXMgdGhlIHJla2V5IGFuZCBkZWxldGVzIHRoZSBhY2NvdW50IGZyb20gdGhlIGxlZGdlcgovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIGNsb3NlCmNhcmRGdW5kQ2xvc2U6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTAxCgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjAKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjA6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MDMKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IDAsCgkvLyAgICAgICAgICAgICBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTA0CgkvLyBzZW5kZXI6IGNhcmRGdW5kCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTA1CgkvLyByZWNlaXZlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUwNgoJLy8gYW1vdW50OiAwCglpbnQgMAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MDcKCS8vIGNsb3NlUmVtYWluZGVyVG86IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUxMAoJLy8gY2FyZEZ1bmRTaXplID0gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS5zaXplCglieXRlIDB4NjM2NiAvLyAiY2YiCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNvbmNhdAoJYm94X2xlbgoJYXNzZXJ0CglmcmFtZV9idXJ5IDAgLy8gY2FyZEZ1bmRTaXplOiB1aW50NjQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTEKCS8vIGJveENvc3QgPSAyNTAwICsgNDAwICogKDEgKyBjYXJkRnVuZFNpemUgKyAzMikKCWludCAyNTAwCglpbnQgNDAwCglpbnQgMQoJZnJhbWVfZGlnIDAgLy8gY2FyZEZ1bmRTaXplOiB1aW50NjQKCSsKCWludCAzMgoJKwoJKgoJKwoJZnJhbWVfYnVyeSAxIC8vIGJveENvc3Q6IHVpbnQ2NAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUxMwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGFtb3VudDogYm94Q29zdCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTQKCS8vIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTUKCS8vIGFtb3VudDogYm94Q29zdAoJZnJhbWVfZGlnIDEgLy8gYm94Q29zdDogdWludDY0CglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MTkKCS8vIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkuZGVsZXRlKCkKCWJ5dGUgMHg2MzY2IC8vICJjZiIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY29uY2F0Cglib3hfZGVsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTIyCgkvLyB0aGlzLmNhcmRfZnVuZHNfYWN0aXZlX2NvdW50LnZhbHVlID0gdGhpcy5jYXJkX2Z1bmRzX2FjdGl2ZV9jb3VudC52YWx1ZSAtIDEKCWJ5dGUgMHg2MzY2NjE2MyAvLyAiY2ZhYyIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgktCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkRnVuZFJlY292ZXIoYWRkcmVzcyxhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZFJlY292ZXI6CgkvLyBuZXdDYXJkRnVuZEhvbGRlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGNhcmRGdW5kOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkRnVuZFJlY292ZXIoYWRkcmVzcyxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRSZWNvdmVyCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZFJlY292ZXIoY2FyZEZ1bmQ6IEFkZHJlc3MsIG5ld0NhcmRGdW5kSG9sZGVyOiBBZGRyZXNzKTogdm9pZAovLwovLyBSZWNvdmVycyBmdW5kcyBmcm9tIGFuIG9sZCBjYXJkIGFuZCB0cmFuc2ZlcnMgdGhlbSB0byBhIG5ldyBjYXJkLgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24uCi8vCi8vIEBwYXJhbSBjYXJkRnVuZCAtIFRoZSBjYXJkIGZ1bmQgdG8gcmVjb3Zlci4KLy8gQHBhcmFtIG5ld0NhcmRIb2xkZXIgLSBUaGUgYWRkcmVzcyBvZiB0aGUgbmV3IGNhcmQgaG9sZGVyLgpjYXJkRnVuZFJlY292ZXI6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjUzMwoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MzYKCS8vIG9sZENhcmRGdW5kSG9sZGVyID0gdGhpcy5jYXJkX2Z1bmRzKGNhcmRGdW5kKS52YWx1ZS5vd25lcgoJaW50IDMyIC8vIGhlYWRPZmZzZXQKCWludCAzMgoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglmcmFtZV9idXJ5IDAgLy8gb2xkQ2FyZEZ1bmRIb2xkZXI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1MzcKCS8vIHRoaXMuY2FyZF9mdW5kcyhjYXJkRnVuZCkudmFsdWUub3duZXIgPSBuZXdDYXJkRnVuZEhvbGRlcgoJaW50IDMyIC8vIGhlYWRPZmZzZXQKCWZyYW1lX2RpZyAtMiAvLyBuZXdDYXJkRnVuZEhvbGRlcjogQWRkcmVzcwoJYnl0ZSAweDYzNjYgLy8gImNmIgoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljb25jYXQKCWNvdmVyIDIKCWJveF9yZXBsYWNlCglyZXRzdWIKCi8vIGFzc2V0QWxsb3dsaXN0QWRkKHBheSx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2Fzc2V0QWxsb3dsaXN0QWRkOgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIG1icjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGFzc2V0QWxsb3dsaXN0QWRkKHBheSx1aW50NjQpdm9pZAoJY2FsbHN1YiBhc3NldEFsbG93bGlzdEFkZAoJaW50IDEKCXJldHVybgoKLy8gYXNzZXRBbGxvd2xpc3RBZGQobWJyOiBQYXlUeG4sIGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG1hc3RlciBjb250cmFjdCB0byBmbGFnIGludGVudCBvZiBhY2NlcHRpbmcgYW4gYXNzZXQuCi8vIFRoaXMgY2FuIGJlIGNvbnNpZGVyZWQgdGhlIHdoaXRlbGlzdHMgd2hpdGVsaXN0LgovLwovLyBAcGFyYW0gbWJyIC0gUGF5bWVudCB0cmFuc2FjdGlvbiBvZiBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQKLy8gQHBhcmFtIGFzc2V0IC0gVGhlIEFzc2V0SUQgb2YgdGhlIGFzc2V0IGJlaW5nIHRyYW5zZmVycmVkLgphc3NldEFsbG93bGlzdEFkZDoKCXByb3RvIDIgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU1MAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NTIKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICAgICAgLy8gYW1vdW50OiB7CgkvLyAgICAgICAgICAgICAvLyAgICAgZ3JlYXRlclRoYW5FcXVhbFRvOiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICAgICAgLy8gfSwKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTYwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTYxCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2MgoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2MwoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU2NAoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBhc3NldEFsbG93bGlzdFJlbW92ZSh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2Fzc2V0QWxsb3dsaXN0UmVtb3ZlOgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYXNzZXRBbGxvd2xpc3RSZW1vdmUodWludDY0KXZvaWQKCWNhbGxzdWIgYXNzZXRBbGxvd2xpc3RSZW1vdmUKCWludCAxCglyZXR1cm4KCi8vIGFzc2V0QWxsb3dsaXN0UmVtb3ZlKGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG1hc3RlciBjb250cmFjdCB0byByZWplY3QgYWNjZXB0aW5nIGFuIGFzc2V0LgovLwovLyBAcGFyYW0gYXNzZXQgLSBUaGUgQXNzZXRJRCBvZiB0aGUgYXNzZXQgYmVpbmcgdHJhbnNmZXJyZWQuCmFzc2V0QWxsb3dsaXN0UmVtb3ZlOgoJcHJvdG8gMSAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTc0CgkvLyB0aGlzLm9ubHlPd25lcigpCgljYWxsc3ViIG9ubHlPd25lcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU3NwoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHhmZXJBc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU3OAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1NzkKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1ODAKCS8vIGFzc2V0Q2xvc2VUbzogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRDbG9zZVRvCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTgxCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTgyCgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NTg1CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU4NgoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjU4NwoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBjYXJkRnVuZERlYml0KGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY2FyZEZ1bmREZWJpdDoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGNhcmRGdW5kOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkRnVuZERlYml0KGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNhcmRGdW5kRGViaXQKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kRGViaXQoY2FyZEZ1bmQ6IEFkZHJlc3MsIGFzc2V0OiBBc3NldElELCBhbW91bnQ6IHVpbnQ2NCk6IHZvaWQKLy8KLy8gRGViaXRzIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHRoZSBnaXZlbiBhc3NldCBmcm9tIHRoZSBjYXJkIGFjY291bnQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4KLy8KLy8gQHBhcmFtIGNhcmRGdW5kIFRoZSBjYXJkIGZ1bmQgZnJvbSB3aGljaCB0aGUgYXNzZXQgd2lsbCBiZSBkZWJpdGVkLgovLyBAcGFyYW0gYXNzZXQgVGhlIGFzc2V0IHRvIGJlIGRlYml0ZWQuCi8vIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCBvZiB0aGUgYXNzZXQgdG8gYmUgZGViaXRlZC4KY2FyZEZ1bmREZWJpdDoKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYwMAoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDIKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDMKCS8vIHNlbmRlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDQKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDUKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDYKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MDkKCS8vIHRoaXMuRGViaXQubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmQ6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglieXRlIDB4NmU0MGE0YzQgLy8gRGViaXQoYWRkcmVzcyx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGNhcmRGdW5kUmVmdW5kKGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfY2FyZEZ1bmRSZWZ1bmQ6CgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRSZWZ1bmQoYWRkcmVzcyx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRSZWZ1bmQKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kUmVmdW5kKGNhcmRGdW5kOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCwgYW1vdW50OiB1aW50NjQpOiB2b2lkCi8vCi8vIFJlZnVuZHMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGFuIGFzc2V0IHRvIGEgY2FyZCBhY2NvdW50LgovLyBPbmx5IHRoZSBvd25lciBvZiB0aGUgY29udHJhY3QgY2FuIHBlcmZvcm0gdGhpcyBvcGVyYXRpb24uCi8vCi8vIEBwYXJhbSBjYXJkIC0gVGhlIGNhcmQgYWNjb3VudCB0byByZWZ1bmQgdGhlIGFzc2V0IHRvLgovLyBAcGFyYW0gYXNzZXQgLSBUaGUgYXNzZXQgdG8gcmVmdW5kLgovLyBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiB0aGUgYXNzZXQgdG8gcmVmdW5kLgpjYXJkRnVuZFJlZnVuZDoKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjYyNQoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MjcKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IGNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MjgKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjI5CgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkRnVuZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MzAKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MzEKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2MzQKCS8vIHRoaXMuUmVmdW5kLmxvZyh7CgkvLyAgICAgICAgICAgICBjYXJkOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9KQoJYnl0ZSAweGY0ZjUyYWQzIC8vIFJlZnVuZChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cglsb2cKCXJldHN1YgoKLy8gZ2V0TmV4dFNldHRsZW1lbnROb25jZSgpdWludDY0CiphYmlfcm91dGVfZ2V0TmV4dFNldHRsZW1lbnROb25jZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBnZXROZXh0U2V0dGxlbWVudE5vbmNlKCl1aW50NjQKCWNhbGxzdWIgZ2V0TmV4dFNldHRsZW1lbnROb25jZQoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGdldE5leHRTZXR0bGVtZW50Tm9uY2UoKTogdWludDY0CmdldE5leHRTZXR0bGVtZW50Tm9uY2U6Cglwcm90byAwIDEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NDMKCS8vIHJldHVybiB0aGlzLnNldHRsZW1lbnRfbm9uY2UudmFsdWU7CglieXRlIDB4NzM2ZSAvLyAic24iCglhcHBfZ2xvYmFsX2dldAoJcmV0c3ViCgovLyBzZXRTZXR0bGVtZW50QWRkcmVzcyhhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9zZXRTZXR0bGVtZW50QWRkcmVzczoKCS8vIG5ld1NldHRsZW1lbnRBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRTZXR0bGVtZW50QWRkcmVzcyhhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2V0U2V0dGxlbWVudEFkZHJlc3MKCWludCAxCglyZXR1cm4KCi8vIHNldFNldHRsZW1lbnRBZGRyZXNzKG5ld1NldHRsZW1lbnRBZGRyZXNzOiBBZGRyZXNzKTogdm9pZAovLwovLyBTZXRzIHRoZSBzZXR0bGVtZW50IGFkZHJlc3MgdG8gYSBuZXcgdmFsdWUuCi8vCi8vIEBwYXJhbSBuZXdTZXR0bGVtZW50QWRkcmVzcyAtIFRoZSBuZXcgc2V0dGxlbWVudCBhZGRyZXNzIHRvIHNldC4Kc2V0U2V0dGxlbWVudEFkZHJlc3M6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY1MgoJLy8gdGhpcy5vbmx5T3duZXIoKQoJY2FsbHN1YiBvbmx5T3duZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NTQKCS8vIG9sZFNldHRsZW1lbnRBZGRyZXNzID0gdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MuZXhpc3RzCgkvLyAgICAgICAgICAgICA/IHRoaXMuc2V0dGxlbWVudF9hZGRyZXNzLnZhbHVlCgkvLyAgICAgICAgICAgICA6IGdsb2JhbHMuemVyb0FkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3MzYxIC8vICJzYSIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCWJ6ICp0ZXJuYXJ5NV9mYWxzZQoJYnl0ZSAweDczNjEgLy8gInNhIgoJYXBwX2dsb2JhbF9nZXQKCWIgKnRlcm5hcnk1X2VuZAoKKnRlcm5hcnk1X2ZhbHNlOgoJZ2xvYmFsIFplcm9BZGRyZXNzCgoqdGVybmFyeTVfZW5kOgoJZnJhbWVfYnVyeSAwIC8vIG9sZFNldHRsZW1lbnRBZGRyZXNzOiBhZGRyZXNzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjU3CgkvLyB0aGlzLnNldHRsZW1lbnRfYWRkcmVzcy52YWx1ZSA9IG5ld1NldHRsZW1lbnRBZGRyZXNzCglieXRlIDB4NzM2MSAvLyAic2EiCglmcmFtZV9kaWcgLTEgLy8gbmV3U2V0dGxlbWVudEFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjU5CgkvLyB0aGlzLlNldHRsZW1lbnRBZGRyZXNzQ2hhbmdlZC5sb2coewoJLy8gICAgICAgICAgICAgb2xkU2V0dGxlbWVudEFkZHJlc3M6IG9sZFNldHRsZW1lbnRBZGRyZXNzLAoJLy8gICAgICAgICAgICAgbmV3U2V0dGxlbWVudEFkZHJlc3M6IG5ld1NldHRsZW1lbnRBZGRyZXNzLAoJLy8gICAgICAgICB9KQoJYnl0ZSAweGZkNTM1MzU4IC8vIFNldHRsZW1lbnRBZGRyZXNzQ2hhbmdlZChhZGRyZXNzLGFkZHJlc3MpCglmcmFtZV9kaWcgMCAvLyBvbGRTZXR0bGVtZW50QWRkcmVzczogYWRkcmVzcwoJZnJhbWVfZGlnIC0xIC8vIG5ld1NldHRsZW1lbnRBZGRyZXNzOiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIHNldHRsZSh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfc2V0dGxlOgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFtb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2V0dGxlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0dGxlCglpbnQgMQoJcmV0dXJuCgovLyBzZXR0bGUoYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0LCBub25jZTogdWludDY0KTogdm9pZAovLwovLyBTZXR0bGVzIGEgcGF5bWVudCBieSB0cmFuc2ZlcnJpbmcgYW4gYXNzZXQgdG8gdGhlIHNwZWNpZmllZCByZWNpcGllbnQuCi8vIE9ubHkgdGhlIG93bmVyIG9mIHRoZSBjb250cmFjdCBjYW4gY2FsbCB0aGlzIGZ1bmN0aW9uLgovLwovLyBAcGFyYW0gYXNzZXQgVGhlIGFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgovLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGFzc2V0IHRvIGJlIHRyYW5zZmVycmVkLgovLyBAcGFyYW0gbm9uY2UgVGhlIG5vbmNlIHRvIHByZXZlbnQgZHVwbGljYXRlIHNldHRsZW1lbnRzLgpzZXR0bGU6Cglwcm90byAzIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NzQKCS8vIHRoaXMub25seU93bmVyKCkKCWNhbGxzdWIgb25seU93bmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Njc3CgkvLyBhc3NlcnQodGhpcy5zZXR0bGVtZW50X25vbmNlLnZhbHVlID09PSBub25jZSkKCWJ5dGUgMHg3MzZlIC8vICJzbiIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY3OQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MudmFsdWUsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY4MAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2ODEKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuc2V0dGxlbWVudF9hZGRyZXNzLnZhbHVlCglieXRlIDB4NzM2MSAvLyAic2EiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjgyCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NjgzCgkvLyBhc3NldEFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Njg2CgkvLyB0aGlzLlNldHRsZW1lbnQubG9nKHsKCS8vICAgICAgICAgICAgIHJlY2lwaWVudDogdGhpcy5zZXR0bGVtZW50X2FkZHJlc3MudmFsdWUsCgkvLyAgICAgICAgICAgICBhc3NldDogYXNzZXQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKCS8vICAgICAgICAgICAgIG5vbmNlOiBub25jZSwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHg1NTgwNDZlYyAvLyBTZXR0bGVtZW50KGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQpCglieXRlIDB4NzM2MSAvLyAic2EiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjY5NAoJLy8gdGhpcy5zZXR0bGVtZW50X25vbmNlLnZhbHVlID0gdGhpcy5zZXR0bGVtZW50X25vbmNlLnZhbHVlICsgMQoJYnl0ZSAweDczNmUgLy8gInNuIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCSsKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNhcmRGdW5kRW5hYmxlQXNzZXQocGF5LGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZEVuYWJsZUFzc2V0OgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGNhcmRGdW5kOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gbWJyOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRFbmFibGVBc3NldChwYXksYWRkcmVzcyx1aW50NjQpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZEVuYWJsZUFzc2V0CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZEVuYWJsZUFzc2V0KG1icjogUGF5VHhuLCBjYXJkRnVuZDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgZGVwb3NpdG9yIChvciBvd25lcikgdG8gT3B0SW4gdG8gYW4gYXNzZXQsIGluY3JlYXNpbmcgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBvZiB0aGUgYWNjb3VudAovLwovLyBAcGFyYW0gY2FyZEZ1bmQgQWRkcmVzcyB0byBhZGQgYXNzZXQgdG8KLy8gQHBhcmFtIGFzc2V0IEFzc2V0IHRvIGFkZApjYXJkRnVuZEVuYWJsZUFzc2V0OgoJcHJvdG8gMyAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzA1CgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjEKCWZyYW1lX2RpZyAtMiAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjE6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MDcKCS8vIHZlcmlmeVBheVR4bihtYnIsIHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICAgICAgLy8gYW1vdW50OiB7CgkvLyAgICAgICAgICAgICAvLyAgICAgZ3JlYXRlclRoYW5FcXVhbFRvOiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICAgICAgLy8gfSwKCS8vICAgICAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzE1CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogY2FyZEZ1bmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzE2CgkvLyByZWNlaXZlcjogY2FyZEZ1bmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkRnVuZDogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjcxNwoJLy8gYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlCglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjcyMAoJLy8gdGhpcy5jYXJkRnVuZEFzc2V0T3B0SW4oY2FyZEZ1bmQsIGFzc2V0KQoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldElECglmcmFtZV9kaWcgLTIgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgY2FyZEZ1bmRBc3NldE9wdEluCglyZXRzdWIKCi8vIGNhcmRGdW5kRGlzYWJsZUFzc2V0KGFkZHJlc3MsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZERpc2FibGVBc3NldDoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmREaXNhYmxlQXNzZXQoYWRkcmVzcyx1aW50NjQpdm9pZAoJY2FsbHN1YiBjYXJkRnVuZERpc2FibGVBc3NldAoJaW50IDEKCXJldHVybgoKLy8gY2FyZEZ1bmREaXNhYmxlQXNzZXQoY2FyZEZ1bmQ6IEFkZHJlc3MsIGFzc2V0OiBBc3NldElEKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIGRlcG9zaXRvciAob3Igb3duZXIpIHRvIENsb3NlT3V0IG9mIGFuIGFzc2V0LCByZWR1Y2luZyB0aGUgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50IG9mIHRoZSBhY2NvdW50Ci8vCi8vIEBwYXJhbSBjYXJkRnVuZCAtIFRoZSBhZGRyZXNzIG9mIHRoZSBjYXJkLgovLyBAcGFyYW0gYXNzZXQgLSBUaGUgSUQgb2YgdGhlIGFzc2V0IHRvIGJlIHJlbW92ZWQuCmNhcmRGdW5kRGlzYWJsZUFzc2V0OgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzMwCgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjIKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjI6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3MzIKCS8vIHRoaXMuY2FyZEZ1bmRBc3NldENsb3NlT3V0KGNhcmRGdW5kLCBhc3NldCkKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljYWxsc3ViIGNhcmRGdW5kQXNzZXRDbG9zZU91dAoJcmV0c3ViCgovLyBjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdCiphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhd2FsUmVxdWVzdDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gcmVjaXBpZW50OiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QoYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCx1aW50NjQpYnl0ZVszMl0KCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhd2FsUmVxdWVzdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QoY2FyZEZ1bmQ6IEFkZHJlc3MsIHJlY2lwaWVudDogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogYnl0ZXMzMgovLwovLyBBbGxvd3MgdGhlIENhcmQgSG9sZGVyIChvciBjb250cmFjdCBvd25lcikgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIGNhcmRGdW5kIEFkZHJlc3MgdG8gd2l0aGRyYXcgZnJvbQovLyBAcGFyYW0gYXNzZXQgQXNzZXQgdG8gd2l0aGRyYXcKLy8gQHBhcmFtIGFtb3VudCBBbW91bnQgdG8gd2l0aGRyYXcKLy8gQHJldHVybnMgV2l0aGRyYXdhbCBoYXNoIHVzZWQgZm9yIGNvbXBsZXRpbmcgb3IgY2FuY2VsbGluZyB0aGUgd2l0aGRyYXdhbApjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0OgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc0NQoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkRnVuZE93bmVyKGNhcmRGdW5kKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3IzCglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgaXNDYXJkRnVuZE93bmVyCgl8fAoKKnNraXBfb3IzOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzQ3CgkvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdCA9IHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiBjYXJkRnVuZCwKCS8vICAgICAgICAgICAgIHJlY2lwaWVudDogcmVjaXBpZW50LAoJLy8gICAgICAgICAgICAgYXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgICAgICB0aW1lc3RhbXA6IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wICsgdGhpcy53aXRoZHJhd2FsX3dhaXRfdGltZS52YWx1ZSwKCS8vICAgICAgICAgICAgIG5vbmNlOiB0aGlzLndpdGhkcmF3YWxfbm9uY2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSwKCS8vICAgICAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gcmVjaXBpZW50OiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJYnl0ZSAweDc3Nzc3NCAvLyAid3d0IgoJYXBwX2dsb2JhbF9nZXQKCSsKCWl0b2IKCWNvbmNhdAoJdHhuIFNlbmRlcgoJYnl0ZSAweDc3NmUgLy8gInduIgoJYXBwX2xvY2FsX2dldAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3NTUKCS8vIHRoaXMud2l0aGRyYXdhbF9ub25jZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gdGhpcy53aXRoZHJhd2FsX25vbmNlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgKyAxCgl0eG4gU2VuZGVyCglieXRlIDB4Nzc2ZSAvLyAid24iCgl0eG4gU2VuZGVyCglieXRlIDB4Nzc2ZSAvLyAid24iCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJKwoJYXBwX2xvY2FsX3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc1NgoJLy8gd2l0aGRyYXdhbF9oYXNoID0gc2hhMjU2KHJhd0J5dGVzKHdpdGhkcmF3YWwpKQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCXNoYTI1NgoJZnJhbWVfYnVyeSAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3NTgKCS8vIHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlID0gd2l0aGRyYXdhbAoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIDEgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWFwcF9sb2NhbF9wdXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3NjAKCS8vIHRoaXMuV2l0aGRyYXdhbFJlcXVlc3QubG9nKHsKCS8vICAgICAgICAgICAgIGNhcmRGdW5kOiB3aXRoZHJhd2FsLmNhcmRGdW5kLAoJLy8gICAgICAgICAgICAgcmVjaXBpZW50OiB3aXRoZHJhd2FsLnJlY2lwaWVudCwKCS8vICAgICAgICAgICAgIGFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0LAoJLy8gICAgICAgICAgICAgYW1vdW50OiB3aXRoZHJhd2FsLmFtb3VudCwKCS8vICAgICAgICAgICAgIHRpbWVzdGFtcDogd2l0aGRyYXdhbC50aW1lc3RhbXAsCgkvLyAgICAgICAgICAgICBub25jZTogd2l0aGRyYXdhbC5ub25jZSwKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhkODVmNjIwYSAvLyBXaXRoZHJhd2FsUmVxdWVzdChhZGRyZXNzLGFkZHJlc3MsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMCAzMgoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgMzIgMzIKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgNjQgOAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJZXh0cmFjdCA3MiA4CglidG9pCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglleHRyYWN0IDgwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gd2l0aGRyYXdhbDogV2l0aGRyYXdhbFJlcXVlc3QKCWV4dHJhY3QgODggOAoJYnRvaQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc2OQoJLy8gcmV0dXJuIHdpdGhkcmF3YWxfaGFzaDsKCWZyYW1lX2RpZyAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAxCglyZXRzdWIKCi8vIGNhcmRGdW5kV2l0aGRyYXdhbENhbmNlbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWw6CgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXdhbENhbmNlbChhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhd2FsQ2FuY2VsCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwoY2FyZEZ1bmQ6IEFkZHJlc3MsIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBDYXJkIEhvbGRlciAob3IgY29udHJhY3Qgb3duZXIpIHRvIGNhbmNlbCBhIHdpdGhkcmF3YWwgcmVxdWVzdAovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIHdpdGhkcmF3IGZyb20KLy8gQHBhcmFtIHdpdGhkcmF3YWxfaGFzaCBIYXNoIG9mIHRoZSB3aXRoZHJhd2FsIHJlcXVlc3QKY2FyZEZ1bmRXaXRoZHJhd2FsQ2FuY2VsOgoJcHJvdG8gMiAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Nzc4CgkvLyBhc3NlcnQodGhpcy5pc093bmVyKCkgfHwgdGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJY2FsbHN1YiBpc093bmVyCglkdXAKCWJueiAqc2tpcF9vcjQKCWZyYW1lX2RpZyAtMSAvLyBjYXJkRnVuZDogQWRkcmVzcwoJY2FsbHN1YiBpc0NhcmRGdW5kT3duZXIKCXx8Cgoqc2tpcF9vcjQ6Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo3ODAKCS8vIHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLmRlbGV0ZSgpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyCglhcHBfbG9jYWxfZGVsCglyZXRzdWIKCi8vIGNhcmRGdW5kV2l0aGRyYXcoYWRkcmVzcyxieXRlWzMyXSl2b2lkCiphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhdzoKCS8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBjYXJkRnVuZDogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY2FyZEZ1bmRXaXRoZHJhdyhhZGRyZXNzLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhdwoJaW50IDEKCXJldHVybgoKLy8gY2FyZEZ1bmRXaXRoZHJhdyhjYXJkRnVuZDogQWRkcmVzcywgd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIENhcmQgSG9sZGVyIHRvIHNlbmQgYW4gYW1vdW50IG9mIGFzc2V0cyBmcm9tIHRoZSBhY2NvdW50Ci8vIEBwYXJhbSBjYXJkIEFkZHJlc3MgdG8gd2l0aGRyYXcgZnJvbQovLyBAcGFyYW0gd2l0aGRyYXdhbF9oYXNoIEhhc2ggb2YgdGhlIHdpdGhkcmF3YWwgcmVxdWVzdApjYXJkRnVuZFdpdGhkcmF3OgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5MQoJLy8gYXNzZXJ0KHRoaXMuaXNPd25lcigpIHx8IHRoaXMuaXNDYXJkRnVuZE93bmVyKGNhcmRGdW5kKSkKCWNhbGxzdWIgaXNPd25lcgoJZHVwCglibnogKnNraXBfb3I1CglmcmFtZV9kaWcgLTEgLy8gY2FyZEZ1bmQ6IEFkZHJlc3MKCWNhbGxzdWIgaXNDYXJkRnVuZE93bmVyCgl8fAoKKnNraXBfb3I1OgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzkzCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCWZyYW1lX2RpZyAtMiAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5MwoJLy8gd2l0aGRyYXdhbCA9IHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6Nzk1CgkvLyBhc3NlcnQoZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgPj0gd2l0aGRyYXdhbC50aW1lc3RhbXAgfHwgdGhpcy5pc093bmVyKCkpCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDgwIDgKCWJ0b2kKCT49CglkdXAKCWJueiAqc2tpcF9vcjYKCWNhbGxzdWIgaXNPd25lcgoJfHwKCipza2lwX29yNjoKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjc5OAoJLy8gdGhpcy53aXRoZHJhd0Z1bmRzKHdpdGhkcmF3YWwpCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCglhcHBfbG9jYWxfZ2V0CgljYWxsc3ViIHdpdGhkcmF3RnVuZHMKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4MDEKCS8vIHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLmRlbGV0ZSgpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyCglhcHBfbG9jYWxfZGVsCglyZXRzdWIKCi8vIGNhcmRGdW5kV2l0aGRyYXdFYXJseShhZGRyZXNzLGJ5dGVbMzJdLGJ5dGVbMzJdKXZvaWQKKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3RWFybHk6CgkvLyBlYXJseV93aXRoZHJhd2FsX3NpZzogYnl0ZVszMl0KCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZEZ1bmQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNhcmRGdW5kV2l0aGRyYXdFYXJseShhZGRyZXNzLGJ5dGVbMzJdLGJ5dGVbMzJdKXZvaWQKCWNhbGxzdWIgY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkRnVuZFdpdGhkcmF3RWFybHkoY2FyZEZ1bmQ6IEFkZHJlc3MsIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMiwgZWFybHlfd2l0aGRyYXdhbF9zaWc6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIFdpdGhkcmF3cyBmdW5kcyBiZWZvcmUgdGhlIHdpdGhkcmF3YWwgdGltZXN0YW1wIGhhcyBsYXBzZWQsIGJ5IHVzaW5nIHRoZSBlYXJseSB3aXRoZHJhd2FsIHNpZ25hdHVyZSBwcm92aWRlZCBieSBJbW1lcnN2ZS4KLy8gQHBhcmFtIGNhcmQgLSBUaGUgYWRkcmVzcyBvZiB0aGUgY2FyZC4KLy8gQHBhcmFtIHdpdGhkcmF3YWxfaGFzaCAtIFRoZSBoYXNoIG9mIHRoZSB3aXRoZHJhd2FsLgovLyBAcGFyYW0gZWFybHlfd2l0aGRyYXdhbF9zaWcgLSBUaGUgc2lnbmF0dXJlIGZvciBlYXJseSB3aXRoZHJhd2FsLgpjYXJkRnVuZFdpdGhkcmF3RWFybHk6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODExCgkvLyBhc3NlcnQodGhpcy5pc0NhcmRGdW5kT3duZXIoY2FyZEZ1bmQpKQoJZnJhbWVfZGlnIC0xIC8vIGNhcmRGdW5kOiBBZGRyZXNzCgljYWxsc3ViIGlzQ2FyZEZ1bmRPd25lcgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODEzCgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCWZyYW1lX2RpZyAtMiAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgxMwoJLy8gd2l0aGRyYXdhbCA9IHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgxNgoJLy8gZ2xvYmFscy5sYXRlc3RUaW1lc3RhbXAgPCB3aXRoZHJhd2FsLnRpbWVzdGFtcAoJZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCA4MCA4CglidG9pCgk8CglieiAqaWYxX2VuZAoKLy8gKmlmMV9jb25zZXF1ZW50Cip3aGlsZV8wOgoKKndoaWxlXzBfY29udGludWU6CgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4MTkKCS8vIGdsb2JhbHMub3Bjb2RlQnVkZ2V0IDwgMjUwMAoJZ2xvYmFsIE9wY29kZUJ1ZGdldAoJaW50IDI1MDAKCTwKCWJ6ICp3aGlsZV8wX2VuZAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjgyMAoJLy8gaW5jcmVhc2VPcGNvZGVCdWRnZXQoKQoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCWludCAwCglpdHhuX2ZpZWxkIEZlZQoJYnl0ZSBiNjQgQ29FQiAvLyAjcHJhZ21hIHZlcnNpb24gMTA7IGludCAxCglkdXAKCWl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCglpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCglpbnQgRGVsZXRlQXBwbGljYXRpb24KCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCglpdHhuX3N1Ym1pdAoJYiAqd2hpbGVfMAoKKndoaWxlXzBfZW5kOgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODIzCgkvLyBhc3NlcnQoZWQyNTUxOVZlcmlmeUJhcmUod2l0aGRyYXdhbF9oYXNoLCBlYXJseV93aXRoZHJhd2FsX3NpZywgdGhpcy5lYXJseV93aXRoZHJhd2FsX3B1YmtleS52YWx1ZSkpCglmcmFtZV9kaWcgLTIgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlczMyCglmcmFtZV9kaWcgLTMgLy8gZWFybHlfd2l0aGRyYXdhbF9zaWc6IGJ5dGVzMzIKCWJ5dGUgMHg2NTc3NzA2YiAvLyAiZXdwayIKCWFwcF9nbG9iYWxfZ2V0CgllZDI1NTE5dmVyaWZ5X2JhcmUKCWFzc2VydAoKKmlmMV9lbmQ6CgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo4MjcKCS8vIHRoaXMud2l0aGRyYXdGdW5kcyh3aXRoZHJhd2FsKQoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJY2FsbHN1YiB3aXRoZHJhd0Z1bmRzCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODMwCgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgoqY3JlYXRlX05vT3A6CgltZXRob2QgImRlcGxveShhZGRyZXNzKWFkZHJlc3MiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RlcGxveQoJZXJyCgoqY2FsbF9Ob09wOgoJbWV0aG9kICJvd25lcigpYWRkcmVzcyIKCW1ldGhvZCAidHJhbnNmZXJPd25lcnNoaXAoYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJzZXRXaXRoZHJhd2FsVGltZW91dCh1aW50NjQpdm9pZCIKCW1ldGhvZCAic2V0RWFybHlXaXRoZHJhd2FsUHVia2V5KGJ5dGVbMzJdKXZvaWQiCgltZXRob2QgInBhcnRuZXJDaGFubmVsQ3JlYXRlKHBheSxzdHJpbmcpYWRkcmVzcyIKCW1ldGhvZCAicGFydG5lckNoYW5uZWxDbG9zZShhZGRyZXNzKXZvaWQiCgltZXRob2QgImNhcmRGdW5kQ3JlYXRlKHBheSxhZGRyZXNzLHVpbnQ2NClhZGRyZXNzIgoJbWV0aG9kICJjYXJkRnVuZENsb3NlKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAiY2FyZEZ1bmRSZWNvdmVyKGFkZHJlc3MsYWRkcmVzcyl2b2lkIgoJbWV0aG9kICJhc3NldEFsbG93bGlzdEFkZChwYXksdWludDY0KXZvaWQiCgltZXRob2QgImFzc2V0QWxsb3dsaXN0UmVtb3ZlKHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZERlYml0KGFkZHJlc3MsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZFJlZnVuZChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpdm9pZCIKCW1ldGhvZCAiZ2V0TmV4dFNldHRsZW1lbnROb25jZSgpdWludDY0IgoJbWV0aG9kICJzZXRTZXR0bGVtZW50QWRkcmVzcyhhZGRyZXNzKXZvaWQiCgltZXRob2QgInNldHRsZSh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZEVuYWJsZUFzc2V0KHBheSxhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZERpc2FibGVBc3NldChhZGRyZXNzLHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwoYWRkcmVzcyxieXRlWzMyXSl2b2lkIgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3KGFkZHJlc3MsYnl0ZVszMl0pdm9pZCIKCW1ldGhvZCAiY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5KGFkZHJlc3MsYnl0ZVszMl0sYnl0ZVszMl0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3duZXIgKmFiaV9yb3V0ZV90cmFuc2Zlck93bmVyc2hpcCAqYWJpX3JvdXRlX3NldFdpdGhkcmF3YWxUaW1lb3V0ICphYmlfcm91dGVfc2V0RWFybHlXaXRoZHJhd2FsUHVia2V5ICphYmlfcm91dGVfcGFydG5lckNoYW5uZWxDcmVhdGUgKmFiaV9yb3V0ZV9wYXJ0bmVyQ2hhbm5lbENsb3NlICphYmlfcm91dGVfY2FyZEZ1bmRDcmVhdGUgKmFiaV9yb3V0ZV9jYXJkRnVuZENsb3NlICphYmlfcm91dGVfY2FyZEZ1bmRSZWNvdmVyICphYmlfcm91dGVfYXNzZXRBbGxvd2xpc3RBZGQgKmFiaV9yb3V0ZV9hc3NldEFsbG93bGlzdFJlbW92ZSAqYWJpX3JvdXRlX2NhcmRGdW5kRGViaXQgKmFiaV9yb3V0ZV9jYXJkRnVuZFJlZnVuZCAqYWJpX3JvdXRlX2dldE5leHRTZXR0bGVtZW50Tm9uY2UgKmFiaV9yb3V0ZV9zZXRTZXR0bGVtZW50QWRkcmVzcyAqYWJpX3JvdXRlX3NldHRsZSAqYWJpX3JvdXRlX2NhcmRGdW5kRW5hYmxlQXNzZXQgKmFiaV9yb3V0ZV9jYXJkRnVuZERpc2FibGVBc3NldCAqYWJpX3JvdXRlX2NhcmRGdW5kV2l0aGRyYXdhbFJlcXVlc3QgKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxDYW5jZWwgKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3ICphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhd0Vhcmx5CgllcnIKCipjYWxsX09wdEluOgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0KGFkZHJlc3MsYWRkcmVzcyx1aW50NjQsdWludDY0KWJ5dGVbMzJdIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jYXJkRnVuZFdpdGhkcmF3YWxSZXF1ZXN0CgllcnIKCipjYWxsX0Nsb3NlT3V0OgoJbWV0aG9kICJjYXJkRnVuZFdpdGhkcmF3KGFkZHJlc3MsYnl0ZVszMl0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY2FyZEZ1bmRXaXRoZHJhdwoJZXJyCgoqY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCW1ldGhvZCAidXBkYXRlKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV91cGRhdGUKCWVycgoKKmNhbGxfRGVsZXRlQXBwbGljYXRpb246CgltZXRob2QgImRlc3Ryb3koKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2Rlc3Ryb3kKCWVycgoKKnByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglyZXRzdWIKCipwcm9jZXNzX2R5bmFtaWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJY29uY2F0CglmcmFtZV9idXJ5IC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50CglkdXAKCWxlbgoJZnJhbWVfZGlnIC0yIC8vIGhlYWQgb2Zmc2V0CglidG9pCgkrCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfYnVyeSAtMiAvLyBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTQgLy8gdHVwbGUgaGVhZAoJZnJhbWVfZGlnIC0zIC8vIHR1cGxlIHRhaWwKCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy a partner channel, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active card funds",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalTimeout",
        "desc": "Set the number of seconds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "seconds",
            "type": "uint64",
            "desc": "New number of seconds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setEarlyWithdrawalPubkey",
        "desc": "Sets the early withdrawal public key.",
        "args": [
          {
            "name": "pubkey",
            "type": "byte[32]",
            "desc": "The public key to set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerChannelCreate",
        "desc": "Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "The name of the partner channel."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner channel account."
        },
        "events": [
          {
            "name": "PartnerChannelCreated",
            "args": [
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              },
              {
                "name": "partnerChannelName",
                "type": "string",
                "desc": "Partner Channel Name"
              }
            ],
            "desc": "Partner Channel Created event"
          }
        ]
      },
      {
        "name": "partnerChannelClose",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Funding Channel name"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt-in to. 0 = No asset opt-in"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        },
        "events": [
          {
            "name": "CardFundCreated",
            "args": [
              {
                "name": "cardFundOwner",
                "type": "address",
                "desc": "Card Fund Owner"
              },
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Card Fund"
              },
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              }
            ],
            "desc": "Card Created event"
          }
        ]
      },
      {
        "name": "cardFundClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund to recover."
          },
          {
            "name": "newCardFundHolder",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be debited."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "cardFundRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "getNextSettlementNonce",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setSettlementAddress",
        "desc": "Sets the settlement address to a new value.",
        "args": [
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "The new settlement address to set."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SettlementAddressChanged",
            "args": [
              {
                "name": "oldSettlementAddress",
                "type": "address",
                "desc": "Old settlement address"
              },
              {
                "name": "newSettlementAddress",
                "type": "address",
                "desc": "New settlement address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be transferred."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "The nonce to prevent duplicate settlements."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "recipient",
                "type": "address",
                "desc": "Settlement destination address"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Settlement nonce to prevent duplicate settlements"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "cardFundEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        },
        "events": [
          {
            "name": "WithdrawalRequest",
            "args": [
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Funding Source to withdraw from"
              },
              {
                "name": "recipient",
                "type": "address",
                "desc": "Recipient address to withdraw to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset to withdraw"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount to withdraw"
              },
              {
                "name": "timestamp",
                "type": "uint64",
                "desc": "Timestamp that must be reached before withdrawal can be completed"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Withdrawal nonce"
              }
            ],
            "desc": "Withdrawal Request event"
          }
        ]
      },
      {
        "name": "cardFundWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawEarly",
        "desc": "Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.",
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]"
          },
          {
            "name": "early_withdrawal_sig",
            "type": "byte[32]"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "PartnerChannelCreated",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "Partner Channel Name"
          }
        ],
        "desc": "Partner Channel Created event"
      },
      {
        "name": "CardFundCreated",
        "args": [
          {
            "name": "cardFundOwner",
            "type": "address",
            "desc": "Card Fund Owner"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          }
        ],
        "desc": "Card Created event"
      },
      {
        "name": "CardFundAssetEnabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Enabled event"
      },
      {
        "name": "CardFundAssetDisabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Disabled event"
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "SettlementAddressChanged",
        "args": [
          {
            "name": "oldSettlementAddress",
            "type": "address",
            "desc": "Old settlement address"
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "New settlement address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "Settlement destination address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Settlement nonce to prevent duplicate settlements"
          }
        ],
        "desc": "Settlement event"
      },
      {
        "name": "WithdrawalRequest",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address to withdraw to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          },
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "Timestamp that must be reached before withdrawal can be completed"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal Request event"
      },
      {
        "name": "Withdrawal",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source withdrawn from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address withdrawn to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount withdrawn"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal event"
      }
    ]
  }
}