#pragma version 10

// This TEAL was generated by TEALScript v0.88.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// onlyOwner(): void
//
// Assert the transaction sender is the owner of the contract.
onlyOwner:
	proto 0 0

	// src/roles/Ownable.algo.ts:53
	// assert(this.txn.sender === this._owner.value)
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	assert
	retsub

// isOwner(): boolean
//
// Checks if the current transaction sender is the owner.
// @returns boolean True if the sender is the owner, false otherwise.
isOwner:
	proto 0 1

	// src/roles/Ownable.algo.ts:61
	// return this.txn.sender === this._owner.value;
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	retsub

// owner()address
*abi_route_owner:
	// The ABI return prefix
	byte 0x151f7c75

	// execute owner()address
	callsub owner
	concat
	log
	int 1
	return

// owner(): Address
owner:
	proto 0 1

	// src/roles/Ownable.algo.ts:67
	// return this._owner.value;
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	retsub

// _transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// @param newOwner The address of the new owner.
_transferOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/roles/Ownable.algo.ts:76
	// previousOwner = this._owner.exists ? this._owner.value : globals.zeroAddress
	txna Applications 0
	byte 0x5f6f776e6572 // "_owner"
	app_global_get_ex
	swap
	pop
	bz *ternary1_false
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	b *ternary1_end

*ternary1_false:
	global ZeroAddress

*ternary1_end:
	frame_bury 0 // previousOwner: address

	// src/roles/Ownable.algo.ts:77
	// this._owner.value = newOwner
	byte 0x5f6f776e6572 // "_owner"
	frame_dig -1 // newOwner: Address
	app_global_put

	// src/roles/Ownable.algo.ts:79
	// this.OwnershipTransferred.log({
	//             previousOwner: previousOwner,
	//             newOwner: newOwner,
	//         })
	byte 0x9a223efb // OwnershipTransferred(address,address)
	frame_dig 0 // previousOwner: address
	frame_dig -1 // newOwner: Address
	concat
	concat
	log
	retsub

// transferOwnership(address)void
*abi_route_transferOwnership:
	// newOwner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute transferOwnership(address)void
	callsub transferOwnership
	int 1
	return

// transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// Requires the caller to be the current owner.
//
// @param newOwner The address of the new owner.
transferOwnership:
	proto 1 0

	// src/roles/Ownable.algo.ts:93
	// assert(this.isOwner())
	callsub isOwner
	assert

	// src/roles/Ownable.algo.ts:95
	// this._transferOwnership(newOwner)
	frame_dig -1 // newOwner: Address
	callsub _transferOwnership
	retsub

// deploy()void
*abi_route_deploy:
	// execute deploy()void
	callsub deploy
	int 1
	return

// deploy(): void
deploy:
	proto 0 0

	// src/Immersve.algo.ts:55
	// this._transferOwnership(this.txn.sender)
	txn Sender
	callsub _transferOwnership
	retsub

// update()void
*abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
update:
	proto 0 0

	// src/Immersve.algo.ts:60
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert
	retsub

// destroy()void
*abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
destroy:
	proto 0 0

	// src/Immersve.algo.ts:65
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert
	retsub

*create_NoOp:
	method "deploy()void"
	txna ApplicationArgs 0
	match *abi_route_deploy
	err

*call_NoOp:
	method "owner()address"
	method "transferOwnership(address)void"
	txna ApplicationArgs 0
	match *abi_route_owner *abi_route_transferOwnership
	err

*call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match *abi_route_update
	err

*call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match *abi_route_destroy
	err