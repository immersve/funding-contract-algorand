{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "newPartner(address,pay,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PartnerFactory",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy the Partner Factory, setting the transaction sender as the owner",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "newPartner",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "asset"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      }
    ]
  }
}