#pragma version 10

// This TEAL was generated by TEALScript v0.82.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp call_OptIn call_CloseOut NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// is_admin(): boolean
//
// Check if the current transaction sender is the admin
// @returns True if the sender is the admin
is_admin:
	proto 0 1

	// src/Immersve.algo.ts:58
	// return this.txn.sender === this.admin.value;
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==
	retsub

// is_owner(partner: string, card: Address): boolean
//
// Check if the current transaction sender is the owner of the card account
// @param card Address to check
// @returns True if the sender is the owner of the card
is_owner:
	proto 2 1

	// src/Immersve.algo.ts:67
	// return this.cards({partner: partner, owner: this.txn.sender} as PartnerAndOwner).value === card;
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partner: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	txn Sender
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_get
	assert
	frame_dig -2 // card: Address
	==
	retsub

// deploy()void
abi_route_deploy:
	// execute deploy()void
	callsub deploy
	int 1
	return

// deploy(): void
//
// Deploy the smart contract, setting the transaction sender as the admin
deploy:
	proto 0 0

	// src/Immersve.algo.ts:75
	// this.admin.value = this.txn.sender
	byte 0x61 // "a"
	txn Sender
	app_global_put
	retsub

// update()void
abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
//
// Allows the admin to update the smart contract
update:
	proto 0 0

	// src/Immersve.algo.ts:83
	// assert(this.is_admin())
	callsub is_admin
	assert
	retsub

// destroy()void
abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
//
// Destroy the smart contract, sending all Algo to the admin account. This can only be done if there are no active cards
destroy:
	proto 0 0

	// src/Immersve.algo.ts:91
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:94
	// assert(!this.active_cards.value)
	byte 0x63 // "c"
	app_global_get
	!
	assert

	// src/Immersve.algo.ts:96
	// sendPayment({
	//             receiver: this.app.address,
	//             amount: 0,
	//             closeRemainderTo: this.admin.value,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:97
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// src/Immersve.algo.ts:98
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:99
	// closeRemainderTo: this.admin.value
	byte 0x61 // "a"
	app_global_get
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// setAdmin(address)void
abi_route_setAdmin:
	// admin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setAdmin(address)void
	callsub setAdmin
	int 1
	return

// setAdmin(admin: Address): void
//
// Allows the current admin to set a new admin
// @param admin Address to be made admin
setAdmin:
	proto 1 0

	// src/Immersve.algo.ts:108
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:110
	// this.admin.value = admin
	byte 0x61 // "a"
	frame_dig -1 // admin: Address
	app_global_put
	retsub

// setWithdrawalRounds(uint64)void
abi_route_setWithdrawalRounds:
	// rounds: uint64
	txna ApplicationArgs 1
	btoi

	// execute setWithdrawalRounds(uint64)void
	callsub setWithdrawalRounds
	int 1
	return

// setWithdrawalRounds(rounds: uint64): void
//
// Set the number of rounds a withdrawal request must wait until being withdrawn
// @param rounds New number of rounds to wait
setWithdrawalRounds:
	proto 1 0

	// src/Immersve.algo.ts:118
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:120
	// this.withdrawal_wait_time.value = rounds
	byte 0x77 // "w"
	frame_dig -1 // rounds: uint64
	app_global_put
	retsub

// cardCreate(pay,string,address)address
abi_route_cardCreate:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardCreate(pay,string,address)address
	callsub cardCreate
	concat
	log
	int 1
	return

// cardCreate(mbr: PayTxn, partner: string, owner: Address): Address
//
// Create account. This generates a brand new account and funds the minimum balance requirement
// @param owner Address to have control over asset withdrawals
// @returns Newly generated account used by their card
cardCreate:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/Immersve.algo.ts:129
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:131
	// assert(mbr.amount === globals.minBalance + box_mbr)
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global MinBalance
	int 40900
	+
	==
	assert

	// src/Immersve.algo.ts:132
	// assert(mbr.receiver === this.app.address)
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src/Immersve.algo.ts:135
	// card_addr = sendMethodCall<[], Address>({
	//             name: "new",
	//             onCompletion: OnCompletion.DeleteApplication,
	//             approvalProgram: Card.approvalProgram(),
	//             clearStateProgram: Card.clearProgram(),
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// src/Immersve.algo.ts:137
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// src/Immersve.algo.ts:138
	// approvalProgram: Card.approvalProgram()
	byte b64 CiACAQAxGBSBBgsxGQiNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwCABBUffHWIAARQsCJDigABsSKyEDIKsgcjsggyDrIgI7IBszIKiYAEVh0v6jYaAI4B/80A
	itxn_field ApprovalProgram

	// src/Immersve.algo.ts:139
	// clearStateProgram: Card.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // card_addr: address

	// src/Immersve.algo.ts:143
	// sendPayment({
	//             receiver: card_addr,
	//             amount: globals.minBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:144
	// receiver: card_addr
	frame_dig 0 // card_addr: address
	itxn_field Receiver

	// src/Immersve.algo.ts:145
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:149
	// this.cards({ partner: partner, owner: owner} as PartnerAndOwner).value = card_addr
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -2 // partner: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -3 // owner: Address
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_dig 0 // card_addr: address
	box_put

	// src/Immersve.algo.ts:152
	// this.active_cards.value = this.active_cards.value + 1
	byte 0x63 // "c"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// src/Immersve.algo.ts:155
	// return card_addr;
	frame_dig 0 // card_addr: address

	// set the subroutine return value
	frame_bury 0
	retsub

// cardClose(string,address,account)void
abi_route_cardClose:
	// card: account
	txna ApplicationArgs 3
	btoi
	txnas Accounts

	// owner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardClose(string,address,account)void
	callsub cardClose
	int 1
	return

// cardClose(partner: string, owner: Address, card: Account): void
//
// Close account. This permanently removes the rekey and deletes the account from the ledger
// @param partner Partner name
// @param owner Address which has control over asset withdrawals
// @param card Account to close
cardClose:
	proto 3 0

	// src/Immersve.algo.ts:165
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:167
	// sendPayment({
	//             sender: card,
	//             receiver: card,
	//             amount: 0,
	//             closeRemainderTo: this.txn.sender,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:168
	// sender: card
	frame_dig -3 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:169
	// receiver: card
	frame_dig -3 // card: Account
	itxn_field Receiver

	// src/Immersve.algo.ts:170
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:171
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:174
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: box_mbr,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:175
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:176
	// amount: box_mbr
	int 40900
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:180
	// this.cards({partner: partner, owner: owner} as PartnerAndOwner).delete()
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partner: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // owner: Address
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_del

	// src/Immersve.algo.ts:183
	// this.active_cards.value = this.active_cards.value - 1
	byte 0x63 // "c"
	dup
	app_global_get
	int 1
	-
	app_global_put
	retsub

// cardAddAsset(pay,string,account,asset)void
abi_route_cardAddAsset:
	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardAddAsset(pay,string,account,asset)void
	callsub cardAddAsset
	int 1
	return

// cardAddAsset(mbr: PayTxn, partner: string, card: Account, asset: Asset): void
//
// Allows the owner (or admin) to OptIn to an asset, increasing the minimum balance requirement of the account
// @param partner Partner name
// @param card Account to add asset to
// @param asset Asset to add
cardAddAsset:
	proto 4 0

	// src/Immersve.algo.ts:193
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or0
	frame_dig -3 // card: Account
	frame_dig -2 // partner: string
	callsub is_owner
	||

skip_or0:
	assert

	// src/Immersve.algo.ts:195
	// assert(mbr.amount === globals.assetOptInMinBalance)
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==
	assert

	// src/Immersve.algo.ts:196
	// assert(mbr.receiver === this.app.address)
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// src/Immersve.algo.ts:198
	// sendPayment({
	//             receiver: card,
	//             amount: globals.assetOptInMinBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:199
	// receiver: card
	frame_dig -3 // card: Account
	itxn_field Receiver

	// src/Immersve.algo.ts:200
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:203
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: card,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:204
	// sender: card
	frame_dig -3 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:205
	// assetReceiver: card
	frame_dig -3 // card: Account
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:206
	// xferAsset: asset
	frame_dig -4 // asset: Asset
	itxn_field XferAsset

	// src/Immersve.algo.ts:207
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardRemoveAsset(string,account,asset)void
abi_route_cardRemoveAsset:
	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardRemoveAsset(string,account,asset)void
	callsub cardRemoveAsset
	int 1
	return

// cardRemoveAsset(partner: string, card: Account, asset: Asset): void
//
// Allows the owner (or admin) to CloseOut of an asset, reducing the minimum balance requirement of the account
// @param partner Partner name
// @param card Account to remove asset from
// @param asset Asset to remove
cardRemoveAsset:
	proto 3 0

	// src/Immersve.algo.ts:218
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or1
	frame_dig -2 // card: Account
	frame_dig -1 // partner: string
	callsub is_owner
	||

skip_or1:
	assert

	// src/Immersve.algo.ts:220
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: card,
	//             assetCloseTo: card,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:221
	// sender: card
	frame_dig -2 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:222
	// assetReceiver: card
	frame_dig -2 // card: Account
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:223
	// assetCloseTo: card
	frame_dig -2 // card: Account
	itxn_field AssetCloseTo

	// src/Immersve.algo.ts:224
	// xferAsset: asset
	frame_dig -3 // asset: Asset
	itxn_field XferAsset

	// src/Immersve.algo.ts:225
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:228
	// sendPayment({
	//             sender: card,
	//             receiver: this.txn.sender,
	//             amount: globals.assetOptInMinBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:229
	// sender: card
	frame_dig -2 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:230
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:231
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardDebit(account,account,asset,uint64)void
abi_route_cardDebit:
	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// recipient: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// card: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute cardDebit(account,account,asset,uint64)void
	callsub cardDebit
	int 1
	return

// cardDebit(card: Account, recipient: Account, asset: Asset, amount: uint64): void
//
// Allows the admin to send an amount of assets from the account
// @param card Account to debit from
// @param recipient Receiver of the assets being debited
// @param asset Asset being debited
// @param amount Amount to debit
cardDebit:
	proto 4 0

	// src/Immersve.algo.ts:243
	// assert(this.is_admin())
	callsub is_admin
	assert

	// src/Immersve.algo.ts:245
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: recipient,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:246
	// sender: card
	frame_dig -1 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:247
	// assetReceiver: recipient
	frame_dig -2 // recipient: Account
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:248
	// xferAsset: asset
	frame_dig -3 // asset: Asset
	itxn_field XferAsset

	// src/Immersve.algo.ts:249
	// assetAmount: amount
	frame_dig -4 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardWithdrawalRequest(string,account,asset,uint64)byte[32]
abi_route_cardWithdrawalRequest:
	// The ABI return prefix
	byte 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdrawalRequest(string,account,asset,uint64)byte[32]
	callsub cardWithdrawalRequest
	concat
	log
	int 1
	return

// cardWithdrawalRequest(partner: string, card: Account, asset: Asset, amount: uint64): bytes32
//
// Allows the owner to send an amount of assets from the account
// @param partner Partner name
// @param card Account to withdraw from
// @param asset Asset being withdrawn
// @param amount Amount to withdraw
// @returns Withdrawal hash used for completing or cancelling the withdrawal
cardWithdrawalRequest:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:264
	// assert(this.is_owner(partner, card))
	frame_dig -2 // card: Account
	frame_dig -1 // partner: string
	callsub is_owner
	assert

	// src/Immersve.algo.ts:266
	// withdrawal: WithdrawalRequest = {
	//             nonce: this.withdrawal_nonce(this.txn.sender).value,
	//             round: globals.round + this.withdrawal_wait_time.value,
	//             asset: asset,
	//             amount: amount,
	//         }
	txn Sender
	byte 0x6e // "n"
	app_local_get
	itob
	global Round
	byte 0x77 // "w"
	app_global_get
	+
	itob
	concat
	frame_dig -3 // asset: Asset
	itob
	concat
	frame_dig -4 // amount: uint64
	itob
	concat
	frame_bury 0 // withdrawal: WithdrawalRequest

	// src/Immersve.algo.ts:272
	// this.withdrawal_nonce(this.txn.sender).value = this.withdrawal_nonce(this.txn.sender).value + 1
	txn Sender
	byte 0x6e // "n"
	txn Sender
	byte 0x6e // "n"
	app_local_get
	int 1
	+
	app_local_put

	// src/Immersve.algo.ts:273
	// withdrawal_hash = sha256(rawBytes(withdrawal))
	frame_dig 0 // withdrawal: WithdrawalRequest
	sha256
	frame_bury 1 // withdrawal_hash: byte[32]

	// src/Immersve.algo.ts:275
	// this.withdrawals(
	//             this.txn.sender,
	//             withdrawal_hash,
	//         ).value = withdrawal
	txn Sender
	frame_dig 1 // withdrawal_hash: byte[32]
	frame_dig 0 // withdrawal: WithdrawalRequest
	app_local_put

	// src/Immersve.algo.ts:280
	// return withdrawal_hash;
	frame_dig 1 // withdrawal_hash: byte[32]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// cardWithdrawalCancel(string,account,byte[32])void
abi_route_cardWithdrawalCancel:
	// withdrawal_hash: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdrawalCancel(string,account,byte[32])void
	callsub cardWithdrawalCancel
	int 1
	return

// cardWithdrawalCancel(partner: string, card: Account, withdrawal_hash: bytes32): void
//
// Allows the owner (or admin) to cancel a withdrawal request
// @param partner Partner name
// @param card Account to withdraw from
// @param withdrawal_hash Hash of the withdrawal request
cardWithdrawalCancel:
	proto 3 0

	// src/Immersve.algo.ts:290
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or2
	frame_dig -2 // card: Account
	frame_dig -1 // partner: string
	callsub is_owner
	||

skip_or2:
	assert

	// src/Immersve.algo.ts:292
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -3 // withdrawal_hash: bytes32
	app_local_del
	retsub

// cardWithdraw(string,account,account,asset,byte[32])void
abi_route_cardWithdraw:
	// withdrawal_hash: byte[32]
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// asset: asset
	txna ApplicationArgs 4
	btoi
	txnas Assets

	// recipient: account
	txna ApplicationArgs 3
	btoi
	txnas Accounts

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdraw(string,account,account,asset,byte[32])void
	callsub cardWithdraw
	int 1
	return

// cardWithdraw(partner: string, card: Account, recipient: Account, asset: Asset, withdrawal_hash: bytes32): void
//
// Allows the owner to send an amount of assets from the account
// @param partner Partner name
// @param card Account to withdraw from
// @param recipient Receiver of the assets being withdrawn
// @param asset Asset being withdrawn
// @param withdrawal_hash Hash of the withdrawal request
cardWithdraw:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:306
	// assert(this.is_owner(partner, card))
	frame_dig -2 // card: Account
	frame_dig -1 // partner: string
	callsub is_owner
	assert

	// src/Immersve.algo.ts:308
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	frame_dig -5 // withdrawal_hash: bytes32
	frame_bury 0 // storage key//withdrawal

	// src/Immersve.algo.ts:308
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	txn Sender
	frame_bury 1 // storage account//withdrawal

	// src/Immersve.algo.ts:310
	// assert(globals.round >= withdrawal.round)
	global Round
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	extract 8 8
	btoi
	>=
	assert

	// src/Immersve.algo.ts:312
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: recipient,
	//             xferAsset: withdrawal.asset,
	//             assetAmount: withdrawal.amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:313
	// sender: card
	frame_dig -2 // card: Account
	itxn_field Sender

	// src/Immersve.algo.ts:314
	// assetReceiver: recipient
	frame_dig -3 // recipient: Account
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:315
	// xferAsset: withdrawal.asset
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	extract 16 8
	btoi
	itxn_field XferAsset

	// src/Immersve.algo.ts:316
	// assetAmount: withdrawal.amount
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	extract 24 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:319
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -5 // withdrawal_hash: bytes32
	app_local_del
	retsub

create_NoOp:
	method "deploy()void"
	txna ApplicationArgs 0
	match abi_route_deploy
	err

call_NoOp:
	method "setAdmin(address)void"
	method "setWithdrawalRounds(uint64)void"
	method "cardCreate(pay,string,address)address"
	method "cardClose(string,address,account)void"
	method "cardAddAsset(pay,string,account,asset)void"
	method "cardRemoveAsset(string,account,asset)void"
	method "cardDebit(account,account,asset,uint64)void"
	method "cardWithdrawalRequest(string,account,asset,uint64)byte[32]"
	method "cardWithdrawalCancel(string,account,byte[32])void"
	method "cardWithdraw(string,account,account,asset,byte[32])void"
	txna ApplicationArgs 0
	match abi_route_setAdmin abi_route_setWithdrawalRounds abi_route_cardCreate abi_route_cardClose abi_route_cardAddAsset abi_route_cardRemoveAsset abi_route_cardDebit abi_route_cardWithdrawalRequest abi_route_cardWithdrawalCancel abi_route_cardWithdraw
	err

call_OptIn:
	method "cardWithdrawalRequest(string,account,asset,uint64)byte[32]"
	txna ApplicationArgs 0
	match abi_route_cardWithdrawalRequest
	err

call_CloseOut:
	method "cardWithdraw(string,account,account,asset,byte[32])void"
	txna ApplicationArgs 0
	match abi_route_cardWithdraw
	err

call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match abi_route_update
	err

call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match abi_route_destroy
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub