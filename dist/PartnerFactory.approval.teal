#pragma version 10

// This TEAL was generated by TEALScript v0.82.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// onlyOwner(): void
//
// Assert the transaction sender is the owner of the contract.
onlyOwner:
	proto 0 0

	// src/roles/Ownable.algo.ts:55
	// assert(this.txn.sender === this._owner.value)
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	assert
	retsub

// isOwner(): boolean
//
// Checks if the current transaction sender is the owner.
// @returns {boolean} True if the sender is the owner, false otherwise.
isOwner:
	proto 0 1

	// src/roles/Ownable.algo.ts:63
	// return this.txn.sender === this._owner.value;
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	retsub

// owner()address
abi_route_owner:
	// The ABI return prefix
	byte 0x151f7c75

	// execute owner()address
	callsub owner
	concat
	log
	int 1
	return

// owner(): Address
owner:
	proto 0 1

	// src/roles/Ownable.algo.ts:70
	// return this._owner.value;
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	retsub

// _transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// @param newOwner The address of the new owner.
_transferOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/roles/Ownable.algo.ts:80
	// previousOwner = this._owner.exists ? this._owner.value : globals.zeroAddress
	txna Applications 0
	byte 0x5f6f776e6572 // "_owner"
	app_global_get_ex
	swap
	pop
	bz ternary1_false
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	b ternary1_end

ternary1_false:
	global ZeroAddress

ternary1_end:
	frame_bury 0 // previousOwner: address

	// src/roles/Ownable.algo.ts:81
	// this._owner.value = newOwner
	byte 0x5f6f776e6572 // "_owner"
	frame_dig -1 // newOwner: Address
	app_global_put

	// src/roles/Ownable.algo.ts:83
	// this.OwnershipTransferred.log({
	//             previousOwner: previousOwner,
	//             newOwner: newOwner
	//         })
	byte 0x9a223efb // OwnershipTransferred(address,address)
	frame_dig 0 // previousOwner: address
	frame_dig -1 // newOwner: Address
	concat
	concat
	log
	retsub

// transferOwnership(address)void
abi_route_transferOwnership:
	// newOwner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute transferOwnership(address)void
	callsub transferOwnership
	int 1
	return

// transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// Requires the caller to be the current owner.
//
// @param newOwner The address of the new owner.
transferOwnership:
	proto 1 0

	// src/roles/Ownable.algo.ts:98
	// assert(this.isOwner())
	callsub isOwner
	assert

	// src/roles/Ownable.algo.ts:100
	// this._transferOwnership(newOwner)
	frame_dig -1 // newOwner: Address
	callsub _transferOwnership
	retsub

// deploy(address)void
abi_route_deploy:
	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute deploy(address)void
	callsub deploy
	int 1
	return

// deploy(owner: Address): void
//
// Deploy the Partner Factory, setting the transaction sender as the owner
deploy:
	proto 1 0

	// src/Immersve.algo.ts:397
	// this._transferOwnership(this.txn.sender)
	txn Sender
	callsub _transferOwnership
	retsub

// update()void
abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
//
// Allows the owner to update the smart contract
update:
	proto 0 0

	// src/Immersve.algo.ts:405
	// this.onlyOwner()
	callsub onlyOwner
	retsub

// destroy()void
abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
//
// Destroy the smart contract, sending all Algo to the owner account
destroy:
	proto 0 0

	// src/Immersve.algo.ts:413
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:415
	// sendPayment({
	//            receiver: this.app.address,
	//            amount: 0,
	//            closeRemainderTo: this.owner(),
	//        })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:416
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// src/Immersve.algo.ts:417
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:418
	// closeRemainderTo: this.owner()
	callsub owner
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// newPartner()void
abi_route_newPartner:
	// execute newPartner()void
	callsub newPartner
	int 1
	return

// newPartner(): void
newPartner:
	proto 0 0

	// src/Immersve.algo.ts:423
	// sendMethodCall<[Address], void>({
	//            name: "deploy",
	//            approvalProgram: Partner.approvalProgram(),
	//            clearStateProgram: Partner.clearProgram(),
	//            methodArgs: [
	//                this.txn.sender
	//            ],
	//        })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "deploy(address)void"
	itxn_field ApplicationArgs

	// src/Immersve.algo.ts:425
	// approvalProgram: Partner.approvalProgram()
	byte b64 CiAGASAABAbE2AImCgABYQZfb3duZXIEFR98dQIAIgFjAW4BdwSmc/WwBJCGejIxGBQhBAsxGQiNDAQvBIUEjwAABJkEpwQhAAAAAAAAAAAAAACKAAAxACpkEkSJigABMQAqZBKJK4gABFCwIkOKAAEqZImKAQAoNjIAKmVMSEEABSpkQgACMgOMACqL/2eABJoiPvuLAIv/UFCwiTYaAUkVIxJEiAACIkOKAQCI/61Ei/+I/76JigIBKCgnBIv/SRUWVwYCTFCIBEkxAIgEN0hQvkSL/hKJNhoCF8AwNhoBSRUjEkSIAAIiQ4oCAIv/iP+BKYv+Z4mIAAIiQ4oAAIj/UImIAAIiQ4oAAIj/RCcFZBREsSKyEDIKsgcksgiI/0yyCSSyAbOJNhoBF4gAAiJDigEAiP8bJweL/2eJKzYaAkkVIxJENhoBVwIAMRYiCUk4ECISRIgABFCwIkOKAwEoiP7ui/84BzIKEkSL/zgIMgEhBQgSRLEhBLIQgARWHS/qshqBBbIZgF0KIAIBADEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAIAEFR98dYgABFCwIkOKAAGxIrIQMgqyByOyCDIOsiAjsgGzMgqJgARWHS/qNhoAjgH/zQCyHoABCrIfJLIBs7Q7IgnFOlcEAIwAsSKyEIsAsgcyATIQCLIIJLIBs7ElshCLALIAiwCyFClkshEkshIksgGzKCgnBIv+SRUWVwYCTFCIAtuL/YgCyUhQiwC/JwVJZCIIZ4sAjACJNhoDSRUjEkQ2GgJJFSMSRDYaAVcCAIgAAiJDigMAiP3jsSKyEIv9sgCL/bIHJLIIMQCyCSSyAbOxIrIQMQCyByEFsggksgGzKCgnBIv/SRUWVwYCTFCIAmyL/ogCWkhQvCcFSWQiCWeJNhoCFzYaAUkVIxJEiAACIkOKAgCI/YSxJbIQi/+yADIKshQpZLIRi/6yEiSyAbOABG5ApMSL/ylkFlCL/hZQULCJNhoCFzYaAUkVIxJEiAACIkOKAgCI/UKxJbIQMgqyAIv/shQpZLIRi/6yEiSyAbOABPT1KtOL/ylkFlCL/hZQULCJNhoCFzYaAUkVIxJEiAACIkOKAgCI/QCxJbIQMgqyAIv/shQpZLIRi/6yEiSyAbOABItm5YkpZBaL/hZQULCJKzYaAxc2GgJJFSMSRDYaAVcCAIgABFCwIkOKAwEoSYv+i/+I/RZEMQAnBmIWMgYnB2QIFlCL/RZQjAAxACcGMQAnBmIiCGaLAAGMATEAiwGLAGaLAYwARgGJNhoDSRUjEkQ2GgJJFSMSRDYaAVcCAIgAAiJDigMAiPxnSUAACIv+i/+I/LYRRDEAi/1oiTYaBEkVIxJENhoDSRUjEkQ2GgJJFSMSRDYaAVcCAIgAAiJDigQAKEmL/ov/iPx/RIv8jAAxAIwBMgaLAYsAYlcICBcPRLElshCL/rIAi/2yFClkshGLAYsAYlcQCBeyEiSyAbMxAIv8aImABE+bDCQ2GgCOAfxYAIAEsbuwqIAE4XuvtIAEPoAACoAEya7Q0oAEDc1FB4AEEcMtiIAEQR9B2oAEsD58ZicIgAS2iuY4Jwk2GgCOC/uQ+8f8U/xo/Xn94v4k/mb+pf7//zMAJwg2GgCOAf6bACcJNhoAjgH/HwCABKDoGHI2GgCOAfwAAIAEnIahhTYaAI4B+/4AigQDi/yL/1CL/Yv+iYoEA4v8i/5QjPyL/0kVi/4XCBZXBgKM/ov9TFCM/Yv8i/2L/ok=
	itxn_field ApprovalProgram

	// src/Immersve.algo.ts:426
	// clearStateProgram: Partner.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// src/Immersve.algo.ts:427
	// methodArgs: [
	//                this.txn.sender
	//            ]
	txn Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "deploy(address)void"
	txna ApplicationArgs 0
	match abi_route_deploy
	err

call_NoOp:
	method "owner()address"
	method "transferOwnership(address)void"
	method "newPartner()void"
	txna ApplicationArgs 0
	match abi_route_owner abi_route_transferOwnership abi_route_newPartner
	err

call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match abi_route_update
	err

call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match abi_route_destroy
	err