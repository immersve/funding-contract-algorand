#pragma version 10

// This TEAL was generated by TEALScript v0.87.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *call_CloseOut *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// onlyOwner(): void
//
// Assert the transaction sender is the owner of the contract.
onlyOwner:
	proto 0 0

	// src/roles/Ownable.algo.ts:53
	// assert(this.txn.sender === this._owner.value)
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	assert
	retsub

// isOwner(): boolean
//
// Checks if the current transaction sender is the owner.
// @returns boolean True if the sender is the owner, false otherwise.
isOwner:
	proto 0 1

	// src/roles/Ownable.algo.ts:61
	// return this.txn.sender === this._owner.value;
	txn Sender
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	==
	retsub

// owner()address
*abi_route_owner:
	// The ABI return prefix
	byte 0x151f7c75

	// execute owner()address
	callsub owner
	concat
	log
	int 1
	return

// owner(): Address
owner:
	proto 0 1

	// src/roles/Ownable.algo.ts:67
	// return this._owner.value;
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	retsub

// _transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// @param newOwner The address of the new owner.
_transferOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/roles/Ownable.algo.ts:76
	// previousOwner = this._owner.exists ? this._owner.value : globals.zeroAddress
	txna Applications 0
	byte 0x5f6f776e6572 // "_owner"
	app_global_get_ex
	swap
	pop
	bz *ternary1_false
	byte 0x5f6f776e6572 // "_owner"
	app_global_get
	b *ternary1_end

*ternary1_false:
	global ZeroAddress

*ternary1_end:
	frame_bury 0 // previousOwner: address

	// src/roles/Ownable.algo.ts:77
	// this._owner.value = newOwner
	byte 0x5f6f776e6572 // "_owner"
	frame_dig -1 // newOwner: Address
	app_global_put

	// src/roles/Ownable.algo.ts:79
	// this.OwnershipTransferred.log({
	//             previousOwner: previousOwner,
	//             newOwner: newOwner,
	//         })
	byte 0x9a223efb // OwnershipTransferred(address,address)
	frame_dig 0 // previousOwner: address
	frame_dig -1 // newOwner: Address
	concat
	concat
	log
	retsub

// transferOwnership(address)void
*abi_route_transferOwnership:
	// newOwner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute transferOwnership(address)void
	callsub transferOwnership
	int 1
	return

// transferOwnership(newOwner: Address): void
//
// Transfers the ownership of the contract to a new owner.
// Requires the caller to be the current owner.
//
// @param newOwner The address of the new owner.
transferOwnership:
	proto 1 0

	// src/roles/Ownable.algo.ts:93
	// assert(this.isOwner())
	callsub isOwner
	assert

	// src/roles/Ownable.algo.ts:95
	// this._transferOwnership(newOwner)
	frame_dig -1 // newOwner: Address
	callsub _transferOwnership
	retsub

// isCardFundOwner(partnerChannel: string, card: Address): boolean
//
// Check if the current transaction sender is the Card Holder of the card account
// @param card Address to check
// @returns True if the sender is the Card Holder of the card
isCardFundOwner:
	proto 2 1

	// src/Immersve.algo.ts:219
	// return (
	//             this.card_funds({ partnerChannel: partnerChannel, cardFundOwner: this.txn.sender } as CardFundDetails)
	//                 .value === card
	//         );
	byte 0x6366 // "cf"
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	txn Sender
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	box_get
	assert
	frame_dig -2 // card: Address
	==
	retsub

// cardFundAssetOptIn(cardFund: Address, asset: AssetID): void
//
// Opt-in a Card Fund into an asset. Minimum balance requirement must be met prior to calling this function.
// @param cardFund Card Fund address
// @param asset Asset to opt-in to
cardFundAssetOptIn:
	proto 2 0

	// src/Immersve.algo.ts:232
	// assert(this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	assert

	// src/Immersve.algo.ts:234
	// sendAssetTransfer({
	//             sender: cardFund,
	//             assetReceiver: cardFund,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:235
	// sender: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field Sender

	// src/Immersve.algo.ts:236
	// assetReceiver: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:237
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:238
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:241
	// this.CardFundAssetEnabled.log({
	//             cardFund: cardFund,
	//             asset: asset,
	//         })
	byte 0x248a051e // CardFundAssetEnabled(address,uint64)
	frame_dig -1 // cardFund: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	concat
	log
	retsub

// cardFundAssetCloseOut(cardFund: Address, asset: AssetID): void
cardFundAssetCloseOut:
	proto 2 0

	// src/Immersve.algo.ts:248
	// sendAssetTransfer({
	//             sender: cardFund,
	//             assetReceiver: cardFund,
	//             assetCloseTo: cardFund,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:249
	// sender: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field Sender

	// src/Immersve.algo.ts:250
	// assetReceiver: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:251
	// assetCloseTo: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field AssetCloseTo

	// src/Immersve.algo.ts:252
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:253
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:256
	// sendPayment({
	//             sender: cardFund,
	//             receiver: this.txn.sender,
	//             amount: globals.assetOptInMinBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:257
	// sender: cardFund
	frame_dig -1 // cardFund: Address
	itxn_field Sender

	// src/Immersve.algo.ts:258
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:259
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:262
	// this.CardFundAssetDisabled.log({
	//             cardFund: cardFund,
	//             asset: asset,
	//         })
	byte 0xd1531678 // CardFundAssetDisabled(address,uint64)
	frame_dig -1 // cardFund: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	concat
	log
	retsub

// withdrawFunds(withdrawal: WithdrawalRequest): void
withdrawFunds:
	proto 1 0

	// src/Immersve.algo.ts:269
	// sendAssetTransfer({
	//             sender: withdrawal.cardFund,
	//             assetReceiver: withdrawal.recipient,
	//             xferAsset: withdrawal.asset,
	//             assetAmount: withdrawal.amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:270
	// sender: withdrawal.cardFund
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 0 32
	itxn_field Sender

	// src/Immersve.algo.ts:271
	// assetReceiver: withdrawal.recipient
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 32 32
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:272
	// xferAsset: withdrawal.asset
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 64 8
	btoi
	itxn_field XferAsset

	// src/Immersve.algo.ts:273
	// assetAmount: withdrawal.amount
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 72 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:277
	// this.Withdrawal.log({
	//             cardFund: withdrawal.cardFund,
	//             recipient: withdrawal.recipient,
	//             asset: withdrawal.asset,
	//             amount: withdrawal.amount,
	//             nonce: withdrawal.nonce,
	//         })
	byte 0x3b7b360b // Withdrawal(address,address,uint64,uint64,uint64)
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 0 32
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 32 32
	concat
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 64 8
	btoi
	itob
	concat
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 72 8
	btoi
	itob
	concat
	frame_dig -1 // withdrawal: WithdrawalRequest
	extract 88 8
	btoi
	itob
	concat
	concat
	log
	retsub

// deploy(address)address
*abi_route_deploy:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute deploy(address)address
	callsub deploy
	concat
	log
	int 1
	return

// deploy(owner: Address): Address
//
// Deploy a partner channel, setting the owner as provided
deploy:
	proto 1 1

	// src/Immersve.algo.ts:292
	// this._transferOwnership(owner)
	frame_dig -1 // owner: Address
	callsub _transferOwnership

	// src/Immersve.algo.ts:294
	// return this.app.address;
	global CurrentApplicationAddress
	retsub

// update()void
*abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

// update(): void
//
// Allows the owner to update the smart contract
update:
	proto 0 0

	// src/Immersve.algo.ts:302
	// this.onlyOwner()
	callsub onlyOwner
	retsub

// destroy()void
*abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

// destroy(): void
//
// Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active card funds
destroy:
	proto 0 0

	// src/Immersve.algo.ts:310
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:313
	// assert(!this.card_funds_active_count.value)
	byte 0x63666163 // "cfac"
	app_global_get
	!
	assert

	// src/Immersve.algo.ts:315
	// assert(!this.partner_channels_active_count.value)
	byte 0x70636163 // "pcac"
	app_global_get
	!
	assert

	// src/Immersve.algo.ts:317
	// sendPayment({
	//             receiver: this.app.address,
	//             amount: 0,
	//             closeRemainderTo: this.owner(),
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:318
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// src/Immersve.algo.ts:319
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:320
	// closeRemainderTo: this.owner()
	callsub owner
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// setWithdrawalTimeout(uint64)void
*abi_route_setWithdrawalTimeout:
	// seconds: uint64
	txna ApplicationArgs 1
	btoi

	// execute setWithdrawalTimeout(uint64)void
	callsub setWithdrawalTimeout
	int 1
	return

// setWithdrawalTimeout(seconds: uint64): void
//
// Set the number of seconds a withdrawal request must wait until being withdrawn
// @param seconds New number of seconds to wait
setWithdrawalTimeout:
	proto 1 0

	// src/Immersve.algo.ts:330
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:332
	// this.withdrawal_wait_time.value = seconds
	byte 0x777774 // "wwt"
	frame_dig -1 // seconds: uint64
	app_global_put
	retsub

// setEarlyWithdrawalPubkey(byte[32])void
*abi_route_setEarlyWithdrawalPubkey:
	// pubkey: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setEarlyWithdrawalPubkey(byte[32])void
	callsub setEarlyWithdrawalPubkey
	int 1
	return

// setEarlyWithdrawalPubkey(pubkey: bytes32): void
//
// Sets the early withdrawal public key.
// @param pubkey - The public key to set.
setEarlyWithdrawalPubkey:
	proto 1 0

	// src/Immersve.algo.ts:340
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:342
	// this.early_withdrawal_pubkey.value = pubkey
	byte 0x6577706b // "ewpk"
	frame_dig -1 // pubkey: bytes32
	app_global_put
	retsub

// partnerChannelCreate(pay,string)address
*abi_route_partnerChannelCreate:
	// The ABI return prefix
	byte 0x151f7c75

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute partnerChannelCreate(pay,string)address
	callsub partnerChannelCreate
	concat
	log
	int 1
	return

// partnerChannelCreate(mbr: PayTxn, partnerChannel: string): Address
//
// Creates a partner channel account and associates it with the provided partner channel name.
// Only the owner of the contract can call this function.
//
// @param mbr - The PayTxn object representing the payment transaction.
// @param partnerChannel - The name of the partner channel.
// @returns The address of the newly created partner channel account.
partnerChannelCreate:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:354
	// assert(!this.partner_channels(partnerChannel).exists)
	byte 0x7063 // "pc"
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	!
	assert

	// src/Immersve.algo.ts:356
	// boxCost = 2500 + 400 * (3 + len(partnerChannel) + 32)
	int 2500
	int 400
	int 3
	frame_dig -2 // partnerChannel: string
	len
	+
	int 32
	+
	*
	+
	frame_bury 0 // boxCost: uint64

	// src/Immersve.algo.ts:358
	// verifyPayTxn(mbr, {
	//             receiver: this.app.address,
	//             amount: globals.minBalance + globals.assetOptInMinBalance + boxCost,
	//         })
	// verify receiver
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	frame_dig 0 // boxCost: uint64
	+
	==
	assert

	// src/Immersve.algo.ts:364
	// partnerChannelAddr = sendMethodCall<typeof ControlledAddress.prototype.new>({
	//             onCompletion: OnCompletion.DeleteApplication,
	//             approvalProgram: ControlledAddress.approvalProgram(),
	//             clearStateProgram: ControlledAddress.clearProgram(),
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// src/Immersve.algo.ts:365
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// src/Immersve.algo.ts:366
	// approvalProgram: ControlledAddress.approvalProgram()
	byte b64 CiACAQAxGBSBBgsxGQiNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwCABBUffHWIAARQsCJDigABsSKyEDIKsgcjsggyDrIgI7IBszIKiYAEVh0v6jYaAI4B/80A
	itxn_field ApprovalProgram

	// src/Immersve.algo.ts:367
	// clearStateProgram: ControlledAddress.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 1 // partnerChannelAddr: address

	// src/Immersve.algo.ts:371
	// sendPayment({
	//             receiver: partnerChannelAddr,
	//             amount: globals.minBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:372
	// receiver: partnerChannelAddr
	frame_dig 1 // partnerChannelAddr: address
	itxn_field Receiver

	// src/Immersve.algo.ts:373
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:376
	// this.partner_channels(partnerChannel).value = partnerChannelAddr
	byte 0x7063 // "pc"
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	frame_dig 1 // partnerChannelAddr: address
	box_put

	// src/Immersve.algo.ts:379
	// this.partner_channels_active_count.value = this.partner_channels_active_count.value + 1
	byte 0x70636163 // "pcac"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// src/Immersve.algo.ts:381
	// this.PartnerChannelCreated.log({
	//             partnerChannel: partnerChannel,
	//         })
	byte 0x02dfef59 // PartnerChannelCreated(string)
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0002 // initial head offset
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log

	// src/Immersve.algo.ts:385
	// return partnerChannelAddr;
	frame_dig 1 // partnerChannelAddr: address

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// partnerChannelClose(string)void
*abi_route_partnerChannelClose:
	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute partnerChannelClose(string)void
	callsub partnerChannelClose
	int 1
	return

// partnerChannelClose(partnerChannel: string): void
partnerChannelClose:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/Immersve.algo.ts:389
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:391
	// sendPayment({
	//             sender: this.partner_channels(partnerChannel).value,
	//             receiver: this.partner_channels(partnerChannel).value,
	//             amount: 0,
	//             closeRemainderTo: this.txn.sender,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:392
	// sender: this.partner_channels(partnerChannel).value
	byte 0x7063 // "pc"
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get
	assert
	itxn_field Sender

	// src/Immersve.algo.ts:393
	// receiver: this.partner_channels(partnerChannel).value
	byte 0x7063 // "pc"
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get
	assert
	itxn_field Receiver

	// src/Immersve.algo.ts:394
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:395
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:398
	// boxCost = 2500 + 400 * (3 + len(partnerChannel) + 32)
	int 2500
	int 400
	int 3
	frame_dig -1 // partnerChannel: string
	len
	+
	int 32
	+
	*
	+
	frame_bury 0 // boxCost: uint64

	// src/Immersve.algo.ts:400
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: boxCost,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:401
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:402
	// amount: boxCost
	frame_dig 0 // boxCost: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:406
	// this.partner_channels(partnerChannel).delete()
	byte 0x7063 // "pc"
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_del

	// src/Immersve.algo.ts:409
	// this.partner_channels_active_count.value = this.partner_channels_active_count.value - 1
	byte 0x70636163 // "pcac"
	dup
	app_global_get
	int 1
	-
	app_global_put
	retsub

// cardFundCreate(pay,string,uint64)address
*abi_route_cardFundCreate:
	// The ABI return prefix
	byte 0x151f7c75

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardFundCreate(pay,string,uint64)address
	callsub cardFundCreate
	concat
	log
	int 1
	return

// cardFundCreate(mbr: PayTxn, partnerChannel: string, asset: AssetID): Address
//
// Create account. This generates a brand new account and funds the minimum balance requirement
// @param mbr Payment transaction of minimum balance requirement
// @param partnerChannel Funding Channel name
// @param asset Asset to opt-in to. 0 = No asset opt-in
// @returns Newly generated account used by their card
cardFundCreate:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// src/Immersve.algo.ts:420
	// assert(this.partner_channels(partnerChannel).exists)
	byte 0x7063 // "pc"
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	assert

	// src/Immersve.algo.ts:422
	// cardFunds: CardFundDetails = { partnerChannel: partnerChannel, cardFundOwner: this.txn.sender }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	txn Sender
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // cardFunds: CardFundDetails

	// src/Immersve.algo.ts:423
	// boxCost = 2500 + 400 * (3 + len(cardFunds) + 32)
	int 2500
	int 400
	int 3
	frame_dig 0 // cardFunds: CardFundDetails
	len
	+
	int 32
	+
	*
	+
	frame_bury 1 // boxCost: uint64

	// src/Immersve.algo.ts:424
	// assetMbr = asset ? globals.assetOptInMinBalance : 0
	frame_dig -3 // asset: AssetID
	bz *ternary3_false
	global AssetOptInMinBalance
	b *ternary3_end

*ternary3_false:
	int 0

*ternary3_end:
	frame_bury 2 // assetMbr: uint64

	// src/Immersve.algo.ts:426
	// verifyPayTxn(mbr, {
	//             receiver: this.app.address,
	//             amount: globals.minBalance + assetMbr + boxCost,
	//         })
	// verify receiver
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global MinBalance
	frame_dig 2 // assetMbr: uint64
	+
	frame_dig 1 // boxCost: uint64
	+
	==
	assert

	// src/Immersve.algo.ts:432
	// cardAddr = sendMethodCall<typeof ControlledAddress.prototype.new>({
	//             onCompletion: OnCompletion.DeleteApplication,
	//             approvalProgram: ControlledAddress.approvalProgram(),
	//             clearStateProgram: ControlledAddress.clearProgram(),
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// src/Immersve.algo.ts:433
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// src/Immersve.algo.ts:434
	// approvalProgram: ControlledAddress.approvalProgram()
	byte b64 CiACAQAxGBSBBgsxGQiNDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwCABBUffHWIAARQsCJDigABsSKyEDIKsgcjsggyDrIgI7IBszIKiYAEVh0v6jYaAI4B/80A
	itxn_field ApprovalProgram

	// src/Immersve.algo.ts:435
	// clearStateProgram: ControlledAddress.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 3 // cardAddr: address

	// src/Immersve.algo.ts:439
	// sendPayment({
	//             receiver: cardAddr,
	//             amount: globals.minBalance + assetMbr,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:440
	// receiver: cardAddr
	frame_dig 3 // cardAddr: address
	itxn_field Receiver

	// src/Immersve.algo.ts:441
	// amount: globals.minBalance + assetMbr
	global MinBalance
	frame_dig 2 // assetMbr: uint64
	+
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if0_condition
	// src/Immersve.algo.ts:445
	// asset
	frame_dig -3 // asset: AssetID
	bz *if0_end

	// *if0_consequent
	// src/Immersve.algo.ts:446
	// this.cardFundAssetOptIn(cardAddr, asset)
	frame_dig -3 // asset: AssetID
	frame_dig 3 // cardAddr: address
	callsub cardFundAssetOptIn

*if0_end:
	// src/Immersve.algo.ts:450
	// this.card_funds(cardFunds).value = cardAddr
	byte 0x6366 // "cf"
	frame_dig 0 // cardFunds: CardFundDetails
	concat
	frame_dig 3 // cardAddr: address
	box_put

	// src/Immersve.algo.ts:453
	// this.card_funds_active_count.value = this.card_funds_active_count.value + 1
	byte 0x63666163 // "cfac"
	dup
	app_global_get
	int 1
	+
	app_global_put

	// src/Immersve.algo.ts:455
	// this.CardFundCreated.log({
	//             cardFundOwner: this.txn.sender,
	//             cardFund: cardAddr,
	//             partnerChannel: partnerChannel,
	//         })
	byte 0x2a92ec73 // CardFundCreated(address,address,string)
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0042 // initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig 3 // cardAddr: address
	callsub *process_static_tuple_element
	frame_dig -2 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	log

	// src/Immersve.algo.ts:462
	// return cardAddr;
	frame_dig 3 // cardAddr: address

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// cardFundClose(string,address,address)void
*abi_route_cardFundClose:
	// card: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// cardFundOwner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundClose(string,address,address)void
	callsub cardFundClose
	int 1
	return

// cardFundClose(partnerChannel: string, cardFundOwner: Address, card: Address): void
//
// Close account. This permanently removes the rekey and deletes the account from the ledger
// @param partnerChannel Funding Channel name
// @param cardFundOwner Address which has control over asset withdrawals
// @param card Address to close
cardFundClose:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:472
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, card))
	callsub isOwner
	dup
	bnz *skip_or0
	frame_dig -3 // card: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or0:
	assert

	// src/Immersve.algo.ts:474
	// sendPayment({
	//             sender: card,
	//             receiver: card,
	//             amount: 0,
	//             closeRemainderTo: this.txn.sender,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:475
	// sender: card
	frame_dig -3 // card: Address
	itxn_field Sender

	// src/Immersve.algo.ts:476
	// receiver: card
	frame_dig -3 // card: Address
	itxn_field Receiver

	// src/Immersve.algo.ts:477
	// amount: 0
	int 0
	itxn_field Amount

	// src/Immersve.algo.ts:478
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:481
	// cardFunds: CardFundDetails = { partnerChannel: partnerChannel, cardFundOwner: cardFundOwner }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // cardFundOwner: Address
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // cardFunds: CardFundDetails

	// src/Immersve.algo.ts:482
	// boxCost = 2500 + 400 * (1 + len(cardFunds) + 32)
	int 2500
	int 400
	int 1
	frame_dig 0 // cardFunds: CardFundDetails
	len
	+
	int 32
	+
	*
	+
	frame_bury 1 // boxCost: uint64

	// src/Immersve.algo.ts:484
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: boxCost,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:485
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:486
	// amount: boxCost
	frame_dig 1 // boxCost: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:490
	// this.card_funds(cardFunds).delete()
	byte 0x6366 // "cf"
	frame_dig 0 // cardFunds: CardFundDetails
	concat
	box_del

	// src/Immersve.algo.ts:493
	// this.card_funds_active_count.value = this.card_funds_active_count.value - 1
	byte 0x63666163 // "cfac"
	dup
	app_global_get
	int 1
	-
	app_global_put
	retsub

// cardFundRecover(string,address,address)void
*abi_route_cardFundRecover:
	// newCardHolder: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// oldCardHolder: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundRecover(string,address,address)void
	callsub cardFundRecover
	int 1
	return

// cardFundRecover(partnerChannel: string, oldCardHolder: Address, newCardHolder: Address): void
//
// Recovers funds from an old card and transfers them to a new card.
// Only the owner of the contract can perform this operation.
//
// @param partnerChannel - The partner channel associated with the card funds
// @param oldCardHolder - The address of the old card holder.
// @param newCardHolder - The address of the new card holder.
cardFundRecover:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:505
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:507
	// oldCardFunds: CardFundDetails = { partnerChannel: partnerChannel, cardFundOwner: oldCardHolder }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // oldCardHolder: Address
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // oldCardFunds: CardFundDetails

	// src/Immersve.algo.ts:508
	// newCardFunds: CardFundDetails = { partnerChannel: partnerChannel, cardFundOwner: newCardHolder }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // newCardHolder: Address
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // newCardFunds: CardFundDetails

	// src/Immersve.algo.ts:509
	// this.card_funds(newCardFunds).value = this.card_funds(oldCardFunds).value
	byte 0x6366 // "cf"
	frame_dig 1 // newCardFunds: CardFundDetails
	concat
	byte 0x6366 // "cf"
	frame_dig 0 // oldCardFunds: CardFundDetails
	concat
	box_get
	assert
	box_put

	// src/Immersve.algo.ts:511
	// this.card_funds(oldCardFunds).delete()
	byte 0x6366 // "cf"
	frame_dig 0 // oldCardFunds: CardFundDetails
	concat
	box_del
	retsub

// assetAllowlistAdd(pay,uint64)void
*abi_route_assetAllowlistAdd:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute assetAllowlistAdd(pay,uint64)void
	callsub assetAllowlistAdd
	int 1
	return

// assetAllowlistAdd(mbr: PayTxn, asset: AssetID): void
//
// Allows the master contract to flag intent of accepting an asset.
// This can be considered the whitelists whitelist.
//
// @param mbr - Payment transaction of minimum balance requirement
// @param asset - The AssetID of the asset being transferred.
assetAllowlistAdd:
	proto 2 0

	// src/Immersve.algo.ts:522
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:524
	// verifyPayTxn(mbr, {
	//             receiver: this.app.address,
	//             amount: globals.assetOptInMinBalance,
	//         })
	// verify receiver
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==
	assert

	// src/Immersve.algo.ts:529
	// sendAssetTransfer({
	//             sender: this.app.address,
	//             assetReceiver: this.app.address,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:530
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/Immersve.algo.ts:531
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:532
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:533
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetAllowlistRemove(uint64)void
*abi_route_assetAllowlistRemove:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute assetAllowlistRemove(uint64)void
	callsub assetAllowlistRemove
	int 1
	return

// assetAllowlistRemove(asset: AssetID): void
//
// Allows the master contract to reject accepting an asset.
//
// @param asset - The AssetID of the asset being transferred.
assetAllowlistRemove:
	proto 1 0

	// src/Immersve.algo.ts:543
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:546
	// sendAssetTransfer({
	//             sender: this.app.address,
	//             assetReceiver: this.app.address,
	//             assetCloseTo: this.app.address,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:547
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/Immersve.algo.ts:548
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:549
	// assetCloseTo: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetCloseTo

	// src/Immersve.algo.ts:550
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:551
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:554
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: globals.assetOptInMinBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:555
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/Immersve.algo.ts:556
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardFundDebit(address,uint64,uint64)void
*abi_route_cardFundDebit:
	// amount: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// card: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute cardFundDebit(address,uint64,uint64)void
	callsub cardFundDebit
	int 1
	return

// cardFundDebit(card: Address, asset: AssetID, amount: uint64): void
//
// Debits the specified amount of the given asset from the card account.
// Only the owner of the contract can perform this operation.
//
// @param card The card account from which the asset will be debited.
// @param amount The amount of the asset to be debited.
cardFundDebit:
	proto 3 0

	// src/Immersve.algo.ts:568
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:570
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: this.app.address,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:571
	// sender: card
	frame_dig -1 // card: Address
	itxn_field Sender

	// src/Immersve.algo.ts:572
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:573
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:574
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:577
	// this.Debit.log({
	//             card: card,
	//             asset: asset,
	//             amount: amount,
	//         })
	byte 0x6e40a4c4 // Debit(address,uint64,uint64)
	frame_dig -1 // card: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // amount: uint64
	itob
	concat
	concat
	log
	retsub

// cardFundRefund(string,address,uint64,uint64)void
*abi_route_cardFundRefund:
	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// asset: uint64
	txna ApplicationArgs 3
	btoi

	// card: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundRefund(string,address,uint64,uint64)void
	callsub cardFundRefund
	int 1
	return

// cardFundRefund(partnerChannel: string, card: Address, asset: AssetID, amount: uint64): void
//
// Refunds a specified amount of an asset to a card account.
// Only the owner of the contract can perform this operation.
//
// @param card - The card account to refund the asset to.
// @param amount - The amount of the asset to refund.
cardFundRefund:
	proto 4 0

	// src/Immersve.algo.ts:592
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:594
	// sendAssetTransfer({
	//             sender: this.partner_channels(partnerChannel).value,
	//             assetReceiver: card,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:595
	// sender: this.partner_channels(partnerChannel).value
	byte 0x7063 // "pc"
	frame_dig -1 // partnerChannel: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get
	assert
	itxn_field Sender

	// src/Immersve.algo.ts:596
	// assetReceiver: card
	frame_dig -2 // card: Address
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:597
	// xferAsset: asset
	frame_dig -3 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:598
	// assetAmount: amount
	frame_dig -4 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:601
	// this.Refund.log({
	//             card: card,
	//             asset: asset,
	//             amount: amount,
	//         })
	byte 0xf4f52ad3 // Refund(address,uint64,uint64)
	frame_dig -2 // card: Address
	frame_dig -3 // asset: AssetID
	itob
	concat
	frame_dig -4 // amount: uint64
	itob
	concat
	concat
	log
	retsub

// getNextSettlementNonce()uint64
*abi_route_getNextSettlementNonce:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getNextSettlementNonce()uint64
	callsub getNextSettlementNonce
	itob
	concat
	log
	int 1
	return

// getNextSettlementNonce(): uint64
getNextSettlementNonce:
	proto 0 1

	// src/Immersve.algo.ts:610
	// return this.settlement_nonce.value;
	byte 0x736e // "sn"
	app_global_get
	retsub

// setSettlementAddress(address)void
*abi_route_setSettlementAddress:
	// newSettlementAddress: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setSettlementAddress(address)void
	callsub setSettlementAddress
	int 1
	return

// setSettlementAddress(newSettlementAddress: Address): void
//
// Sets the settlement address to a new value.
//
// @param newSettlementAddress - The new settlement address to set.
setSettlementAddress:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// src/Immersve.algo.ts:619
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:621
	// oldSettlementAddress = this.settlement_address.exists
	//             ? this.settlement_address.value
	//             : globals.zeroAddress
	txna Applications 0
	byte 0x7361 // "sa"
	app_global_get_ex
	swap
	pop
	bz *ternary5_false
	byte 0x7361 // "sa"
	app_global_get
	b *ternary5_end

*ternary5_false:
	global ZeroAddress

*ternary5_end:
	frame_bury 0 // oldSettlementAddress: address

	// src/Immersve.algo.ts:624
	// this.settlement_address.value = newSettlementAddress
	byte 0x7361 // "sa"
	frame_dig -1 // newSettlementAddress: Address
	app_global_put

	// src/Immersve.algo.ts:626
	// this.SettlementAddressChanged.log({
	//             oldSettlementAddress: oldSettlementAddress,
	//             newSettlementAddress: newSettlementAddress,
	//         })
	byte 0xfd535358 // SettlementAddressChanged(address,address)
	frame_dig 0 // oldSettlementAddress: address
	frame_dig -1 // newSettlementAddress: Address
	concat
	concat
	log
	retsub

// settle(uint64,uint64,uint64)void
*abi_route_settle:
	// nonce: uint64
	txna ApplicationArgs 3
	btoi

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute settle(uint64,uint64,uint64)void
	callsub settle
	int 1
	return

// settle(asset: AssetID, amount: uint64, nonce: uint64): void
//
// Settles a payment by transferring an asset to the specified recipient.
// Only the owner of the contract can call this function.
//
// @param asset The asset to be transferred.
// @param amount The amount of the asset to be transferred.
// @param nonce The nonce to prevent duplicate settlements.
settle:
	proto 3 0

	// src/Immersve.algo.ts:641
	// this.onlyOwner()
	callsub onlyOwner

	// src/Immersve.algo.ts:644
	// assert(this.settlement_nonce.value === nonce)
	byte 0x736e // "sn"
	app_global_get
	frame_dig -3 // nonce: uint64
	==
	assert

	// src/Immersve.algo.ts:646
	// sendAssetTransfer({
	//             sender: this.app.address,
	//             assetReceiver: this.settlement_address.value,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// src/Immersve.algo.ts:647
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/Immersve.algo.ts:648
	// assetReceiver: this.settlement_address.value
	byte 0x7361 // "sa"
	app_global_get
	itxn_field AssetReceiver

	// src/Immersve.algo.ts:649
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// src/Immersve.algo.ts:650
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:653
	// this.Settlement.log({
	//             recipient: this.settlement_address.value,
	//             asset: asset,
	//             amount: amount,
	//             nonce: nonce,
	//         })
	byte 0x558046ec // Settlement(address,uint64,uint64,uint64)
	byte 0x7361 // "sa"
	app_global_get
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // amount: uint64
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	concat
	log

	// src/Immersve.algo.ts:661
	// this.settlement_nonce.value = this.settlement_nonce.value + 1
	byte 0x736e // "sn"
	dup
	app_global_get
	int 1
	+
	app_global_put
	retsub

// cardFundEnableAsset(pay,string,address,uint64)void
*abi_route_cardFundEnableAsset:
	// asset: uint64
	txna ApplicationArgs 3
	btoi

	// cardFund: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardFundEnableAsset(pay,string,address,uint64)void
	callsub cardFundEnableAsset
	int 1
	return

// cardFundEnableAsset(mbr: PayTxn, partnerChannel: string, cardFund: Address, asset: AssetID): void
//
// Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
//
// @param partnerChannel Funding Channel name
// @param cardFund Address to add asset to
// @param asset Asset to add
cardFundEnableAsset:
	proto 4 0

	// src/Immersve.algo.ts:673
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, cardFund))
	callsub isOwner
	dup
	bnz *skip_or1
	frame_dig -3 // cardFund: Address
	frame_dig -2 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or1:
	assert

	// src/Immersve.algo.ts:675
	// verifyPayTxn(mbr, {
	//             receiver: this.app.address,
	//             amount: globals.assetOptInMinBalance,
	//         })
	// verify receiver
	frame_dig -1 // mbr: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbr: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==
	assert

	// src/Immersve.algo.ts:680
	// sendPayment({
	//             receiver: cardFund,
	//             amount: globals.assetOptInMinBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/Immersve.algo.ts:681
	// receiver: cardFund
	frame_dig -3 // cardFund: Address
	itxn_field Receiver

	// src/Immersve.algo.ts:682
	// amount: globals.assetOptInMinBalance
	global AssetOptInMinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/Immersve.algo.ts:685
	// this.cardFundAssetOptIn(cardFund, asset)
	frame_dig -4 // asset: AssetID
	frame_dig -3 // cardFund: Address
	callsub cardFundAssetOptIn
	retsub

// cardFundDisableAsset(string,address,uint64)void
*abi_route_cardFundDisableAsset:
	// asset: uint64
	txna ApplicationArgs 3
	btoi

	// cardFund: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundDisableAsset(string,address,uint64)void
	callsub cardFundDisableAsset
	int 1
	return

// cardFundDisableAsset(partnerChannel: string, cardFund: Address, asset: AssetID): void
//
// Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
//
// @param partnerChannel - The funding channel associated with the card.
// @param cardFund - The address of the card.
// @param asset - The ID of the asset to be removed.
cardFundDisableAsset:
	proto 3 0

	// src/Immersve.algo.ts:696
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, cardFund))
	callsub isOwner
	dup
	bnz *skip_or2
	frame_dig -2 // cardFund: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or2:
	assert

	// src/Immersve.algo.ts:698
	// this.cardFundAssetCloseOut(cardFund, asset)
	frame_dig -3 // asset: AssetID
	frame_dig -2 // cardFund: Address
	callsub cardFundAssetCloseOut
	retsub

// cardFundWithdrawalRequest(string,address,address,uint64,uint64)byte[32]
*abi_route_cardFundWithdrawalRequest:
	// The ABI return prefix
	byte 0x151f7c75

	// amount: uint64
	txna ApplicationArgs 5
	btoi

	// asset: uint64
	txna ApplicationArgs 4
	btoi

	// recipient: address
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundWithdrawalRequest(string,address,address,uint64,uint64)byte[32]
	callsub cardFundWithdrawalRequest
	concat
	log
	int 1
	return

// cardFundWithdrawalRequest(partnerChannel: string, card: Address, recipient: Address, asset: AssetID, amount: uint64): bytes32
//
// Allows the Card Holder (or contract owner) to send an amount of assets from the account
// @param partnerChannel Funding Channel name
// @param card Address to withdraw from
// @param asset Asset to withdraw
// @param amount Amount to withdraw
// @returns Withdrawal hash used for completing or cancelling the withdrawal
cardFundWithdrawalRequest:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:718
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, card))
	callsub isOwner
	dup
	bnz *skip_or3
	frame_dig -2 // card: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or3:
	assert

	// src/Immersve.algo.ts:720
	// withdrawal: WithdrawalRequest = {
	//             cardFund: card,
	//             recipient: recipient,
	//             asset: asset,
	//             amount: amount,
	//             timestamp: globals.latestTimestamp + this.withdrawal_wait_time.value,
	//             nonce: this.withdrawal_nonce(this.txn.sender).value,
	//         }
	frame_dig -2 // card: Address
	frame_dig -3 // recipient: Address
	concat
	frame_dig -4 // asset: AssetID
	itob
	concat
	frame_dig -5 // amount: uint64
	itob
	concat
	global LatestTimestamp
	byte 0x777774 // "wwt"
	app_global_get
	+
	itob
	concat
	txn Sender
	byte 0x776e // "wn"
	app_local_get
	itob
	concat
	frame_bury 0 // withdrawal: WithdrawalRequest

	// src/Immersve.algo.ts:728
	// this.withdrawal_nonce(this.txn.sender).value = this.withdrawal_nonce(this.txn.sender).value + 1
	txn Sender
	byte 0x776e // "wn"
	txn Sender
	byte 0x776e // "wn"
	app_local_get
	int 1
	+
	app_local_put

	// src/Immersve.algo.ts:729
	// withdrawal_hash = sha256(rawBytes(withdrawal))
	frame_dig 0 // withdrawal: WithdrawalRequest
	sha256
	frame_bury 1 // withdrawal_hash: byte[32]

	// src/Immersve.algo.ts:731
	// this.withdrawals(this.txn.sender, withdrawal_hash).value = withdrawal
	txn Sender
	frame_dig 1 // withdrawal_hash: byte[32]
	frame_dig 0 // withdrawal: WithdrawalRequest
	app_local_put

	// src/Immersve.algo.ts:733
	// this.WithdrawalRequest.log({
	//             cardFund: withdrawal.cardFund,
	//             recipient: withdrawal.recipient,
	//             asset: withdrawal.asset,
	//             amount: withdrawal.amount,
	//             timestamp: withdrawal.timestamp,
	//             nonce: withdrawal.nonce,
	//         })
	byte 0xd85f620a // WithdrawalRequest(address,address,uint64,uint64,uint64,uint64)
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 0 32
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 32 32
	concat
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 64 8
	btoi
	itob
	concat
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 72 8
	btoi
	itob
	concat
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 80 8
	btoi
	itob
	concat
	frame_dig 0 // withdrawal: WithdrawalRequest
	extract 88 8
	btoi
	itob
	concat
	concat
	log

	// src/Immersve.algo.ts:742
	// return withdrawal_hash;
	frame_dig 1 // withdrawal_hash: byte[32]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// cardFundWithdrawalCancel(string,address,byte[32])void
*abi_route_cardFundWithdrawalCancel:
	// withdrawal_hash: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundWithdrawalCancel(string,address,byte[32])void
	callsub cardFundWithdrawalCancel
	int 1
	return

// cardFundWithdrawalCancel(partnerChannel: string, card: Address, withdrawal_hash: bytes32): void
//
// Allows the Card Holder (or contract owner) to cancel a withdrawal request
// @param partnerChannel Funding Channel name
// @param card Address to withdraw from
// @param withdrawal_hash Hash of the withdrawal request
cardFundWithdrawalCancel:
	proto 3 0

	// src/Immersve.algo.ts:752
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, card))
	callsub isOwner
	dup
	bnz *skip_or4
	frame_dig -2 // card: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or4:
	assert

	// src/Immersve.algo.ts:754
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -3 // withdrawal_hash: bytes32
	app_local_del
	retsub

// cardFundWithdraw(string,address,byte[32])void
*abi_route_cardFundWithdraw:
	// withdrawal_hash: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundWithdraw(string,address,byte[32])void
	callsub cardFundWithdraw
	int 1
	return

// cardFundWithdraw(partnerChannel: string, card: Address, withdrawal_hash: bytes32): void
//
// Allows the Card Holder to send an amount of assets from the account
// @param partnerChannel Funding Channel name
// @param card Address to withdraw from
// @param withdrawal_hash Hash of the withdrawal request
cardFundWithdraw:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:766
	// assert(this.isOwner() || this.isCardFundOwner(partnerChannel, card))
	callsub isOwner
	dup
	bnz *skip_or5
	frame_dig -2 // card: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	||

*skip_or5:
	assert

	// src/Immersve.algo.ts:768
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	frame_dig -3 // withdrawal_hash: bytes32
	frame_bury 0 // storage key//withdrawal

	// src/Immersve.algo.ts:768
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	txn Sender
	frame_bury 1 // storage account//withdrawal

	// src/Immersve.algo.ts:770
	// assert(globals.latestTimestamp >= withdrawal.timestamp || this.isOwner())
	global LatestTimestamp
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	extract 80 8
	btoi
	>=
	dup
	bnz *skip_or6
	callsub isOwner
	||

*skip_or6:
	assert

	// src/Immersve.algo.ts:773
	// this.withdrawFunds(withdrawal)
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	callsub withdrawFunds

	// src/Immersve.algo.ts:776
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -3 // withdrawal_hash: bytes32
	app_local_del
	retsub

// cardFundWithdrawEarly(string,address,byte[32],byte[32])void
*abi_route_cardFundWithdrawEarly:
	// early_withdrawal_sig: byte[32]
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// withdrawal_hash: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partnerChannel: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardFundWithdrawEarly(string,address,byte[32],byte[32])void
	callsub cardFundWithdrawEarly
	int 1
	return

// cardFundWithdrawEarly(partnerChannel: string, card: Address, withdrawal_hash: bytes32, early_withdrawal_sig: bytes32): void
//
// Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.
// @param partnerChannel - The partner channel associated with the card.
// @param card - The address of the card.
// @param withdrawal_hash - The hash of the withdrawal.
// @param early_withdrawal_sig - The signature for early withdrawal.
cardFundWithdrawEarly:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/Immersve.algo.ts:792
	// assert(this.isCardFundOwner(partnerChannel, card))
	frame_dig -2 // card: Address
	frame_dig -1 // partnerChannel: string
	callsub isCardFundOwner
	assert

	// src/Immersve.algo.ts:794
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	frame_dig -3 // withdrawal_hash: bytes32
	frame_bury 0 // storage key//withdrawal

	// src/Immersve.algo.ts:794
	// withdrawal = this.withdrawals(this.txn.sender, withdrawal_hash).value
	txn Sender
	frame_bury 1 // storage account//withdrawal

	// *if1_condition
	// src/Immersve.algo.ts:797
	// globals.latestTimestamp < withdrawal.timestamp
	global LatestTimestamp
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	extract 80 8
	btoi
	<
	bz *if1_end

// *if1_consequent
*while_0:

*while_0_continue:
	// src/Immersve.algo.ts:800
	// globals.opcodeBudget < 2500
	global OpcodeBudget
	int 2500
	<
	bz *while_0_end

	// src/Immersve.algo.ts:801
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit
	b *while_0

*while_0_end:
	// src/Immersve.algo.ts:804
	// assert(ed25519VerifyBare(withdrawal_hash, early_withdrawal_sig, this.early_withdrawal_pubkey.value))
	frame_dig -3 // withdrawal_hash: bytes32
	frame_dig -4 // early_withdrawal_sig: bytes32
	byte 0x6577706b // "ewpk"
	app_global_get
	ed25519verify_bare
	assert

*if1_end:
	// src/Immersve.algo.ts:808
	// this.withdrawFunds(withdrawal)
	frame_dig 1 // storage account//withdrawal
	frame_dig 0 // storage key//withdrawal
	app_local_get
	callsub withdrawFunds

	// src/Immersve.algo.ts:811
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -3 // withdrawal_hash: bytes32
	app_local_del
	retsub

*create_NoOp:
	method "deploy(address)address"
	txna ApplicationArgs 0
	match *abi_route_deploy
	err

*call_NoOp:
	method "owner()address"
	method "transferOwnership(address)void"
	method "setWithdrawalTimeout(uint64)void"
	method "setEarlyWithdrawalPubkey(byte[32])void"
	method "partnerChannelCreate(pay,string)address"
	method "partnerChannelClose(string)void"
	method "cardFundCreate(pay,string,uint64)address"
	method "cardFundClose(string,address,address)void"
	method "cardFundRecover(string,address,address)void"
	method "assetAllowlistAdd(pay,uint64)void"
	method "assetAllowlistRemove(uint64)void"
	method "cardFundDebit(address,uint64,uint64)void"
	method "cardFundRefund(string,address,uint64,uint64)void"
	method "getNextSettlementNonce()uint64"
	method "setSettlementAddress(address)void"
	method "settle(uint64,uint64,uint64)void"
	method "cardFundEnableAsset(pay,string,address,uint64)void"
	method "cardFundDisableAsset(string,address,uint64)void"
	method "cardFundWithdrawalRequest(string,address,address,uint64,uint64)byte[32]"
	method "cardFundWithdrawalCancel(string,address,byte[32])void"
	method "cardFundWithdraw(string,address,byte[32])void"
	method "cardFundWithdrawEarly(string,address,byte[32],byte[32])void"
	txna ApplicationArgs 0
	match *abi_route_owner *abi_route_transferOwnership *abi_route_setWithdrawalTimeout *abi_route_setEarlyWithdrawalPubkey *abi_route_partnerChannelCreate *abi_route_partnerChannelClose *abi_route_cardFundCreate *abi_route_cardFundClose *abi_route_cardFundRecover *abi_route_assetAllowlistAdd *abi_route_assetAllowlistRemove *abi_route_cardFundDebit *abi_route_cardFundRefund *abi_route_getNextSettlementNonce *abi_route_setSettlementAddress *abi_route_settle *abi_route_cardFundEnableAsset *abi_route_cardFundDisableAsset *abi_route_cardFundWithdrawalRequest *abi_route_cardFundWithdrawalCancel *abi_route_cardFundWithdraw *abi_route_cardFundWithdrawEarly
	err

*call_OptIn:
	method "cardFundWithdrawalRequest(string,address,address,uint64,uint64)byte[32]"
	txna ApplicationArgs 0
	match *abi_route_cardFundWithdrawalRequest
	err

*call_CloseOut:
	method "cardFundWithdraw(string,address,byte[32])void"
	txna ApplicationArgs 0
	match *abi_route_cardFundWithdraw
	err

*call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match *abi_route_update
	err

*call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match *abi_route_destroy
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub