{
  "hints": {
    "deploy()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setAdmin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setWithdrawalRounds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardCreate(pay,string,address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardClose(string,address,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardAddAsset(pay,string,account,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRemoveAsset(string,account,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDebit(account,account,asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdrawalRequest(string,account,asset,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardWithdrawalCancel(string,account,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdraw(string,account,account,asset,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "n"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "a"
        },
        "active_cards": {
          "type": "uint64",
          "key": "c"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "w"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjgyLjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIGNhbGxfT3B0SW4gY2FsbF9DbG9zZU91dCBOT1RfSU1QTEVNRU5URUQgY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiBjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQKCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gaXNfYWRtaW4oKTogYm9vbGVhbgovLwovLyBDaGVjayBpZiB0aGUgY3VycmVudCB0cmFuc2FjdGlvbiBzZW5kZXIgaXMgdGhlIGFkbWluCi8vIEByZXR1cm5zIFRydWUgaWYgdGhlIHNlbmRlciBpcyB0aGUgYWRtaW4KaXNfYWRtaW46Cglwcm90byAwIDEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo1OAoJLy8gcmV0dXJuIHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbi52YWx1ZTsKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MSAvLyAiYSIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJcmV0c3ViCgovLyBpc19vd25lcihwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFkZHJlc3MpOiBib29sZWFuCi8vCi8vIENoZWNrIGlmIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uIHNlbmRlciBpcyB0aGUgb3duZXIgb2YgdGhlIGNhcmQgYWNjb3VudAovLyBAcGFyYW0gY2FyZCBBZGRyZXNzIHRvIGNoZWNrCi8vIEByZXR1cm5zIFRydWUgaWYgdGhlIHNlbmRlciBpcyB0aGUgb3duZXIgb2YgdGhlIGNhcmQKaXNfb3duZXI6Cglwcm90byAyIDEKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo2NwoJLy8gcmV0dXJuIHRoaXMuY2FyZHMoe3BhcnRuZXI6IHBhcnRuZXIsIG93bmVyOiB0aGlzLnR4bi5zZW5kZXJ9IGFzIFBhcnRuZXJBbmRPd25lcikudmFsdWUgPT09IGNhcmQ7CglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDIyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50Cgl0eG4gU2VuZGVyCgljYWxsc3ViIHByb2Nlc3Nfc3RhdGljX3R1cGxlX2VsZW1lbnQKCXBvcCAvLyBwb3AgaGVhZCBvZmZzZXQKCWNvbmNhdCAvLyBjb25jYXQgaGVhZCBhbmQgdGFpbAoJYm94X2dldAoJYXNzZXJ0CglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWRkcmVzcwoJPT0KCXJldHN1YgoKLy8gZGVwbG95KCl2b2lkCmFiaV9yb3V0ZV9kZXBsb3k6CgkvLyBleGVjdXRlIGRlcGxveSgpdm9pZAoJY2FsbHN1YiBkZXBsb3kKCWludCAxCglyZXR1cm4KCi8vIGRlcGxveSgpOiB2b2lkCi8vCi8vIERlcGxveSB0aGUgc21hcnQgY29udHJhY3QsIHNldHRpbmcgdGhlIHRyYW5zYWN0aW9uIHNlbmRlciBhcyB0aGUgYWRtaW4KZGVwbG95OgoJcHJvdG8gMCAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6NzUKCS8vIHRoaXMuYWRtaW4udmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGUgMHg2MSAvLyAiYSIKCXR4biBTZW5kZXIKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHVwZGF0ZSgpdm9pZAphYmlfcm91dGVfdXBkYXRlOgoJLy8gZXhlY3V0ZSB1cGRhdGUoKXZvaWQKCWNhbGxzdWIgdXBkYXRlCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGUoKTogdm9pZAovLwovLyBBbGxvd3MgdGhlIGFkbWluIHRvIHVwZGF0ZSB0aGUgc21hcnQgY29udHJhY3QKdXBkYXRlOgoJcHJvdG8gMCAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6ODMKCS8vIGFzc2VydCh0aGlzLmlzX2FkbWluKCkpCgljYWxsc3ViIGlzX2FkbWluCglhc3NlcnQKCXJldHN1YgoKLy8gZGVzdHJveSgpdm9pZAphYmlfcm91dGVfZGVzdHJveToKCS8vIGV4ZWN1dGUgZGVzdHJveSgpdm9pZAoJY2FsbHN1YiBkZXN0cm95CglpbnQgMQoJcmV0dXJuCgovLyBkZXN0cm95KCk6IHZvaWQKLy8KLy8gRGVzdHJveSB0aGUgc21hcnQgY29udHJhY3QsIHNlbmRpbmcgYWxsIEFsZ28gdG8gdGhlIGFkbWluIGFjY291bnQuIFRoaXMgY2FuIG9ubHkgYmUgZG9uZSBpZiB0aGVyZSBhcmUgbm8gYWN0aXZlIGNhcmRzCmRlc3Ryb3k6Cglwcm90byAwIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czo5MQoJLy8gYXNzZXJ0KHRoaXMuaXNfYWRtaW4oKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjk0CgkvLyBhc3NlcnQoIXRoaXMuYWN0aXZlX2NhcmRzLnZhbHVlKQoJYnl0ZSAweDYzIC8vICJjIgoJYXBwX2dsb2JhbF9nZXQKCSEKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjk2CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIGFtb3VudDogMCwKCS8vICAgICAgICAgICAgIGNsb3NlUmVtYWluZGVyVG86IHRoaXMuYWRtaW4udmFsdWUsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6OTcKCS8vIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjk4CgkvLyBhbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjk5CgkvLyBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLmFkbWluLnZhbHVlCglieXRlIDB4NjEgLy8gImEiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBzZXRBZG1pbihhZGRyZXNzKXZvaWQKYWJpX3JvdXRlX3NldEFkbWluOgoJLy8gYWRtaW46IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldEFkbWluKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBzZXRBZG1pbgoJaW50IDEKCXJldHVybgoKLy8gc2V0QWRtaW4oYWRtaW46IEFkZHJlc3MpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgY3VycmVudCBhZG1pbiB0byBzZXQgYSBuZXcgYWRtaW4KLy8gQHBhcmFtIGFkbWluIEFkZHJlc3MgdG8gYmUgbWFkZSBhZG1pbgpzZXRBZG1pbjoKCXByb3RvIDEgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjEwOAoJLy8gYXNzZXJ0KHRoaXMuaXNfYWRtaW4oKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjExMAoJLy8gdGhpcy5hZG1pbi52YWx1ZSA9IGFkbWluCglieXRlIDB4NjEgLy8gImEiCglmcmFtZV9kaWcgLTEgLy8gYWRtaW46IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHNldFdpdGhkcmF3YWxSb3VuZHModWludDY0KXZvaWQKYWJpX3JvdXRlX3NldFdpdGhkcmF3YWxSb3VuZHM6CgkvLyByb3VuZHM6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgc2V0V2l0aGRyYXdhbFJvdW5kcyh1aW50NjQpdm9pZAoJY2FsbHN1YiBzZXRXaXRoZHJhd2FsUm91bmRzCglpbnQgMQoJcmV0dXJuCgovLyBzZXRXaXRoZHJhd2FsUm91bmRzKHJvdW5kczogdWludDY0KTogdm9pZAovLwovLyBTZXQgdGhlIG51bWJlciBvZiByb3VuZHMgYSB3aXRoZHJhd2FsIHJlcXVlc3QgbXVzdCB3YWl0IHVudGlsIGJlaW5nIHdpdGhkcmF3bgovLyBAcGFyYW0gcm91bmRzIE5ldyBudW1iZXIgb2Ygcm91bmRzIHRvIHdhaXQKc2V0V2l0aGRyYXdhbFJvdW5kczoKCXByb3RvIDEgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjExOAoJLy8gYXNzZXJ0KHRoaXMuaXNfYWRtaW4oKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjEyMAoJLy8gdGhpcy53aXRoZHJhd2FsX3dhaXRfdGltZS52YWx1ZSA9IHJvdW5kcwoJYnl0ZSAweDc3IC8vICJ3IgoJZnJhbWVfZGlnIC0xIC8vIHJvdW5kczogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjYXJkQ3JlYXRlKHBheSxzdHJpbmcsYWRkcmVzcylhZGRyZXNzCmFiaV9yb3V0ZV9jYXJkQ3JlYXRlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBvd25lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBtYnI6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkQ3JlYXRlKHBheSxzdHJpbmcsYWRkcmVzcylhZGRyZXNzCgljYWxsc3ViIGNhcmRDcmVhdGUKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkQ3JlYXRlKG1icjogUGF5VHhuLCBwYXJ0bmVyOiBzdHJpbmcsIG93bmVyOiBBZGRyZXNzKTogQWRkcmVzcwovLwovLyBDcmVhdGUgYWNjb3VudC4gVGhpcyBnZW5lcmF0ZXMgYSBicmFuZCBuZXcgYWNjb3VudCBhbmQgZnVuZHMgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudAovLyBAcGFyYW0gb3duZXIgQWRkcmVzcyB0byBoYXZlIGNvbnRyb2wgb3ZlciBhc3NldCB3aXRoZHJhd2FscwovLyBAcmV0dXJucyBOZXdseSBnZW5lcmF0ZWQgYWNjb3VudCB1c2VkIGJ5IHRoZWlyIGNhcmQKY2FyZENyZWF0ZToKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTI5CgkvLyBhc3NlcnQodGhpcy5pc19hZG1pbigpKQoJY2FsbHN1YiBpc19hZG1pbgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTMxCgkvLyBhc3NlcnQobWJyLmFtb3VudCA9PT0gZ2xvYmFscy5taW5CYWxhbmNlICsgYm94X21icikKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgTWluQmFsYW5jZQoJaW50IDQwOTAwCgkrCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTMyCgkvLyBhc3NlcnQobWJyLnJlY2VpdmVyID09PSB0aGlzLmFwcC5hZGRyZXNzKQoJZnJhbWVfZGlnIC0xIC8vIG1icjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxMzUKCS8vIGNhcmRfYWRkciA9IHNlbmRNZXRob2RDYWxsPFtdLCBBZGRyZXNzPih7CgkvLyAgICAgICAgICAgICBuYW1lOiAibmV3IiwKCS8vICAgICAgICAgICAgIG9uQ29tcGxldGlvbjogT25Db21wbGV0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uLAoJLy8gICAgICAgICAgICAgYXBwcm92YWxQcm9ncmFtOiBDYXJkLmFwcHJvdmFsUHJvZ3JhbSgpLAoJLy8gICAgICAgICAgICAgY2xlYXJTdGF0ZVByb2dyYW06IENhcmQuY2xlYXJQcm9ncmFtKCksCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJbWV0aG9kICJuZXcoKWFkZHJlc3MiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjEzNwoJLy8gb25Db21wbGV0aW9uOiBPbkNvbXBsZXRpb24uRGVsZXRlQXBwbGljYXRpb24KCWludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjEzOAoJLy8gYXBwcm92YWxQcm9ncmFtOiBDYXJkLmFwcHJvdmFsUHJvZ3JhbSgpCglieXRlIGI2NCBDaUFDQVFBeEdCU0JCZ3N4R1FpTkRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSndDQUJCVWZmSFdJQUFSUXNDSkRpZ0FCc1NLeUVESUtzZ2Nqc2dneURySWdJN0lCc3pJS2lZQUVWaDB2NmpZYUFJNEIvODBBCglpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjEzOQoJLy8gY2xlYXJTdGF0ZVByb2dyYW06IENhcmQuY2xlYXJQcm9ncmFtKCkKCWJ5dGUgYjY0IENnPT0KCWl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWZyYW1lX2J1cnkgMCAvLyBjYXJkX2FkZHI6IGFkZHJlc3MKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNDMKCS8vIHNlbmRQYXltZW50KHsKCS8vICAgICAgICAgICAgIHJlY2VpdmVyOiBjYXJkX2FkZHIsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMubWluQmFsYW5jZSwKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNDQKCS8vIHJlY2VpdmVyOiBjYXJkX2FkZHIKCWZyYW1lX2RpZyAwIC8vIGNhcmRfYWRkcjogYWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE0NQoJLy8gYW1vdW50OiBnbG9iYWxzLm1pbkJhbGFuY2UKCWdsb2JhbCBNaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxNDkKCS8vIHRoaXMuY2FyZHMoeyBwYXJ0bmVyOiBwYXJ0bmVyLCBvd25lcjogb3duZXJ9IGFzIFBhcnRuZXJBbmRPd25lcikudmFsdWUgPSBjYXJkX2FkZHIKCWJ5dGUgMHggLy8gaW5pdGlhbCBoZWFkCglieXRlIDB4IC8vIGluaXRpYWwgdGFpbAoJYnl0ZSAweDAwMjIgLy8gaW5pdGlhbCBoZWFkIG9mZnNldAoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXI6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNhbGxzdWIgcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQKCWZyYW1lX2RpZyAtMyAvLyBvd25lcjogQWRkcmVzcwoJY2FsbHN1YiBwcm9jZXNzX3N0YXRpY190dXBsZV9lbGVtZW50Cglwb3AgLy8gcG9wIGhlYWQgb2Zmc2V0Cgljb25jYXQgLy8gY29uY2F0IGhlYWQgYW5kIHRhaWwKCWZyYW1lX2RpZyAwIC8vIGNhcmRfYWRkcjogYWRkcmVzcwoJYm94X3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE1MgoJLy8gdGhpcy5hY3RpdmVfY2FyZHMudmFsdWUgPSB0aGlzLmFjdGl2ZV9jYXJkcy52YWx1ZSArIDEKCWJ5dGUgMHg2MyAvLyAiYyIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWludCAxCgkrCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE1NQoJLy8gcmV0dXJuIGNhcmRfYWRkcjsKCWZyYW1lX2RpZyAwIC8vIGNhcmRfYWRkcjogYWRkcmVzcwoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBjYXJkQ2xvc2Uoc3RyaW5nLGFkZHJlc3MsYWNjb3VudCl2b2lkCmFiaV9yb3V0ZV9jYXJkQ2xvc2U6CgkvLyBjYXJkOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIG93bmVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZENsb3NlKHN0cmluZyxhZGRyZXNzLGFjY291bnQpdm9pZAoJY2FsbHN1YiBjYXJkQ2xvc2UKCWludCAxCglyZXR1cm4KCi8vIGNhcmRDbG9zZShwYXJ0bmVyOiBzdHJpbmcsIG93bmVyOiBBZGRyZXNzLCBjYXJkOiBBY2NvdW50KTogdm9pZAovLwovLyBDbG9zZSBhY2NvdW50LiBUaGlzIHBlcm1hbmVudGx5IHJlbW92ZXMgdGhlIHJla2V5IGFuZCBkZWxldGVzIHRoZSBhY2NvdW50IGZyb20gdGhlIGxlZGdlcgovLyBAcGFyYW0gcGFydG5lciBQYXJ0bmVyIG5hbWUKLy8gQHBhcmFtIG93bmVyIEFkZHJlc3Mgd2hpY2ggaGFzIGNvbnRyb2wgb3ZlciBhc3NldCB3aXRoZHJhd2FscwovLyBAcGFyYW0gY2FyZCBBY2NvdW50IHRvIGNsb3NlCmNhcmRDbG9zZToKCXByb3RvIDMgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE2NQoJLy8gYXNzZXJ0KHRoaXMuaXNfYWRtaW4oKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE2NwoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBjYXJkLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IDAsCgkvLyAgICAgICAgICAgICBjbG9zZVJlbWFpbmRlclRvOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTY4CgkvLyBzZW5kZXI6IGNhcmQKCWZyYW1lX2RpZyAtMyAvLyBjYXJkOiBBY2NvdW50CglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE2OQoJLy8gcmVjZWl2ZXI6IGNhcmQKCWZyYW1lX2RpZyAtMyAvLyBjYXJkOiBBY2NvdW50CglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTcwCgkvLyBhbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE3MQoJLy8gY2xvc2VSZW1haW5kZXJUbzogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIENsb3NlUmVtYWluZGVyVG8KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTc0CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBib3hfbWJyLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE3NQoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE3NgoJLy8gYW1vdW50OiBib3hfbWJyCglpbnQgNDA5MDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE4MAoJLy8gdGhpcy5jYXJkcyh7cGFydG5lcjogcGFydG5lciwgb3duZXI6IG93bmVyfSBhcyBQYXJ0bmVyQW5kT3duZXIpLmRlbGV0ZSgpCglieXRlIDB4IC8vIGluaXRpYWwgaGVhZAoJYnl0ZSAweCAvLyBpbml0aWFsIHRhaWwKCWJ5dGUgMHgwMDIyIC8vIGluaXRpYWwgaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CgljYWxsc3ViIHByb2Nlc3NfZHluYW1pY190dXBsZV9lbGVtZW50CglmcmFtZV9kaWcgLTIgLy8gb3duZXI6IEFkZHJlc3MKCWNhbGxzdWIgcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudAoJcG9wIC8vIHBvcCBoZWFkIG9mZnNldAoJY29uY2F0IC8vIGNvbmNhdCBoZWFkIGFuZCB0YWlsCglib3hfZGVsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTgzCgkvLyB0aGlzLmFjdGl2ZV9jYXJkcy52YWx1ZSA9IHRoaXMuYWN0aXZlX2NhcmRzLnZhbHVlIC0gMQoJYnl0ZSAweDYzIC8vICJjIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCS0KCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNhcmRBZGRBc3NldChwYXksc3RyaW5nLGFjY291bnQsYXNzZXQpdm9pZAphYmlfcm91dGVfY2FyZEFkZEFzc2V0OgoJLy8gYXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBjYXJkOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBtYnI6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjYXJkQWRkQXNzZXQocGF5LHN0cmluZyxhY2NvdW50LGFzc2V0KXZvaWQKCWNhbGxzdWIgY2FyZEFkZEFzc2V0CglpbnQgMQoJcmV0dXJuCgovLyBjYXJkQWRkQXNzZXQobWJyOiBQYXlUeG4sIHBhcnRuZXI6IHN0cmluZywgY2FyZDogQWNjb3VudCwgYXNzZXQ6IEFzc2V0KTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG93bmVyIChvciBhZG1pbikgdG8gT3B0SW4gdG8gYW4gYXNzZXQsIGluY3JlYXNpbmcgdGhlIG1pbmltdW0gYmFsYW5jZSByZXF1aXJlbWVudCBvZiB0aGUgYWNjb3VudAovLyBAcGFyYW0gcGFydG5lciBQYXJ0bmVyIG5hbWUKLy8gQHBhcmFtIGNhcmQgQWNjb3VudCB0byBhZGQgYXNzZXQgdG8KLy8gQHBhcmFtIGFzc2V0IEFzc2V0IHRvIGFkZApjYXJkQWRkQXNzZXQ6Cglwcm90byA0IDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxOTMKCS8vIGFzc2VydCh0aGlzLmlzX2FkbWluKCkgfHwgdGhpcy5pc19vd25lcihwYXJ0bmVyLCBjYXJkKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWR1cAoJYm56IHNraXBfb3IwCglmcmFtZV9kaWcgLTMgLy8gY2FyZDogQWNjb3VudAoJZnJhbWVfZGlnIC0yIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc19vd25lcgoJfHwKCnNraXBfb3IwOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTk1CgkvLyBhc3NlcnQobWJyLmFtb3VudCA9PT0gZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZSkKCWZyYW1lX2RpZyAtMSAvLyBtYnI6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCT09Cglhc3NlcnQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoxOTYKCS8vIGFzc2VydChtYnIucmVjZWl2ZXIgPT09IHRoaXMuYXBwLmFkZHJlc3MpCglmcmFtZV9kaWcgLTEgLy8gbWJyOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjE5OAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MTk5CgkvLyByZWNlaXZlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFjY291bnQKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMDAKCS8vIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMDMKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogY2FyZCwKCS8vICAgICAgICAgICAgIGFzc2V0UmVjZWl2ZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IDAsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMDQKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0zIC8vIGNhcmQ6IEFjY291bnQKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjA1CgkvLyBhc3NldFJlY2VpdmVyOiBjYXJkCglmcmFtZV9kaWcgLTMgLy8gY2FyZDogQWNjb3VudAoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjA2CgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTQgLy8gYXNzZXQ6IEFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIwNwoJLy8gYXNzZXRBbW91bnQ6IDAKCWludCAwCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBjYXJkUmVtb3ZlQXNzZXQoc3RyaW5nLGFjY291bnQsYXNzZXQpdm9pZAphYmlfcm91dGVfY2FyZFJlbW92ZUFzc2V0OgoJLy8gYXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBjYXJkOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIHBhcnRuZXI6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIGNhcmRSZW1vdmVBc3NldChzdHJpbmcsYWNjb3VudCxhc3NldCl2b2lkCgljYWxsc3ViIGNhcmRSZW1vdmVBc3NldAoJaW50IDEKCXJldHVybgoKLy8gY2FyZFJlbW92ZUFzc2V0KHBhcnRuZXI6IHN0cmluZywgY2FyZDogQWNjb3VudCwgYXNzZXQ6IEFzc2V0KTogdm9pZAovLwovLyBBbGxvd3MgdGhlIG93bmVyIChvciBhZG1pbikgdG8gQ2xvc2VPdXQgb2YgYW4gYXNzZXQsIHJlZHVjaW5nIHRoZSBtaW5pbXVtIGJhbGFuY2UgcmVxdWlyZW1lbnQgb2YgdGhlIGFjY291bnQKLy8gQHBhcmFtIHBhcnRuZXIgUGFydG5lciBuYW1lCi8vIEBwYXJhbSBjYXJkIEFjY291bnQgdG8gcmVtb3ZlIGFzc2V0IGZyb20KLy8gQHBhcmFtIGFzc2V0IEFzc2V0IHRvIHJlbW92ZQpjYXJkUmVtb3ZlQXNzZXQ6Cglwcm90byAzIDAKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMTgKCS8vIGFzc2VydCh0aGlzLmlzX2FkbWluKCkgfHwgdGhpcy5pc19vd25lcihwYXJ0bmVyLCBjYXJkKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWR1cAoJYm56IHNraXBfb3IxCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWNjb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc19vd25lcgoJfHwKCnNraXBfb3IxOgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjIwCgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICBhc3NldFJlY2VpdmVyOiBjYXJkLAoJLy8gICAgICAgICAgICAgYXNzZXRDbG9zZVRvOiBjYXJkLAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjIxCgkvLyBzZW5kZXI6IGNhcmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkOiBBY2NvdW50CglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIyMgoJLy8gYXNzZXRSZWNlaXZlcjogY2FyZAoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFjY291bnQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIyMwoJLy8gYXNzZXRDbG9zZVRvOiBjYXJkCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWNjb3VudAoJaXR4bl9maWVsZCBBc3NldENsb3NlVG8KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMjQKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjI1CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjI4CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IGNhcmQsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBnbG9iYWxzLmFzc2V0T3B0SW5NaW5CYWxhbmNlLAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjIyOQoJLy8gc2VuZGVyOiBjYXJkCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWNjb3VudAoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMzAKCS8vIHJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgUmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyMzEKCS8vIGFtb3VudDogZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZQoJZ2xvYmFsIEFzc2V0T3B0SW5NaW5CYWxhbmNlCglpdHhuX2ZpZWxkIEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gY2FyZERlYml0KGFjY291bnQsYWNjb3VudCxhc3NldCx1aW50NjQpdm9pZAphYmlfcm91dGVfY2FyZERlYml0OgoJLy8gYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBhc3NldDogYXNzZXQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCXR4bmFzIEFzc2V0cwoKCS8vIHJlY2lwaWVudDogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoJdHhuYXMgQWNjb3VudHMKCgkvLyBjYXJkOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgY2FyZERlYml0KGFjY291bnQsYWNjb3VudCxhc3NldCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjYXJkRGViaXQKCWludCAxCglyZXR1cm4KCi8vIGNhcmREZWJpdChjYXJkOiBBY2NvdW50LCByZWNpcGllbnQ6IEFjY291bnQsIGFzc2V0OiBBc3NldCwgYW1vdW50OiB1aW50NjQpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgYWRtaW4gdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIGNhcmQgQWNjb3VudCB0byBkZWJpdCBmcm9tCi8vIEBwYXJhbSByZWNpcGllbnQgUmVjZWl2ZXIgb2YgdGhlIGFzc2V0cyBiZWluZyBkZWJpdGVkCi8vIEBwYXJhbSBhc3NldCBBc3NldCBiZWluZyBkZWJpdGVkCi8vIEBwYXJhbSBhbW91bnQgQW1vdW50IHRvIGRlYml0CmNhcmREZWJpdDoKCXByb3RvIDQgMAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI0MwoJLy8gYXNzZXJ0KHRoaXMuaXNfYWRtaW4oKSkKCWNhbGxzdWIgaXNfYWRtaW4KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI0NQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBjYXJkLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogcmVjaXBpZW50LAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNDYKCS8vIHNlbmRlcjogY2FyZAoJZnJhbWVfZGlnIC0xIC8vIGNhcmQ6IEFjY291bnQKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjQ3CgkvLyBhc3NldFJlY2VpdmVyOiByZWNpcGllbnQKCWZyYW1lX2RpZyAtMiAvLyByZWNpcGllbnQ6IEFjY291bnQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI0OAoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0OiBBc3NldAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czoyNDkKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtNCAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gY2FyZFdpdGhkcmF3YWxSZXF1ZXN0KHN0cmluZyxhY2NvdW50LGFzc2V0LHVpbnQ2NClieXRlWzMyXQphYmlfcm91dGVfY2FyZFdpdGhkcmF3YWxSZXF1ZXN0OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBhbW91bnQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoKCS8vIGFzc2V0OiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gY2FyZDogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoJdHhuYXMgQWNjb3VudHMKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjYXJkV2l0aGRyYXdhbFJlcXVlc3Qoc3RyaW5nLGFjY291bnQsYXNzZXQsdWludDY0KWJ5dGVbMzJdCgljYWxsc3ViIGNhcmRXaXRoZHJhd2FsUmVxdWVzdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNhcmRXaXRoZHJhd2FsUmVxdWVzdChwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFjY291bnQsIGFzc2V0OiBBc3NldCwgYW1vdW50OiB1aW50NjQpOiBieXRlczMyCi8vCi8vIEFsbG93cyB0aGUgb3duZXIgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIHBhcnRuZXIgUGFydG5lciBuYW1lCi8vIEBwYXJhbSBjYXJkIEFjY291bnQgdG8gd2l0aGRyYXcgZnJvbQovLyBAcGFyYW0gYXNzZXQgQXNzZXQgYmVpbmcgd2l0aGRyYXduCi8vIEBwYXJhbSBhbW91bnQgQW1vdW50IHRvIHdpdGhkcmF3Ci8vIEByZXR1cm5zIFdpdGhkcmF3YWwgaGFzaCB1c2VkIGZvciBjb21wbGV0aW5nIG9yIGNhbmNlbGxpbmcgdGhlIHdpdGhkcmF3YWwKY2FyZFdpdGhkcmF3YWxSZXF1ZXN0OgoJcHJvdG8gNCAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI2NAoJLy8gYXNzZXJ0KHRoaXMuaXNfb3duZXIocGFydG5lciwgY2FyZCkpCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWNjb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc19vd25lcgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjY2CgkvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdCA9IHsKCS8vICAgICAgICAgICAgIG5vbmNlOiB0aGlzLndpdGhkcmF3YWxfbm9uY2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSwKCS8vICAgICAgICAgICAgIHJvdW5kOiBnbG9iYWxzLnJvdW5kICsgdGhpcy53aXRoZHJhd2FsX3dhaXRfdGltZS52YWx1ZSwKCS8vICAgICAgICAgICAgIGFzc2V0OiBhc3NldCwKCS8vICAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAoJLy8gICAgICAgICB9Cgl0eG4gU2VuZGVyCglieXRlIDB4NmUgLy8gIm4iCglhcHBfbG9jYWxfZ2V0CglpdG9iCglnbG9iYWwgUm91bmQKCWJ5dGUgMHg3NyAvLyAidyIKCWFwcF9nbG9iYWxfZ2V0CgkrCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhc3NldDogQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC00IC8vIGFtb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3MgoJLy8gdGhpcy53aXRoZHJhd2FsX25vbmNlKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSB0aGlzLndpdGhkcmF3YWxfbm9uY2UodGhpcy50eG4uc2VuZGVyKS52YWx1ZSArIDEKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZSAvLyAibiIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2ZSAvLyAibiIKCWFwcF9sb2NhbF9nZXQKCWludCAxCgkrCglhcHBfbG9jYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjczCgkvLyB3aXRoZHJhd2FsX2hhc2ggPSBzaGEyNTYocmF3Qnl0ZXMod2l0aGRyYXdhbCkpCglmcmFtZV9kaWcgMCAvLyB3aXRoZHJhd2FsOiBXaXRoZHJhd2FsUmVxdWVzdAoJc2hhMjU2CglmcmFtZV9idXJ5IDEgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI3NQoJLy8gdGhpcy53aXRoZHJhd2FscygKCS8vICAgICAgICAgICAgIHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIHdpdGhkcmF3YWxfaGFzaCwKCS8vICAgICAgICAgKS52YWx1ZSA9IHdpdGhkcmF3YWwKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAxIC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZVszMl0KCWZyYW1lX2RpZyAwIC8vIHdpdGhkcmF3YWw6IFdpdGhkcmF3YWxSZXF1ZXN0CglhcHBfbG9jYWxfcHV0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjgwCgkvLyByZXR1cm4gd2l0aGRyYXdhbF9oYXNoOwoJZnJhbWVfZGlnIDEgLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gY2FyZFdpdGhkcmF3YWxDYW5jZWwoc3RyaW5nLGFjY291bnQsYnl0ZVszMl0pdm9pZAphYmlfcm91dGVfY2FyZFdpdGhkcmF3YWxDYW5jZWw6CgkvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVbMzJdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gY2FyZDogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoJdHhuYXMgQWNjb3VudHMKCgkvLyBwYXJ0bmVyOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjYXJkV2l0aGRyYXdhbENhbmNlbChzdHJpbmcsYWNjb3VudCxieXRlWzMyXSl2b2lkCgljYWxsc3ViIGNhcmRXaXRoZHJhd2FsQ2FuY2VsCglpbnQgMQoJcmV0dXJuCgovLyBjYXJkV2l0aGRyYXdhbENhbmNlbChwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFjY291bnQsIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMik6IHZvaWQKLy8KLy8gQWxsb3dzIHRoZSBvd25lciAob3IgYWRtaW4pIHRvIGNhbmNlbCBhIHdpdGhkcmF3YWwgcmVxdWVzdAovLyBAcGFyYW0gcGFydG5lciBQYXJ0bmVyIG5hbWUKLy8gQHBhcmFtIGNhcmQgQWNjb3VudCB0byB3aXRoZHJhdyBmcm9tCi8vIEBwYXJhbSB3aXRoZHJhd2FsX2hhc2ggSGFzaCBvZiB0aGUgd2l0aGRyYXdhbCByZXF1ZXN0CmNhcmRXaXRoZHJhd2FsQ2FuY2VsOgoJcHJvdG8gMyAwCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MjkwCgkvLyBhc3NlcnQodGhpcy5pc19hZG1pbigpIHx8IHRoaXMuaXNfb3duZXIocGFydG5lciwgY2FyZCkpCgljYWxsc3ViIGlzX2FkbWluCglkdXAKCWJueiBza2lwX29yMgoJZnJhbWVfZGlnIC0yIC8vIGNhcmQ6IEFjY291bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXJ0bmVyOiBzdHJpbmcKCWNhbGxzdWIgaXNfb3duZXIKCXx8Cgpza2lwX29yMjoKCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjI5MgoJLy8gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkuZGVsZXRlKCkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMyAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWFwcF9sb2NhbF9kZWwKCXJldHN1YgoKLy8gY2FyZFdpdGhkcmF3KHN0cmluZyxhY2NvdW50LGFjY291bnQsYXNzZXQsYnl0ZVszMl0pdm9pZAphYmlfcm91dGVfY2FyZFdpdGhkcmF3OgoJLy8gd2l0aGRyYXdhbF9oYXNoOiBieXRlWzMyXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFzc2V0OiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gcmVjaXBpZW50OiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGNhcmQ6IGFjY291bnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCXR4bmFzIEFjY291bnRzCgoJLy8gcGFydG5lcjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY2FyZFdpdGhkcmF3KHN0cmluZyxhY2NvdW50LGFjY291bnQsYXNzZXQsYnl0ZVszMl0pdm9pZAoJY2FsbHN1YiBjYXJkV2l0aGRyYXcKCWludCAxCglyZXR1cm4KCi8vIGNhcmRXaXRoZHJhdyhwYXJ0bmVyOiBzdHJpbmcsIGNhcmQ6IEFjY291bnQsIHJlY2lwaWVudDogQWNjb3VudCwgYXNzZXQ6IEFzc2V0LCB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIpOiB2b2lkCi8vCi8vIEFsbG93cyB0aGUgb3duZXIgdG8gc2VuZCBhbiBhbW91bnQgb2YgYXNzZXRzIGZyb20gdGhlIGFjY291bnQKLy8gQHBhcmFtIHBhcnRuZXIgUGFydG5lciBuYW1lCi8vIEBwYXJhbSBjYXJkIEFjY291bnQgdG8gd2l0aGRyYXcgZnJvbQovLyBAcGFyYW0gcmVjaXBpZW50IFJlY2VpdmVyIG9mIHRoZSBhc3NldHMgYmVpbmcgd2l0aGRyYXduCi8vIEBwYXJhbSBhc3NldCBBc3NldCBiZWluZyB3aXRoZHJhd24KLy8gQHBhcmFtIHdpdGhkcmF3YWxfaGFzaCBIYXNoIG9mIHRoZSB3aXRoZHJhd2FsIHJlcXVlc3QKY2FyZFdpdGhkcmF3OgoJcHJvdG8gNSAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwNgoJLy8gYXNzZXJ0KHRoaXMuaXNfb3duZXIocGFydG5lciwgY2FyZCkpCglmcmFtZV9kaWcgLTIgLy8gY2FyZDogQWNjb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBhcnRuZXI6IHN0cmluZwoJY2FsbHN1YiBpc19vd25lcgoJYXNzZXJ0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzA4CgkvLyB3aXRoZHJhd2FsID0gdGhpcy53aXRoZHJhd2Fscyh0aGlzLnR4bi5zZW5kZXIsIHdpdGhkcmF3YWxfaGFzaCkudmFsdWUKCWZyYW1lX2RpZyAtNSAvLyB3aXRoZHJhd2FsX2hhc2g6IGJ5dGVzMzIKCWZyYW1lX2J1cnkgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMwOAoJLy8gd2l0aGRyYXdhbCA9IHRoaXMud2l0aGRyYXdhbHModGhpcy50eG4uc2VuZGVyLCB3aXRoZHJhd2FsX2hhc2gpLnZhbHVlCgl0eG4gU2VuZGVyCglmcmFtZV9idXJ5IDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzEwCgkvLyBhc3NlcnQoZ2xvYmFscy5yb3VuZCA+PSB3aXRoZHJhd2FsLnJvdW5kKQoJZ2xvYmFsIFJvdW5kCglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDggOAoJYnRvaQoJPj0KCWFzc2VydAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxMgoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiBjYXJkLAoJLy8gICAgICAgICAgICAgYXNzZXRSZWNlaXZlcjogcmVjaXBpZW50LAoJLy8gICAgICAgICAgICAgeGZlckFzc2V0OiB3aXRoZHJhd2FsLmFzc2V0LAoJLy8gICAgICAgICAgICAgYXNzZXRBbW91bnQ6IHdpdGhkcmF3YWwuYW1vdW50LAoJLy8gICAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzEzCgkvLyBzZW5kZXI6IGNhcmQKCWZyYW1lX2RpZyAtMiAvLyBjYXJkOiBBY2NvdW50CglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxNAoJLy8gYXNzZXRSZWNlaXZlcjogcmVjaXBpZW50CglmcmFtZV9kaWcgLTMgLy8gcmVjaXBpZW50OiBBY2NvdW50CglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBzcmMvSW1tZXJzdmUuYWxnby50czozMTUKCS8vIHhmZXJBc3NldDogd2l0aGRyYXdhbC5hc3NldAoJZnJhbWVfZGlnIDEgLy8gc3RvcmFnZSBhY2NvdW50Ly93aXRoZHJhd2FsCglmcmFtZV9kaWcgMCAvLyBzdG9yYWdlIGtleS8vd2l0aGRyYXdhbAoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCAxNiA4CglidG9pCglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIHNyYy9JbW1lcnN2ZS5hbGdvLnRzOjMxNgoJLy8gYXNzZXRBbW91bnQ6IHdpdGhkcmF3YWwuYW1vdW50CglmcmFtZV9kaWcgMSAvLyBzdG9yYWdlIGFjY291bnQvL3dpdGhkcmF3YWwKCWZyYW1lX2RpZyAwIC8vIHN0b3JhZ2Uga2V5Ly93aXRoZHJhd2FsCglhcHBfbG9jYWxfZ2V0CglleHRyYWN0IDI0IDgKCWJ0b2kKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL0ltbWVyc3ZlLmFsZ28udHM6MzE5CgkvLyB0aGlzLndpdGhkcmF3YWxzKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdhbF9oYXNoKS5kZWxldGUoKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC01IC8vIHdpdGhkcmF3YWxfaGFzaDogYnl0ZXMzMgoJYXBwX2xvY2FsX2RlbAoJcmV0c3ViCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiZGVwbG95KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2RlcGxveQoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgInNldEFkbWluKGFkZHJlc3Mpdm9pZCIKCW1ldGhvZCAic2V0V2l0aGRyYXdhbFJvdW5kcyh1aW50NjQpdm9pZCIKCW1ldGhvZCAiY2FyZENyZWF0ZShwYXksc3RyaW5nLGFkZHJlc3MpYWRkcmVzcyIKCW1ldGhvZCAiY2FyZENsb3NlKHN0cmluZyxhZGRyZXNzLGFjY291bnQpdm9pZCIKCW1ldGhvZCAiY2FyZEFkZEFzc2V0KHBheSxzdHJpbmcsYWNjb3VudCxhc3NldCl2b2lkIgoJbWV0aG9kICJjYXJkUmVtb3ZlQXNzZXQoc3RyaW5nLGFjY291bnQsYXNzZXQpdm9pZCIKCW1ldGhvZCAiY2FyZERlYml0KGFjY291bnQsYWNjb3VudCxhc3NldCx1aW50NjQpdm9pZCIKCW1ldGhvZCAiY2FyZFdpdGhkcmF3YWxSZXF1ZXN0KHN0cmluZyxhY2NvdW50LGFzc2V0LHVpbnQ2NClieXRlWzMyXSIKCW1ldGhvZCAiY2FyZFdpdGhkcmF3YWxDYW5jZWwoc3RyaW5nLGFjY291bnQsYnl0ZVszMl0pdm9pZCIKCW1ldGhvZCAiY2FyZFdpdGhkcmF3KHN0cmluZyxhY2NvdW50LGFjY291bnQsYXNzZXQsYnl0ZVszMl0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9zZXRBZG1pbiBhYmlfcm91dGVfc2V0V2l0aGRyYXdhbFJvdW5kcyBhYmlfcm91dGVfY2FyZENyZWF0ZSBhYmlfcm91dGVfY2FyZENsb3NlIGFiaV9yb3V0ZV9jYXJkQWRkQXNzZXQgYWJpX3JvdXRlX2NhcmRSZW1vdmVBc3NldCBhYmlfcm91dGVfY2FyZERlYml0IGFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbFJlcXVlc3QgYWJpX3JvdXRlX2NhcmRXaXRoZHJhd2FsQ2FuY2VsIGFiaV9yb3V0ZV9jYXJkV2l0aGRyYXcKCWVycgoKY2FsbF9PcHRJbjoKCW1ldGhvZCAiY2FyZFdpdGhkcmF3YWxSZXF1ZXN0KHN0cmluZyxhY2NvdW50LGFzc2V0LHVpbnQ2NClieXRlWzMyXSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jYXJkV2l0aGRyYXdhbFJlcXVlc3QKCWVycgoKY2FsbF9DbG9zZU91dDoKCW1ldGhvZCAiY2FyZFdpdGhkcmF3KHN0cmluZyxhY2NvdW50LGFjY291bnQsYXNzZXQsYnl0ZVszMl0pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jYXJkV2l0aGRyYXcKCWVycgoKY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCW1ldGhvZCAidXBkYXRlKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3VwZGF0ZQoJZXJyCgpjYWxsX0RlbGV0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJkZXN0cm95KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2Rlc3Ryb3kKCWVycgoKcHJvY2Vzc19zdGF0aWNfdHVwbGVfZWxlbWVudDoKCXByb3RvIDQgMwoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMSAvLyBlbGVtZW50Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1YgoKcHJvY2Vzc19keW5hbWljX3R1cGxlX2VsZW1lbnQ6Cglwcm90byA0IDMKCWZyYW1lX2RpZyAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtNCAvLyB0dXBsZSBoZWFkCglmcmFtZV9kaWcgLTEgLy8gZWxlbWVudAoJZHVwCglsZW4KCWZyYW1lX2RpZyAtMiAvLyBoZWFkIG9mZnNldAoJYnRvaQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2J1cnkgLTIgLy8gaGVhZCBvZmZzZXQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTMgLy8gdHVwbGUgdGFpbAoJZnJhbWVfZGlnIC00IC8vIHR1cGxlIGhlYWQKCWZyYW1lX2RpZyAtMyAvLyB0dXBsZSB0YWlsCglmcmFtZV9kaWcgLTIgLy8gaGVhZCBvZmZzZXQKCXJldHN1Yg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Immersve",
    "desc": "",
    "methods": [
      {
        "name": "deploy",
        "desc": "Deploy the smart contract, setting the transaction sender as the admin",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update",
        "desc": "Allows the admin to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the admin account. This can only be done if there are no active cards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAdmin",
        "desc": "Allows the current admin to set a new admin",
        "args": [
          {
            "name": "admin",
            "type": "address",
            "desc": "Address to be made admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalRounds",
        "desc": "Set the number of rounds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "rounds",
            "type": "uint64",
            "desc": "New number of rounds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "address",
            "desc": "Address to have control over asset withdrawals"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        }
      },
      {
        "name": "cardClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "owner",
            "type": "address",
            "desc": "Address which has control over asset withdrawals"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardAddAsset",
        "desc": "Allows the owner (or admin) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to add asset to"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardRemoveAsset",
        "desc": "Allows the owner (or admin) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to remove asset from"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDebit",
        "desc": "Allows the admin to send an amount of assets from the account",
        "args": [
          {
            "name": "card",
            "type": "account",
            "desc": "Account to debit from"
          },
          {
            "name": "recipient",
            "type": "account",
            "desc": "Receiver of the assets being debited"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to debit"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdrawalRequest",
        "desc": "Allows the owner to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        }
      },
      {
        "name": "cardWithdrawalCancel",
        "desc": "Allows the owner (or admin) to cancel a withdrawal request",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdraw",
        "desc": "Allows the owner to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "recipient",
            "type": "account",
            "desc": "Receiver of the assets being withdrawn"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being withdrawn"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}