{
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalRounds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardCreate(pay,string,address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardClose(string,address,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardAddAsset(pay,string,account,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRemoveAsset(string,account,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDebit(account,account,asset,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdrawalRequest(string,account,asset,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardWithdrawalCancel(string,account,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdraw(string,account,account,asset,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "n"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "active_cards": {
          "type": "uint64",
          "key": "c"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "w"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Immersve",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy the smart contract, setting the transaction sender as the owner",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active cards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalRounds",
        "desc": "Set the number of rounds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "rounds",
            "type": "uint64",
            "desc": "New number of rounds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "depositor",
            "type": "address",
            "desc": "Address to have control over asset withdrawals"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        }
      },
      {
        "name": "cardClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "depositor",
            "type": "address",
            "desc": "Address which has control over asset withdrawals"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardAddAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to add asset to"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardRemoveAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to remove asset from"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset to remove"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDebit",
        "desc": "Allows the owner to send an amount of assets from the account",
        "args": [
          {
            "name": "card",
            "type": "account",
            "desc": "Account to debit from"
          },
          {
            "name": "recipient",
            "type": "account",
            "desc": "Receiver of the assets being debited"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to debit"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdrawalRequest",
        "desc": "Allows the depositor to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        }
      },
      {
        "name": "cardWithdrawalCancel",
        "desc": "Allows the depositor (or owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdraw",
        "desc": "Allows the depositor to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Partner name"
          },
          {
            "name": "card",
            "type": "account",
            "desc": "Account to withdraw from"
          },
          {
            "name": "recipient",
            "type": "account",
            "desc": "Receiver of the assets being withdrawn"
          },
          {
            "name": "asset",
            "type": "asset",
            "desc": "Asset being withdrawn"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      }
    ]
  }
}