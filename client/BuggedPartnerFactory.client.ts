/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "newPartner(address,pay,asset)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BuggedPartnerFactory",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy the Partner Factory, setting the transaction sender as the owner",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "newPartner",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "asset"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the BuggedPartnerFactory smart contract.
 */
export type BuggedPartnerFactory = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'owner()address' | 'owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'transferOwnership(address)void' | 'transferOwnership', {
      argsObj: {
        /**
         * The address of the new owner.
         */
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'deploy(address)void' | 'deploy', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: void
    }>
    & Record<'update()void' | 'update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'destroy()void' | 'destroy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'newPartner(address,pay,asset)uint64' | 'newPartner', {
      argsObj: {
        owner: string
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        asset: number | bigint
      }
      argsTuple: [owner: string, mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: number | bigint]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      '_owner'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BuggedPartnerFactorySig = keyof BuggedPartnerFactory['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BuggedPartnerFactorySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BuggedPartnerFactory smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BuggedPartnerFactorySig> = BuggedPartnerFactory['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BuggedPartnerFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BuggedPartnerFactorySig> = BuggedPartnerFactory['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BuggedPartnerFactoryCreateCalls = (typeof BuggedPartnerFactoryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BuggedPartnerFactoryCreateCallParams =
  | (TypedCallParams<'deploy(address)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type BuggedPartnerFactoryUpdateCalls = (typeof BuggedPartnerFactoryCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type BuggedPartnerFactoryUpdateCallParams =
  | TypedCallParams<'update()void'>
/**
 * A factory for available 'delete' calls
 */
export type BuggedPartnerFactoryDeleteCalls = (typeof BuggedPartnerFactoryCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type BuggedPartnerFactoryDeleteCallParams =
  | TypedCallParams<'destroy()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BuggedPartnerFactoryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BuggedPartnerFactoryCreateCalls) => BuggedPartnerFactoryCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: BuggedPartnerFactoryUpdateCalls) => BuggedPartnerFactoryUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: BuggedPartnerFactoryDeleteCalls) => BuggedPartnerFactoryDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BuggedPartnerFactoryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BuggedPartnerFactory smart contract using the deploy(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deploy(args: MethodArgs<'deploy(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'deploy(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.owner],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the BuggedPartnerFactory smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the BuggedPartnerFactory smart contract using the destroy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'destroy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the owner()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the newPartner(address,pay,asset)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static newPartner(args: MethodArgs<'newPartner(address,pay,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'newPartner(address,pay,asset)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.mbr, args.asset],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BuggedPartnerFactory smart contract
 */
export class BuggedPartnerFactoryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BuggedPartnerFactoryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BuggedPartnerFactory['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BuggedPartnerFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BuggedPartnerFactoryDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BuggedPartnerFactoryCallFactory.create)
    const updateArgs = params.updateCall?.(BuggedPartnerFactoryCallFactory.update)
    const deleteArgs = params.deleteCall?.(BuggedPartnerFactoryCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BuggedPartnerFactory smart contract using the deploy(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async deploy(args: MethodArgs<'deploy(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'deploy(address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BuggedPartnerFactoryCallFactory.create.deploy(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the BuggedPartnerFactory smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'update()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(BuggedPartnerFactoryCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the BuggedPartnerFactory smart contract using the destroy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'destroy()void'>>(await $this.appClient.delete(BuggedPartnerFactoryCallFactory.delete.destroy(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BuggedPartnerFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BuggedPartnerFactoryCallFactory.owner(args, params))
  }

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BuggedPartnerFactoryCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the newPartner(address,pay,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public newPartner(args: MethodArgs<'newPartner(address,pay,asset)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BuggedPartnerFactoryCallFactory.newPartner(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BuggedPartnerFactory['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get _owner() {
        return BuggedPartnerFactoryClient.getBinaryState(state, '_owner')
      },
    }
  }

  public compose(): BuggedPartnerFactoryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.owner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      newPartner(args: MethodArgs<'newPartner(address,pay,asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.newPartner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.destroy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BuggedPartnerFactoryComposer
  }
}
export type BuggedPartnerFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BuggedPartnerFactoryComposer<[...TReturns, MethodReturn<'owner()address'>]>

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BuggedPartnerFactoryComposer<[...TReturns, MethodReturn<'transferOwnership(address)void'>]>

  /**
   * Calls the newPartner(address,pay,asset)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newPartner(args: MethodArgs<'newPartner(address,pay,asset)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BuggedPartnerFactoryComposer<[...TReturns, MethodReturn<'newPartner(address,pay,asset)uint64'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the BuggedPartnerFactory smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): BuggedPartnerFactoryComposer<[...TReturns, MethodReturn<'update()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the BuggedPartnerFactory smart contract using the destroy()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams): BuggedPartnerFactoryComposer<[...TReturns, MethodReturn<'destroy()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BuggedPartnerFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BuggedPartnerFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BuggedPartnerFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BuggedPartnerFactoryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BuggedPartnerFactoryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BuggedPartnerFactoryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BuggedPartnerFactoryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
