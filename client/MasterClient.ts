/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalTimeout(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setEarlyWithdrawalPubkey(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerChannelClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundCreate(pay,address,uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundClose(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRecover(address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDebit(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundRefund(address,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextSettlementNonce()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNextCardFundNonce(address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setSettlementAddress(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundEnableAsset(pay,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundDisableAsset(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardFundWithdrawalCancel(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardFundWithdraw(address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    },
    "cardFundWithdrawEarly(address,byte[32],byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "wn"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "card_funds_active_count": {
          "type": "uint64",
          "key": "cfac"
        },
        "partner_channels_active_count": {
          "type": "uint64",
          "key": "pcac"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "wwt"
        },
        "early_withdrawal_pubkey": {
          "type": "bytes",
          "key": "ewpk"
        },
        "settlement_nonce": {
          "type": "uint64",
          "key": "sn"
        },
        "settlement_address": {
          "type": "bytes",
          "key": "sa"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy a partner channel, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active card funds",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalTimeout",
        "desc": "Set the number of seconds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "seconds",
            "type": "uint64",
            "desc": "New number of seconds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setEarlyWithdrawalPubkey",
        "desc": "Sets the early withdrawal public key.",
        "args": [
          {
            "name": "pubkey",
            "type": "byte[32]",
            "desc": "The public key to set."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerChannelCreate",
        "desc": "Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "The name of the partner channel."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner channel account."
        },
        "events": [
          {
            "name": "PartnerChannelCreated",
            "args": [
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              },
              {
                "name": "partnerChannelName",
                "type": "string",
                "desc": "Partner Channel Name"
              }
            ],
            "desc": "Partner Channel Created event"
          }
        ]
      },
      {
        "name": "partnerChannelClose",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Funding Channel name"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt-in to. 0 = No asset opt-in"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        },
        "events": [
          {
            "name": "CardFundCreated",
            "args": [
              {
                "name": "cardFundOwner",
                "type": "address",
                "desc": "Card Fund Owner"
              },
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Card Fund"
              },
              {
                "name": "partnerChannel",
                "type": "address",
                "desc": "Partner Channel"
              }
            ],
            "desc": "Card Created event"
          }
        ]
      },
      {
        "name": "cardFundClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund to recover."
          },
          {
            "name": "newCardFundHolder",
            "type": "address",
            "desc": "The address of the new card holder."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card fund from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be debited."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "cardFundRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The card account to refund the asset to."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to refund."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to refund."
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Nonce used"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "getNextSettlementNonce",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getNextCardFundNonce",
        "readonly": true,
        "args": [
          {
            "name": "cardFund",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setSettlementAddress",
        "desc": "Sets the settlement address to a new value.",
        "args": [
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "The new settlement address to set."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "SettlementAddressChanged",
            "args": [
              {
                "name": "oldSettlementAddress",
                "type": "address",
                "desc": "Old settlement address"
              },
              {
                "name": "newSettlementAddress",
                "type": "address",
                "desc": "New settlement address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The asset to be transferred."
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "The nonce to prevent duplicate settlements."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "recipient",
                "type": "address",
                "desc": "Settlement destination address"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Settlement nonce to prevent duplicate settlements"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "cardFundEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        },
        "events": [
          {
            "name": "WithdrawalRequest",
            "args": [
              {
                "name": "cardFund",
                "type": "address",
                "desc": "Funding Source to withdraw from"
              },
              {
                "name": "recipient",
                "type": "address",
                "desc": "Recipient address to withdraw to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset to withdraw"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount to withdraw"
              },
              {
                "name": "timestamp",
                "type": "uint64",
                "desc": "Timestamp that must be reached before withdrawal can be completed"
              },
              {
                "name": "nonce",
                "type": "uint64",
                "desc": "Withdrawal nonce"
              }
            ],
            "desc": "Withdrawal Request event"
          }
        ]
      },
      {
        "name": "cardFundWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardFundWithdrawEarly",
        "desc": "Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "The hash of the withdrawal."
          },
          {
            "name": "early_withdrawal_sig",
            "type": "byte[32]",
            "desc": "The signature for early withdrawal."
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "PartnerChannelCreated",
        "args": [
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          },
          {
            "name": "partnerChannelName",
            "type": "string",
            "desc": "Partner Channel Name"
          }
        ],
        "desc": "Partner Channel Created event"
      },
      {
        "name": "CardFundCreated",
        "args": [
          {
            "name": "cardFundOwner",
            "type": "address",
            "desc": "Card Fund Owner"
          },
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "partnerChannel",
            "type": "address",
            "desc": "Partner Channel"
          }
        ],
        "desc": "Card Created event"
      },
      {
        "name": "CardFundAssetEnabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Enabled event"
      },
      {
        "name": "CardFundAssetDisabled",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Card Fund"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset"
          }
        ],
        "desc": "Card Fund Asset Disabled event"
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Nonce used"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "SettlementAddressChanged",
        "args": [
          {
            "name": "oldSettlementAddress",
            "type": "address",
            "desc": "Old settlement address"
          },
          {
            "name": "newSettlementAddress",
            "type": "address",
            "desc": "New settlement address"
          }
        ],
        "desc": ""
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "Settlement destination address"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Settlement nonce to prevent duplicate settlements"
          }
        ],
        "desc": "Settlement event"
      },
      {
        "name": "WithdrawalRequest",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address to withdraw to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          },
          {
            "name": "timestamp",
            "type": "uint64",
            "desc": "Timestamp that must be reached before withdrawal can be completed"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal Request event"
      },
      {
        "name": "Withdrawal",
        "args": [
          {
            "name": "cardFund",
            "type": "address",
            "desc": "Funding Source withdrawn from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Recipient address withdrawn to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset withdrawn"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount withdrawn"
          },
          {
            "name": "nonce",
            "type": "uint64",
            "desc": "Withdrawal nonce"
          }
        ],
        "desc": "Withdrawal event"
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Master smart contract.
 */
export type Master = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'owner()address' | 'owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'transferOwnership(address)void' | 'transferOwnership', {
      argsObj: {
        /**
         * The address of the new owner.
         */
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'deploy(address)address' | 'deploy', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: string
    }>
    & Record<'update()void' | 'update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'destroy()void' | 'destroy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setWithdrawalTimeout(uint64)void' | 'setWithdrawalTimeout', {
      argsObj: {
        /**
         * New number of seconds to wait
         */
        seconds: bigint | number
      }
      argsTuple: [seconds: bigint | number]
      returns: void
    }>
    & Record<'setEarlyWithdrawalPubkey(byte[32])void' | 'setEarlyWithdrawalPubkey', {
      argsObj: {
        /**
         * The public key to set.
         */
        pubkey: Uint8Array
      }
      argsTuple: [pubkey: Uint8Array]
      returns: void
    }>
    & Record<'partnerChannelCreate(pay,string)address' | 'partnerChannelCreate', {
      argsObj: {
        /**
         * The PayTxn object representing the payment transaction.
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The name of the partner channel.
         */
        partnerChannelName: string
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partnerChannelName: string]
      /**
       * The address of the newly created partner channel account.
       */
      returns: string
    }>
    & Record<'partnerChannelClose(address)void' | 'partnerChannelClose', {
      argsObj: {
        partnerChannel: string
      }
      argsTuple: [partnerChannel: string]
      returns: void
    }>
    & Record<'cardFundCreate(pay,address,uint64)address' | 'cardFundCreate', {
      argsObj: {
        /**
         * Payment transaction of minimum balance requirement
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Funding Channel name
         */
        partnerChannel: string
        /**
         * Asset to opt-in to. 0 = No asset opt-in
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partnerChannel: string, asset: bigint | number]
      /**
       * Newly generated account used by their card
       */
      returns: string
    }>
    & Record<'cardFundClose(address)void' | 'cardFundClose', {
      argsObj: {
        /**
         * Address to close
         */
        cardFund: string
      }
      argsTuple: [cardFund: string]
      returns: void
    }>
    & Record<'cardFundRecover(address,address)void' | 'cardFundRecover', {
      argsObj: {
        /**
         * The card fund to recover.
         */
        cardFund: string
        /**
         * The address of the new card holder.
         */
        newCardFundHolder: string
      }
      argsTuple: [cardFund: string, newCardFundHolder: string]
      returns: void
    }>
    & Record<'assetAllowlistAdd(pay,uint64)void' | 'assetAllowlistAdd', {
      argsObj: {
        /**
         * Payment transaction of minimum balance requirement
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The AssetID of the asset being transferred.
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: bigint | number]
      returns: void
    }>
    & Record<'assetAllowlistRemove(uint64)void' | 'assetAllowlistRemove', {
      argsObj: {
        /**
         * The AssetID of the asset being transferred.
         */
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'cardFundDebit(address,uint64,uint64,uint64)void' | 'cardFundDebit', {
      argsObj: {
        /**
         * The card fund from which the asset will be debited.
         */
        cardFund: string
        /**
         * The asset to be debited.
         */
        asset: bigint | number
        /**
         * The amount of the asset to be debited.
         */
        amount: bigint | number
        nonce: bigint | number
      }
      argsTuple: [cardFund: string, asset: bigint | number, amount: bigint | number, nonce: bigint | number]
      returns: void
    }>
    & Record<'cardFundRefund(address,uint64,uint64,uint64)void' | 'cardFundRefund', {
      argsObj: {
        /**
         * The card account to refund the asset to.
         */
        cardFund: string
        /**
         * The asset to refund.
         */
        asset: bigint | number
        /**
         * The amount of the asset to refund.
         */
        amount: bigint | number
        nonce: bigint | number
      }
      argsTuple: [cardFund: string, asset: bigint | number, amount: bigint | number, nonce: bigint | number]
      returns: void
    }>
    & Record<'getNextSettlementNonce()uint64' | 'getNextSettlementNonce', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getNextCardFundNonce(address)uint64' | 'getNextCardFundNonce', {
      argsObj: {
        cardFund: string
      }
      argsTuple: [cardFund: string]
      returns: bigint
    }>
    & Record<'setSettlementAddress(address)void' | 'setSettlementAddress', {
      argsObj: {
        /**
         * The new settlement address to set.
         */
        newSettlementAddress: string
      }
      argsTuple: [newSettlementAddress: string]
      returns: void
    }>
    & Record<'settle(uint64,uint64,uint64)void' | 'settle', {
      argsObj: {
        /**
         * The asset to be transferred.
         */
        asset: bigint | number
        /**
         * The amount of the asset to be transferred.
         */
        amount: bigint | number
        /**
         * The nonce to prevent duplicate settlements.
         */
        nonce: bigint | number
      }
      argsTuple: [asset: bigint | number, amount: bigint | number, nonce: bigint | number]
      returns: void
    }>
    & Record<'cardFundEnableAsset(pay,address,uint64)void' | 'cardFundEnableAsset', {
      argsObj: {
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Address to add asset to
         */
        cardFund: string
        /**
         * Asset to add
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, cardFund: string, asset: bigint | number]
      returns: void
    }>
    & Record<'cardFundDisableAsset(address,uint64)void' | 'cardFundDisableAsset', {
      argsObj: {
        /**
         * The address of the card.
         */
        cardFund: string
        /**
         * The ID of the asset to be removed.
         */
        asset: bigint | number
      }
      argsTuple: [cardFund: string, asset: bigint | number]
      returns: void
    }>
    & Record<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]' | 'cardFundWithdrawalRequest', {
      argsObj: {
        /**
         * Address to withdraw from
         */
        cardFund: string
        recipient: string
        /**
         * Asset to withdraw
         */
        asset: bigint | number
        /**
         * Amount to withdraw
         */
        amount: bigint | number
      }
      argsTuple: [cardFund: string, recipient: string, asset: bigint | number, amount: bigint | number]
      /**
       * Withdrawal hash used for completing or cancelling the withdrawal
       */
      returns: Uint8Array
    }>
    & Record<'cardFundWithdrawalCancel(address,byte[32])void' | 'cardFundWithdrawalCancel', {
      argsObj: {
        /**
         * Address to withdraw from
         */
        cardFund: string
        /**
         * Hash of the withdrawal request
         */
        withdrawalHash: Uint8Array
      }
      argsTuple: [cardFund: string, withdrawalHash: Uint8Array]
      returns: void
    }>
    & Record<'cardFundWithdraw(address,byte[32])void' | 'cardFundWithdraw', {
      argsObj: {
        /**
         * Address to withdraw from
         */
        cardFund: string
        /**
         * Hash of the withdrawal request
         */
        withdrawalHash: Uint8Array
      }
      argsTuple: [cardFund: string, withdrawalHash: Uint8Array]
      returns: void
    }>
    & Record<'cardFundWithdrawEarly(address,byte[32],byte[32])void' | 'cardFundWithdrawEarly', {
      argsObj: {
        /**
         * The address of the card.
         */
        cardFund: string
        /**
         * The hash of the withdrawal.
         */
        withdrawalHash: Uint8Array
        /**
         * The signature for early withdrawal.
         */
        earlyWithdrawalSig: Uint8Array
      }
      argsTuple: [cardFund: string, withdrawalHash: Uint8Array, earlyWithdrawalSig: Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      owner?: BinaryState
      cfac?: IntegerState
      pcac?: IntegerState
      wwt?: IntegerState
      ewpk?: BinaryState
      sn?: IntegerState
      sa?: BinaryState
    }
    local: {
      wn?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MasterSig = keyof Master['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MasterSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Master smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MasterSig> = Master['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Master smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MasterSig> = Master['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MasterCreateCalls = (typeof MasterCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MasterCreateCallParams =
  | (TypedCallParams<'deploy(address)address'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type MasterUpdateCalls = (typeof MasterCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type MasterUpdateCallParams =
  | TypedCallParams<'update()void'>
/**
 * A factory for available 'delete' calls
 */
export type MasterDeleteCalls = (typeof MasterCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type MasterDeleteCallParams =
  | TypedCallParams<'destroy()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type MasterDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MasterCreateCalls) => MasterCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: MasterUpdateCalls) => MasterUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: MasterDeleteCalls) => MasterDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MasterCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Master smart contract using the deploy(address)address ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deploy(args: MethodArgs<'deploy(address)address'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'deploy(address)address' as const,
          methodArgs: Array.isArray(args) ? args : [args.owner],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Master smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Master smart contract using the destroy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'destroy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Master smart contract using the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]' as const,
          methodArgs: Array.isArray(args) ? args : [args.cardFund, args.recipient, args.asset, args.amount],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the Master smart contract using the cardFundWithdraw(address,byte[32])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'cardFundWithdraw(address,byte[32])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.cardFund, args.withdrawalHash],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the owner()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setWithdrawalTimeout(uint64)void ABI method
   *
   * Set the number of seconds a withdrawal request must wait until being withdrawn
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setWithdrawalTimeout(args: MethodArgs<'setWithdrawalTimeout(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setWithdrawalTimeout(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.seconds],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setEarlyWithdrawalPubkey(byte[32])void ABI method
   *
   * Sets the early withdrawal public key.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setEarlyWithdrawalPubkey(args: MethodArgs<'setEarlyWithdrawalPubkey(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setEarlyWithdrawalPubkey(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pubkey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerChannelCreate(pay,string)address ABI method
   *
   * Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerChannelCreate(args: MethodArgs<'partnerChannelCreate(pay,string)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerChannelCreate(pay,string)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partnerChannelName],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerChannelClose(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerChannelClose(args: MethodArgs<'partnerChannelClose(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerChannelClose(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partnerChannel],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundCreate(pay,address,uint64)address ABI method
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundCreate(args: MethodArgs<'cardFundCreate(pay,address,uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundCreate(pay,address,uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partnerChannel, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundClose(address)void ABI method
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundClose(args: MethodArgs<'cardFundClose(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundClose(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundRecover(address,address)void ABI method
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundRecover(args: MethodArgs<'cardFundRecover(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundRecover(address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.newCardFundHolder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetAllowlistAdd(pay,uint64)void ABI method
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetAllowlistAdd(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetAllowlistRemove(uint64)void ABI method
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetAllowlistRemove(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundDebit(address,uint64,uint64,uint64)void ABI method
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundDebit(args: MethodArgs<'cardFundDebit(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundDebit(address,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.asset, args.amount, args.nonce],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundRefund(address,uint64,uint64,uint64)void ABI method
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundRefund(args: MethodArgs<'cardFundRefund(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundRefund(address,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.asset, args.amount, args.nonce],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNextSettlementNonce()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNextSettlementNonce(args: MethodArgs<'getNextSettlementNonce()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNextSettlementNonce()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getNextCardFundNonce(address)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getNextCardFundNonce(args: MethodArgs<'getNextCardFundNonce(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getNextCardFundNonce(address)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setSettlementAddress(address)void ABI method
   *
   * Sets the settlement address to a new value.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setSettlementAddress(args: MethodArgs<'setSettlementAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setSettlementAddress(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newSettlementAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the settle(uint64,uint64,uint64)void ABI method
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static settle(args: MethodArgs<'settle(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'settle(uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.amount, args.nonce],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundEnableAsset(pay,address,uint64)void ABI method
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundEnableAsset(args: MethodArgs<'cardFundEnableAsset(pay,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundEnableAsset(pay,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.cardFund, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundDisableAsset(address,uint64)void ABI method
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundDisableAsset(args: MethodArgs<'cardFundDisableAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundDisableAsset(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.recipient, args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundWithdrawalCancel(address,byte[32])void ABI method
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundWithdrawalCancel(args: MethodArgs<'cardFundWithdrawalCancel(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundWithdrawalCancel(address,byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.withdrawalHash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundWithdraw(address,byte[32])void ABI method
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundWithdraw(address,byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.withdrawalHash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardFundWithdrawEarly(address,byte[32],byte[32])void ABI method
   *
   * Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardFundWithdrawEarly(args: MethodArgs<'cardFundWithdrawEarly(address,byte[32],byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardFundWithdrawEarly(address,byte[32],byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.cardFund, args.withdrawalHash, args.earlyWithdrawalSig],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Master smart contract
 */
export class MasterClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MasterClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Master['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Master smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MasterDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MasterCallFactory.create)
    const updateArgs = params.updateCall?.(MasterCallFactory.update)
    const deleteArgs = params.deleteCall?.(MasterCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Master smart contract using the deploy(address)address ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async deploy(args: MethodArgs<'deploy(address)address'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'deploy(address)address'>, AppCreateCallTransactionResult>(await $this.appClient.create(MasterCallFactory.create.deploy(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Master smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'update()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(MasterCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Master smart contract using the destroy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'destroy()void'>>(await $this.appClient.delete(MasterCallFactory.delete.destroy(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Master smart contract using the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result: Withdrawal hash used for completing or cancelling the withdrawal
       */
      async cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>>(await $this.appClient.optIn(MasterCallFactory.optIn.cardFundWithdrawalRequest(args, params)))
      },
    }
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this
    return {
      /**
       * Makes a close out call to an existing instance of the Master smart contract using the cardFundWithdraw(address,byte[32])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The closeOut result
       */
      async cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'cardFundWithdraw(address,byte[32])void'>>(await $this.appClient.closeOut(MasterCallFactory.closeOut.cardFundWithdraw(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Master smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.owner(args, params))
  }

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the setWithdrawalTimeout(uint64)void ABI method.
   *
   * Set the number of seconds a withdrawal request must wait until being withdrawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setWithdrawalTimeout(args: MethodArgs<'setWithdrawalTimeout(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.setWithdrawalTimeout(args, params))
  }

  /**
   * Calls the setEarlyWithdrawalPubkey(byte[32])void ABI method.
   *
   * Sets the early withdrawal public key.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setEarlyWithdrawalPubkey(args: MethodArgs<'setEarlyWithdrawalPubkey(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.setEarlyWithdrawalPubkey(args, params))
  }

  /**
   * Calls the partnerChannelCreate(pay,string)address ABI method.
   *
   * Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The address of the newly created partner channel account.
   */
  public partnerChannelCreate(args: MethodArgs<'partnerChannelCreate(pay,string)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerChannelCreate(args, params))
  }

  /**
   * Calls the partnerChannelClose(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public partnerChannelClose(args: MethodArgs<'partnerChannelClose(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerChannelClose(args, params))
  }

  /**
   * Calls the cardFundCreate(pay,address,uint64)address ABI method.
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Newly generated account used by their card
   */
  public cardFundCreate(args: MethodArgs<'cardFundCreate(pay,address,uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundCreate(args, params))
  }

  /**
   * Calls the cardFundClose(address)void ABI method.
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundClose(args: MethodArgs<'cardFundClose(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundClose(args, params))
  }

  /**
   * Calls the cardFundRecover(address,address)void ABI method.
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundRecover(args: MethodArgs<'cardFundRecover(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundRecover(args, params))
  }

  /**
   * Calls the assetAllowlistAdd(pay,uint64)void ABI method.
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.assetAllowlistAdd(args, params))
  }

  /**
   * Calls the assetAllowlistRemove(uint64)void ABI method.
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.assetAllowlistRemove(args, params))
  }

  /**
   * Calls the cardFundDebit(address,uint64,uint64,uint64)void ABI method.
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundDebit(args: MethodArgs<'cardFundDebit(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundDebit(args, params))
  }

  /**
   * Calls the cardFundRefund(address,uint64,uint64,uint64)void ABI method.
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundRefund(args: MethodArgs<'cardFundRefund(address,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundRefund(args, params))
  }

  /**
   * Calls the getNextSettlementNonce()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNextSettlementNonce(args: MethodArgs<'getNextSettlementNonce()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.getNextSettlementNonce(args, params))
  }

  /**
   * Calls the getNextCardFundNonce(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getNextCardFundNonce(args: MethodArgs<'getNextCardFundNonce(address)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.getNextCardFundNonce(args, params))
  }

  /**
   * Calls the setSettlementAddress(address)void ABI method.
   *
   * Sets the settlement address to a new value.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setSettlementAddress(args: MethodArgs<'setSettlementAddress(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.setSettlementAddress(args, params))
  }

  /**
   * Calls the settle(uint64,uint64,uint64)void ABI method.
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public settle(args: MethodArgs<'settle(uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.settle(args, params))
  }

  /**
   * Calls the cardFundEnableAsset(pay,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundEnableAsset(args: MethodArgs<'cardFundEnableAsset(pay,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundEnableAsset(args, params))
  }

  /**
   * Calls the cardFundDisableAsset(address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundDisableAsset(args: MethodArgs<'cardFundDisableAsset(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundDisableAsset(args, params))
  }

  /**
   * Calls the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method.
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Withdrawal hash used for completing or cancelling the withdrawal
   */
  public cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundWithdrawalRequest(args, params))
  }

  /**
   * Calls the cardFundWithdrawalCancel(address,byte[32])void ABI method.
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundWithdrawalCancel(args: MethodArgs<'cardFundWithdrawalCancel(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundWithdrawalCancel(args, params))
  }

  /**
   * Calls the cardFundWithdraw(address,byte[32])void ABI method.
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundWithdraw(args, params))
  }

  /**
   * Calls the cardFundWithdrawEarly(address,byte[32],byte[32])void ABI method.
   *
   * Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardFundWithdrawEarly(args: MethodArgs<'cardFundWithdrawEarly(address,byte[32],byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardFundWithdrawEarly(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Master['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get owner() {
        return MasterClient.getBinaryState(state, '_owner')
      },
      get cfac() {
        return MasterClient.getIntegerState(state, 'cfac')
      },
      get pcac() {
        return MasterClient.getIntegerState(state, 'pcac')
      },
      get wwt() {
        return MasterClient.getIntegerState(state, 'wwt')
      },
      get ewpk() {
        return MasterClient.getBinaryState(state, 'ewpk')
      },
      get sn() {
        return MasterClient.getIntegerState(state, 'sn')
      },
      get sa() {
        return MasterClient.getBinaryState(state, 'sa')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<Master['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get wn() {
        return MasterClient.getIntegerState(state, 'wn')
      },
    }
  }

  public compose(): MasterComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.owner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setWithdrawalTimeout(args: MethodArgs<'setWithdrawalTimeout(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setWithdrawalTimeout(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setEarlyWithdrawalPubkey(args: MethodArgs<'setEarlyWithdrawalPubkey(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setEarlyWithdrawalPubkey(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerChannelCreate(args: MethodArgs<'partnerChannelCreate(pay,string)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerChannelCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerChannelClose(args: MethodArgs<'partnerChannelClose(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerChannelClose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundCreate(args: MethodArgs<'cardFundCreate(pay,address,uint64)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundClose(args: MethodArgs<'cardFundClose(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundClose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundRecover(args: MethodArgs<'cardFundRecover(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundRecover(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetAllowlistAdd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetAllowlistRemove(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundDebit(args: MethodArgs<'cardFundDebit(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundDebit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundRefund(args: MethodArgs<'cardFundRefund(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundRefund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNextSettlementNonce(args: MethodArgs<'getNextSettlementNonce()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNextSettlementNonce(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getNextCardFundNonce(args: MethodArgs<'getNextCardFundNonce(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getNextCardFundNonce(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setSettlementAddress(args: MethodArgs<'setSettlementAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setSettlementAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      settle(args: MethodArgs<'settle(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.settle(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundEnableAsset(args: MethodArgs<'cardFundEnableAsset(pay,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundEnableAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundDisableAsset(args: MethodArgs<'cardFundDisableAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundDisableAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundWithdrawalRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundWithdrawalCancel(args: MethodArgs<'cardFundWithdrawalCancel(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundWithdrawalCancel(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardFundWithdrawEarly(args: MethodArgs<'cardFundWithdrawEarly(address,byte[32],byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardFundWithdrawEarly(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.destroy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.cardFundWithdrawalRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get closeOut() {
        const $this = this
        return {
          cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.closeOut.cardFundWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MasterComposer
  }
}
export type MasterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'owner()address'>]>

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'transferOwnership(address)void'>]>

  /**
   * Calls the setWithdrawalTimeout(uint64)void ABI method.
   *
   * Set the number of seconds a withdrawal request must wait until being withdrawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setWithdrawalTimeout(args: MethodArgs<'setWithdrawalTimeout(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'setWithdrawalTimeout(uint64)void'>]>

  /**
   * Calls the setEarlyWithdrawalPubkey(byte[32])void ABI method.
   *
   * Sets the early withdrawal public key.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setEarlyWithdrawalPubkey(args: MethodArgs<'setEarlyWithdrawalPubkey(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'setEarlyWithdrawalPubkey(byte[32])void'>]>

  /**
   * Calls the partnerChannelCreate(pay,string)address ABI method.
   *
   * Creates a partner channel account and associates it with the provided partner channel name.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerChannelCreate(args: MethodArgs<'partnerChannelCreate(pay,string)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerChannelCreate(pay,string)address'>]>

  /**
   * Calls the partnerChannelClose(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerChannelClose(args: MethodArgs<'partnerChannelClose(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerChannelClose(address)void'>]>

  /**
   * Calls the cardFundCreate(pay,address,uint64)address ABI method.
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundCreate(args: MethodArgs<'cardFundCreate(pay,address,uint64)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundCreate(pay,address,uint64)address'>]>

  /**
   * Calls the cardFundClose(address)void ABI method.
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundClose(args: MethodArgs<'cardFundClose(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundClose(address)void'>]>

  /**
   * Calls the cardFundRecover(address,address)void ABI method.
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundRecover(args: MethodArgs<'cardFundRecover(address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundRecover(address,address)void'>]>

  /**
   * Calls the assetAllowlistAdd(pay,uint64)void ABI method.
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'assetAllowlistAdd(pay,uint64)void'>]>

  /**
   * Calls the assetAllowlistRemove(uint64)void ABI method.
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'assetAllowlistRemove(uint64)void'>]>

  /**
   * Calls the cardFundDebit(address,uint64,uint64,uint64)void ABI method.
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundDebit(args: MethodArgs<'cardFundDebit(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundDebit(address,uint64,uint64,uint64)void'>]>

  /**
   * Calls the cardFundRefund(address,uint64,uint64,uint64)void ABI method.
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundRefund(args: MethodArgs<'cardFundRefund(address,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundRefund(address,uint64,uint64,uint64)void'>]>

  /**
   * Calls the getNextSettlementNonce()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNextSettlementNonce(args: MethodArgs<'getNextSettlementNonce()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'getNextSettlementNonce()uint64'>]>

  /**
   * Calls the getNextCardFundNonce(address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getNextCardFundNonce(args: MethodArgs<'getNextCardFundNonce(address)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'getNextCardFundNonce(address)uint64'>]>

  /**
   * Calls the setSettlementAddress(address)void ABI method.
   *
   * Sets the settlement address to a new value.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setSettlementAddress(args: MethodArgs<'setSettlementAddress(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'setSettlementAddress(address)void'>]>

  /**
   * Calls the settle(uint64,uint64,uint64)void ABI method.
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  settle(args: MethodArgs<'settle(uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'settle(uint64,uint64,uint64)void'>]>

  /**
   * Calls the cardFundEnableAsset(pay,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundEnableAsset(args: MethodArgs<'cardFundEnableAsset(pay,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundEnableAsset(pay,address,uint64)void'>]>

  /**
   * Calls the cardFundDisableAsset(address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundDisableAsset(args: MethodArgs<'cardFundDisableAsset(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundDisableAsset(address,uint64)void'>]>

  /**
   * Calls the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method.
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>]>

  /**
   * Calls the cardFundWithdrawalCancel(address,byte[32])void ABI method.
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundWithdrawalCancel(args: MethodArgs<'cardFundWithdrawalCancel(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdrawalCancel(address,byte[32])void'>]>

  /**
   * Calls the cardFundWithdraw(address,byte[32])void ABI method.
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdraw(address,byte[32])void'>]>

  /**
   * Calls the cardFundWithdrawEarly(address,byte[32],byte[32])void ABI method.
   *
   * Withdraws funds before the withdrawal timestamp has lapsed, by using the early withdrawal signature provided by Immersve.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardFundWithdrawEarly(args: MethodArgs<'cardFundWithdrawEarly(address,byte[32],byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdrawEarly(address,byte[32],byte[32])void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Master smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): MasterComposer<[...TReturns, MethodReturn<'update()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Master smart contract using the destroy()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'destroy()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Master smart contract using the cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32] ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    cardFundWithdrawalRequest(args: MethodArgs<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdrawalRequest(address,address,uint64,uint64)byte[32]'>]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the Master smart contract using the cardFundWithdraw(address,byte[32])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    cardFundWithdraw(args: MethodArgs<'cardFundWithdraw(address,byte[32])void'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'cardFundWithdraw(address,byte[32])void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Master smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MasterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<MasterComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<MasterComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type MasterComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type MasterComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
