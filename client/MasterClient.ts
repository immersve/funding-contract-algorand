/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy(address)address": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "setWithdrawalRounds(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerCreate(pay,string)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerClose(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardCreate(pay,string,address)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardClose(string,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRecover(string,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistAdd(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetAllowlistRemove(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerAcceptAsset(pay,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "partnerRejectAsset(string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDebit(string,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardRefund(string,address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "settle(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardEnableAsset(pay,string,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardDisableAsset(string,address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdrawalRequest(string,address,uint64,uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "cardWithdrawalCancel(string,address,byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cardWithdraw(string,address,address,byte[32])void": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "withdrawal_nonce": {
          "type": "uint64",
          "key": "n"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "active_cards": {
          "type": "uint64",
          "key": "c"
        },
        "active_partners": {
          "type": "uint64",
          "key": "p"
        },
        "withdrawal_wait_time": {
          "type": "uint64",
          "key": "w"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 15,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deploy",
        "desc": "Deploy a Partner, setting the owner as provided",
        "args": [
          {
            "name": "owner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "update",
        "desc": "Allows the owner to update the smart contract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "desc": "Destroy the smart contract, sending all Algo to the owner account. This can only be done if there are no active cards",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWithdrawalRounds",
        "desc": "Set the number of rounds a withdrawal request must wait until being withdrawn",
        "args": [
          {
            "name": "rounds",
            "type": "uint64",
            "desc": "New number of rounds to wait"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerCreate",
        "desc": "Creates a partner account and associates it with the provided partner name.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the payment transaction."
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "The name of the partner."
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The address of the newly created partner account."
        }
      },
      {
        "name": "partnerClose",
        "args": [
          {
            "name": "partner",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardCreate",
        "desc": "Create account. This generates a brand new account and funds the minimum balance requirement",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "cardHolder",
            "type": "address",
            "desc": "Address to have control over asset withdrawals"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "Newly generated account used by their card"
        }
      },
      {
        "name": "cardClose",
        "desc": "Close account. This permanently removes the rekey and deletes the account from the ledger",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "cardHolder",
            "type": "address",
            "desc": "Address which has control over asset withdrawals"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to close"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardRecover",
        "desc": "Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "The partner associated with the cards."
          },
          {
            "name": "oldCardHolder",
            "type": "address",
            "desc": "The address of the old card holder."
          },
          {
            "name": "newCardHolder",
            "type": "address",
            "desc": "The address of the new card holder."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistAdd",
        "desc": "Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "Payment transaction of minimum balance requirement"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetAllowlistRemove",
        "desc": "Allows the master contract to reject accepting an asset.",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The AssetID of the asset being transferred."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerAcceptAsset",
        "desc": "Allows the specified asset to be transferred for users of this partner.",
        "args": [
          {
            "name": "mbr",
            "type": "pay",
            "desc": "The PayTxn object representing the transaction."
          },
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be allowed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "partnerRejectAsset",
        "desc": "Revokes an asset by closing out its balance and transferring the minimum balance to the sender.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to revoke."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDebit",
        "desc": "Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The card account from which the asset will be debited."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be debited."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Debit",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being debited from"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being debited"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being debited"
              }
            ],
            "desc": "Debit event"
          }
        ]
      },
      {
        "name": "cardRefund",
        "desc": "Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.",
        "args": [
          {
            "name": "partner",
            "type": "string"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The card account to refund the asset to."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to refund."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Refund",
            "args": [
              {
                "name": "card",
                "type": "address",
                "desc": "Funding Source being refunded to"
              },
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being refunded"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being refunded"
              }
            ],
            "desc": "Refund event"
          }
        ]
      },
      {
        "name": "settle",
        "desc": "Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.",
        "args": [
          {
            "name": "recipient",
            "type": "address",
            "desc": "The address of the recipient."
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "The amount of the asset to be transferred."
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Settlement",
            "args": [
              {
                "name": "asset",
                "type": "uint64",
                "desc": "Asset being settled"
              },
              {
                "name": "amount",
                "type": "uint64",
                "desc": "Amount being settled"
              }
            ],
            "desc": "Settlement event"
          }
        ]
      },
      {
        "name": "cardEnableAsset",
        "desc": "Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account",
        "args": [
          {
            "name": "mbr",
            "type": "pay"
          },
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to add asset to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to add"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardDisableAsset",
        "desc": "Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "The funding channel associated with the card."
          },
          {
            "name": "card",
            "type": "address",
            "desc": "The address of the card."
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "The ID of the asset to be removed."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdrawalRequest",
        "desc": "Allows the Card Holder (or contract owner) to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to withdraw"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount to withdraw"
          }
        ],
        "returns": {
          "type": "byte[32]",
          "desc": "Withdrawal hash used for completing or cancelling the withdrawal"
        }
      },
      {
        "name": "cardWithdrawalCancel",
        "desc": "Allows the Card Holder (or contract owner) to cancel a withdrawal request",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cardWithdraw",
        "desc": "Allows the Card Holder to send an amount of assets from the account",
        "args": [
          {
            "name": "partner",
            "type": "string",
            "desc": "Funding Channel name"
          },
          {
            "name": "card",
            "type": "address",
            "desc": "Address to withdraw from"
          },
          {
            "name": "recipient",
            "type": "address",
            "desc": "Receiver of the assets being withdrawn"
          },
          {
            "name": "withdrawal_hash",
            "type": "byte[32]",
            "desc": "Hash of the withdrawal request"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "CardCreated",
        "args": [],
        "desc": ""
      },
      {
        "name": "Debit",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being debited from"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being debited"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being debited"
          }
        ],
        "desc": "Debit event"
      },
      {
        "name": "Refund",
        "args": [
          {
            "name": "card",
            "type": "address",
            "desc": "Funding Source being refunded to"
          },
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being refunded"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being refunded"
          }
        ],
        "desc": "Refund event"
      },
      {
        "name": "Settlement",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset being settled"
          },
          {
            "name": "amount",
            "type": "uint64",
            "desc": "Amount being settled"
          }
        ],
        "desc": "Settlement event"
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Master smart contract.
 */
export type Master = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'owner()address' | 'owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'transferOwnership(address)void' | 'transferOwnership', {
      argsObj: {
        /**
         * The address of the new owner.
         */
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'deploy(address)address' | 'deploy', {
      argsObj: {
        owner: string
      }
      argsTuple: [owner: string]
      returns: string
    }>
    & Record<'update()void' | 'update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'destroy()void' | 'destroy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'setWithdrawalRounds(uint64)void' | 'setWithdrawalRounds', {
      argsObj: {
        /**
         * New number of rounds to wait
         */
        rounds: bigint | number
      }
      argsTuple: [rounds: bigint | number]
      returns: void
    }>
    & Record<'partnerCreate(pay,string)address' | 'partnerCreate', {
      argsObj: {
        /**
         * The PayTxn object representing the payment transaction.
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The name of the partner.
         */
        partner: string
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partner: string]
      /**
       * The address of the newly created partner account.
       */
      returns: string
    }>
    & Record<'partnerClose(string)void' | 'partnerClose', {
      argsObj: {
        partner: string
      }
      argsTuple: [partner: string]
      returns: void
    }>
    & Record<'cardCreate(pay,string,address)address' | 'cardCreate', {
      argsObj: {
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        partner: string
        /**
         * Address to have control over asset withdrawals
         */
        cardHolder: string
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partner: string, cardHolder: string]
      /**
       * Newly generated account used by their card
       */
      returns: string
    }>
    & Record<'cardClose(string,address,address)void' | 'cardClose', {
      argsObj: {
        /**
         * Funding Channel name
         */
        partner: string
        /**
         * Address which has control over asset withdrawals
         */
        cardHolder: string
        /**
         * Address to close
         */
        card: string
      }
      argsTuple: [partner: string, cardHolder: string, card: string]
      returns: void
    }>
    & Record<'cardRecover(string,address,address)void' | 'cardRecover', {
      argsObj: {
        /**
         * The partner associated with the cards.
         */
        partner: string
        /**
         * The address of the old card holder.
         */
        oldCardHolder: string
        /**
         * The address of the new card holder.
         */
        newCardHolder: string
      }
      argsTuple: [partner: string, oldCardHolder: string, newCardHolder: string]
      returns: void
    }>
    & Record<'assetAllowlistAdd(pay,uint64)void' | 'assetAllowlistAdd', {
      argsObj: {
        /**
         * Payment transaction of minimum balance requirement
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The AssetID of the asset being transferred.
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, asset: bigint | number]
      returns: void
    }>
    & Record<'assetAllowlistRemove(uint64)void' | 'assetAllowlistRemove', {
      argsObj: {
        /**
         * The AssetID of the asset being transferred.
         */
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'partnerAcceptAsset(pay,string,uint64)void' | 'partnerAcceptAsset', {
      argsObj: {
        /**
         * The PayTxn object representing the transaction.
         */
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        partner: string
        /**
         * The ID of the asset to be allowed.
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partner: string, asset: bigint | number]
      returns: void
    }>
    & Record<'partnerRejectAsset(string,uint64)void' | 'partnerRejectAsset', {
      argsObj: {
        partner: string
        /**
         * The ID of the asset to revoke.
         */
        asset: bigint | number
      }
      argsTuple: [partner: string, asset: bigint | number]
      returns: void
    }>
    & Record<'cardDebit(string,address,uint64,uint64)void' | 'cardDebit', {
      argsObj: {
        partner: string
        /**
         * The card account from which the asset will be debited.
         */
        card: string
        asset: bigint | number
        /**
         * The amount of the asset to be debited.
         */
        amount: bigint | number
      }
      argsTuple: [partner: string, card: string, asset: bigint | number, amount: bigint | number]
      returns: void
    }>
    & Record<'cardRefund(string,address,uint64,uint64)void' | 'cardRefund', {
      argsObj: {
        partner: string
        /**
         * The card account to refund the asset to.
         */
        card: string
        asset: bigint | number
        /**
         * The amount of the asset to refund.
         */
        amount: bigint | number
      }
      argsTuple: [partner: string, card: string, asset: bigint | number, amount: bigint | number]
      returns: void
    }>
    & Record<'settle(address,uint64,uint64)void' | 'settle', {
      argsObj: {
        /**
         * The address of the recipient.
         */
        recipient: string
        asset: bigint | number
        /**
         * The amount of the asset to be transferred.
         */
        amount: bigint | number
      }
      argsTuple: [recipient: string, asset: bigint | number, amount: bigint | number]
      returns: void
    }>
    & Record<'cardEnableAsset(pay,string,address,uint64)void' | 'cardEnableAsset', {
      argsObj: {
        mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * Funding Channel name
         */
        partner: string
        /**
         * Address to add asset to
         */
        card: string
        /**
         * Asset to add
         */
        asset: bigint | number
      }
      argsTuple: [mbr: TransactionToSign | Transaction | Promise<SendTransactionResult>, partner: string, card: string, asset: bigint | number]
      returns: void
    }>
    & Record<'cardDisableAsset(string,address,uint64)void' | 'cardDisableAsset', {
      argsObj: {
        /**
         * The funding channel associated with the card.
         */
        partner: string
        /**
         * The address of the card.
         */
        card: string
        /**
         * The ID of the asset to be removed.
         */
        asset: bigint | number
      }
      argsTuple: [partner: string, card: string, asset: bigint | number]
      returns: void
    }>
    & Record<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]' | 'cardWithdrawalRequest', {
      argsObj: {
        /**
         * Funding Channel name
         */
        partner: string
        /**
         * Address to withdraw from
         */
        card: string
        /**
         * Asset to withdraw
         */
        asset: bigint | number
        /**
         * Amount to withdraw
         */
        amount: bigint | number
      }
      argsTuple: [partner: string, card: string, asset: bigint | number, amount: bigint | number]
      /**
       * Withdrawal hash used for completing or cancelling the withdrawal
       */
      returns: Uint8Array
    }>
    & Record<'cardWithdrawalCancel(string,address,byte[32])void' | 'cardWithdrawalCancel', {
      argsObj: {
        /**
         * Funding Channel name
         */
        partner: string
        /**
         * Address to withdraw from
         */
        card: string
        /**
         * Hash of the withdrawal request
         */
        withdrawal_hash: Uint8Array
      }
      argsTuple: [partner: string, card: string, withdrawal_hash: Uint8Array]
      returns: void
    }>
    & Record<'cardWithdraw(string,address,address,byte[32])void' | 'cardWithdraw', {
      argsObj: {
        /**
         * Funding Channel name
         */
        partner: string
        /**
         * Address to withdraw from
         */
        card: string
        /**
         * Receiver of the assets being withdrawn
         */
        recipient: string
        /**
         * Hash of the withdrawal request
         */
        withdrawal_hash: Uint8Array
      }
      argsTuple: [partner: string, card: string, recipient: string, withdrawal_hash: Uint8Array]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      '_owner'?: BinaryState
      'c'?: IntegerState
      'p'?: IntegerState
      'w'?: IntegerState
    }
    local: {
      'n'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MasterSig = keyof Master['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MasterSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Master smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MasterSig> = Master['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Master smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MasterSig> = Master['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MasterCreateCalls = (typeof MasterCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MasterCreateCallParams =
  | (TypedCallParams<'deploy(address)address'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type MasterUpdateCalls = (typeof MasterCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type MasterUpdateCallParams =
  | TypedCallParams<'update()void'>
/**
 * A factory for available 'delete' calls
 */
export type MasterDeleteCalls = (typeof MasterCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type MasterDeleteCallParams =
  | TypedCallParams<'destroy()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type MasterDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MasterCreateCalls) => MasterCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: MasterUpdateCalls) => MasterUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: MasterDeleteCalls) => MasterDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MasterCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Master smart contract using the deploy(address)address ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deploy(args: MethodArgs<'deploy(address)address'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'deploy(address)address' as const,
          methodArgs: Array.isArray(args) ? args : [args.owner],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Master smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Master smart contract using the destroy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'destroy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Master smart contract using the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]' as const,
          methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.asset, args.amount],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the Master smart contract using the cardWithdraw(string,address,address,byte[32])void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'cardWithdraw(string,address,address,byte[32])void' as const,
          methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.recipient, args.withdrawal_hash],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the owner()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setWithdrawalRounds(uint64)void ABI method
   *
   * Set the number of rounds a withdrawal request must wait until being withdrawn
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setWithdrawalRounds(args: MethodArgs<'setWithdrawalRounds(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setWithdrawalRounds(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rounds],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerCreate(pay,string)address ABI method
   *
   * Creates a partner account and associates it with the provided partner name.Only the owner of the contract can call this function.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerCreate(args: MethodArgs<'partnerCreate(pay,string)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerCreate(pay,string)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerClose(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerClose(args: MethodArgs<'partnerClose(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerClose(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardCreate(pay,string,address)address ABI method
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardCreate(args: MethodArgs<'cardCreate(pay,string,address)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardCreate(pay,string,address)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partner, args.cardHolder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardClose(string,address,address)void ABI method
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardClose(args: MethodArgs<'cardClose(string,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardClose(string,address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.cardHolder, args.card],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardRecover(string,address,address)void ABI method
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardRecover(args: MethodArgs<'cardRecover(string,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardRecover(string,address,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.oldCardHolder, args.newCardHolder],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetAllowlistAdd(pay,uint64)void ABI method
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetAllowlistAdd(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetAllowlistRemove(uint64)void ABI method
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetAllowlistRemove(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerAcceptAsset(pay,string,uint64)void ABI method
   *
   * Allows the specified asset to be transferred for users of this partner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerAcceptAsset(args: MethodArgs<'partnerAcceptAsset(pay,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerAcceptAsset(pay,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partner, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the partnerRejectAsset(string,uint64)void ABI method
   *
   * Revokes an asset by closing out its balance and transferring the minimum balance to the sender.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static partnerRejectAsset(args: MethodArgs<'partnerRejectAsset(string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'partnerRejectAsset(string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardDebit(string,address,uint64,uint64)void ABI method
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardDebit(args: MethodArgs<'cardDebit(string,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardDebit(string,address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardRefund(string,address,uint64,uint64)void ABI method
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardRefund(args: MethodArgs<'cardRefund(string,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardRefund(string,address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the settle(address,uint64,uint64)void ABI method
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static settle(args: MethodArgs<'settle(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'settle(address,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipient, args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardEnableAsset(pay,string,address,uint64)void ABI method
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardEnableAsset(args: MethodArgs<'cardEnableAsset(pay,string,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardEnableAsset(pay,string,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbr, args.partner, args.card, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardDisableAsset(string,address,uint64)void ABI method
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardDisableAsset(args: MethodArgs<'cardDisableAsset(string,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardDisableAsset(string,address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.asset, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardWithdrawalCancel(string,address,byte[32])void ABI method
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardWithdrawalCancel(args: MethodArgs<'cardWithdrawalCancel(string,address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardWithdrawalCancel(string,address,byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.withdrawal_hash],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cardWithdraw(string,address,address,byte[32])void ABI method
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cardWithdraw(string,address,address,byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.partner, args.card, args.recipient, args.withdrawal_hash],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Master smart contract
 */
export class MasterClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MasterClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Master['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Master smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MasterDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MasterCallFactory.create)
    const updateArgs = params.updateCall?.(MasterCallFactory.update)
    const deleteArgs = params.deleteCall?.(MasterCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Master smart contract using the deploy(address)address ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async deploy(args: MethodArgs<'deploy(address)address'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'deploy(address)address'>, AppCreateCallTransactionResult>(await $this.appClient.create(MasterCallFactory.create.deploy(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Master smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & AppClientCompilationParams = {}) {
        return $this.mapReturnValue<MethodReturn<'update()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(MasterCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Master smart contract using the destroy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'destroy()void'>>(await $this.appClient.delete(MasterCallFactory.delete.destroy(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Master smart contract using the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result: Withdrawal hash used for completing or cancelling the withdrawal
       */
      async cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>>(await $this.appClient.optIn(MasterCallFactory.optIn.cardWithdrawalRequest(args, params)))
      },
    }
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this
    return {
      /**
       * Makes a close out call to an existing instance of the Master smart contract using the cardWithdraw(string,address,address,byte[32])void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The closeOut result
       */
      async cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'cardWithdraw(string,address,address,byte[32])void'>>(await $this.appClient.closeOut(MasterCallFactory.closeOut.cardWithdraw(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Master smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.owner(args, params))
  }

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the setWithdrawalRounds(uint64)void ABI method.
   *
   * Set the number of rounds a withdrawal request must wait until being withdrawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setWithdrawalRounds(args: MethodArgs<'setWithdrawalRounds(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.setWithdrawalRounds(args, params))
  }

  /**
   * Calls the partnerCreate(pay,string)address ABI method.
   *
   * Creates a partner account and associates it with the provided partner name.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The address of the newly created partner account.
   */
  public partnerCreate(args: MethodArgs<'partnerCreate(pay,string)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerCreate(args, params))
  }

  /**
   * Calls the partnerClose(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public partnerClose(args: MethodArgs<'partnerClose(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerClose(args, params))
  }

  /**
   * Calls the cardCreate(pay,string,address)address ABI method.
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Newly generated account used by their card
   */
  public cardCreate(args: MethodArgs<'cardCreate(pay,string,address)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardCreate(args, params))
  }

  /**
   * Calls the cardClose(string,address,address)void ABI method.
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardClose(args: MethodArgs<'cardClose(string,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardClose(args, params))
  }

  /**
   * Calls the cardRecover(string,address,address)void ABI method.
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardRecover(args: MethodArgs<'cardRecover(string,address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardRecover(args, params))
  }

  /**
   * Calls the assetAllowlistAdd(pay,uint64)void ABI method.
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.assetAllowlistAdd(args, params))
  }

  /**
   * Calls the assetAllowlistRemove(uint64)void ABI method.
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.assetAllowlistRemove(args, params))
  }

  /**
   * Calls the partnerAcceptAsset(pay,string,uint64)void ABI method.
   *
   * Allows the specified asset to be transferred for users of this partner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public partnerAcceptAsset(args: MethodArgs<'partnerAcceptAsset(pay,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerAcceptAsset(args, params))
  }

  /**
   * Calls the partnerRejectAsset(string,uint64)void ABI method.
   *
   * Revokes an asset by closing out its balance and transferring the minimum balance to the sender.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public partnerRejectAsset(args: MethodArgs<'partnerRejectAsset(string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.partnerRejectAsset(args, params))
  }

  /**
   * Calls the cardDebit(string,address,uint64,uint64)void ABI method.
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardDebit(args: MethodArgs<'cardDebit(string,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardDebit(args, params))
  }

  /**
   * Calls the cardRefund(string,address,uint64,uint64)void ABI method.
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardRefund(args: MethodArgs<'cardRefund(string,address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardRefund(args, params))
  }

  /**
   * Calls the settle(address,uint64,uint64)void ABI method.
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public settle(args: MethodArgs<'settle(address,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.settle(args, params))
  }

  /**
   * Calls the cardEnableAsset(pay,string,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardEnableAsset(args: MethodArgs<'cardEnableAsset(pay,string,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardEnableAsset(args, params))
  }

  /**
   * Calls the cardDisableAsset(string,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardDisableAsset(args: MethodArgs<'cardDisableAsset(string,address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardDisableAsset(args, params))
  }

  /**
   * Calls the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method.
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Withdrawal hash used for completing or cancelling the withdrawal
   */
  public cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardWithdrawalRequest(args, params))
  }

  /**
   * Calls the cardWithdrawalCancel(string,address,byte[32])void ABI method.
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardWithdrawalCancel(args: MethodArgs<'cardWithdrawalCancel(string,address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardWithdrawalCancel(args, params))
  }

  /**
   * Calls the cardWithdraw(string,address,address,byte[32])void ABI method.
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MasterCallFactory.cardWithdraw(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Master['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get _owner() {
        return MasterClient.getBinaryState(state, '_owner')
      },
      get c() {
        return MasterClient.getIntegerState(state, 'c')
      },
      get p() {
        return MasterClient.getIntegerState(state, 'p')
      },
      get w() {
        return MasterClient.getIntegerState(state, 'w')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<Master['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get n() {
        return MasterClient.getIntegerState(state, 'n')
      },
    }
  }

  public compose(): MasterComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.owner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setWithdrawalRounds(args: MethodArgs<'setWithdrawalRounds(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setWithdrawalRounds(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerCreate(args: MethodArgs<'partnerCreate(pay,string)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerClose(args: MethodArgs<'partnerClose(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerClose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardCreate(args: MethodArgs<'cardCreate(pay,string,address)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardCreate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardClose(args: MethodArgs<'cardClose(string,address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardClose(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardRecover(args: MethodArgs<'cardRecover(string,address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardRecover(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetAllowlistAdd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetAllowlistRemove(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerAcceptAsset(args: MethodArgs<'partnerAcceptAsset(pay,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerAcceptAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      partnerRejectAsset(args: MethodArgs<'partnerRejectAsset(string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.partnerRejectAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardDebit(args: MethodArgs<'cardDebit(string,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardDebit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardRefund(args: MethodArgs<'cardRefund(string,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardRefund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      settle(args: MethodArgs<'settle(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.settle(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardEnableAsset(args: MethodArgs<'cardEnableAsset(pay,string,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardEnableAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardDisableAsset(args: MethodArgs<'cardDisableAsset(string,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardDisableAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardWithdrawalRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardWithdrawalCancel(args: MethodArgs<'cardWithdrawalCancel(string,address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardWithdrawalCancel(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cardWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.destroy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.cardWithdrawalRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get closeOut() {
        const $this = this
        return {
          cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.closeOut.cardWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MasterComposer
  }
}
export type MasterComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'owner()address'>]>

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'transferOwnership(address)void'>]>

  /**
   * Calls the setWithdrawalRounds(uint64)void ABI method.
   *
   * Set the number of rounds a withdrawal request must wait until being withdrawn
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setWithdrawalRounds(args: MethodArgs<'setWithdrawalRounds(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'setWithdrawalRounds(uint64)void'>]>

  /**
   * Calls the partnerCreate(pay,string)address ABI method.
   *
   * Creates a partner account and associates it with the provided partner name.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerCreate(args: MethodArgs<'partnerCreate(pay,string)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerCreate(pay,string)address'>]>

  /**
   * Calls the partnerClose(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerClose(args: MethodArgs<'partnerClose(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerClose(string)void'>]>

  /**
   * Calls the cardCreate(pay,string,address)address ABI method.
   *
   * Create account. This generates a brand new account and funds the minimum balance requirement
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardCreate(args: MethodArgs<'cardCreate(pay,string,address)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardCreate(pay,string,address)address'>]>

  /**
   * Calls the cardClose(string,address,address)void ABI method.
   *
   * Close account. This permanently removes the rekey and deletes the account from the ledger
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardClose(args: MethodArgs<'cardClose(string,address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardClose(string,address,address)void'>]>

  /**
   * Calls the cardRecover(string,address,address)void ABI method.
   *
   * Recovers funds from an old card and transfers them to a new card.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardRecover(args: MethodArgs<'cardRecover(string,address,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardRecover(string,address,address)void'>]>

  /**
   * Calls the assetAllowlistAdd(pay,uint64)void ABI method.
   *
   * Allows the master contract to flag intent of accepting an asset.This can be considered the whitelists whitelist.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetAllowlistAdd(args: MethodArgs<'assetAllowlistAdd(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'assetAllowlistAdd(pay,uint64)void'>]>

  /**
   * Calls the assetAllowlistRemove(uint64)void ABI method.
   *
   * Allows the master contract to reject accepting an asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetAllowlistRemove(args: MethodArgs<'assetAllowlistRemove(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'assetAllowlistRemove(uint64)void'>]>

  /**
   * Calls the partnerAcceptAsset(pay,string,uint64)void ABI method.
   *
   * Allows the specified asset to be transferred for users of this partner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerAcceptAsset(args: MethodArgs<'partnerAcceptAsset(pay,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerAcceptAsset(pay,string,uint64)void'>]>

  /**
   * Calls the partnerRejectAsset(string,uint64)void ABI method.
   *
   * Revokes an asset by closing out its balance and transferring the minimum balance to the sender.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  partnerRejectAsset(args: MethodArgs<'partnerRejectAsset(string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'partnerRejectAsset(string,uint64)void'>]>

  /**
   * Calls the cardDebit(string,address,uint64,uint64)void ABI method.
   *
   * Debits the specified amount of the given asset from the card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardDebit(args: MethodArgs<'cardDebit(string,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardDebit(string,address,uint64,uint64)void'>]>

  /**
   * Calls the cardRefund(string,address,uint64,uint64)void ABI method.
   *
   * Refunds a specified amount of an asset to a card account.Only the owner of the contract can perform this operation.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardRefund(args: MethodArgs<'cardRefund(string,address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardRefund(string,address,uint64,uint64)void'>]>

  /**
   * Calls the settle(address,uint64,uint64)void ABI method.
   *
   * Settles a payment by transferring an asset to the specified recipient.Only the owner of the contract can call this function.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  settle(args: MethodArgs<'settle(address,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'settle(address,uint64,uint64)void'>]>

  /**
   * Calls the cardEnableAsset(pay,string,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to OptIn to an asset, increasing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardEnableAsset(args: MethodArgs<'cardEnableAsset(pay,string,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardEnableAsset(pay,string,address,uint64)void'>]>

  /**
   * Calls the cardDisableAsset(string,address,uint64)void ABI method.
   *
   * Allows the depositor (or owner) to CloseOut of an asset, reducing the minimum balance requirement of the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardDisableAsset(args: MethodArgs<'cardDisableAsset(string,address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardDisableAsset(string,address,uint64)void'>]>

  /**
   * Calls the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method.
   *
   * Allows the Card Holder (or contract owner) to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>]>

  /**
   * Calls the cardWithdrawalCancel(string,address,byte[32])void ABI method.
   *
   * Allows the Card Holder (or contract owner) to cancel a withdrawal request
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardWithdrawalCancel(args: MethodArgs<'cardWithdrawalCancel(string,address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardWithdrawalCancel(string,address,byte[32])void'>]>

  /**
   * Calls the cardWithdraw(string,address,address,byte[32])void ABI method.
   *
   * Allows the Card Holder to send an amount of assets from the account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, MethodReturn<'cardWithdraw(string,address,address,byte[32])void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Master smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): MasterComposer<[...TReturns, MethodReturn<'update()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Master smart contract using the destroy()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'destroy()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Master smart contract using the cardWithdrawalRequest(string,address,uint64,uint64)byte[32] ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    cardWithdrawalRequest(args: MethodArgs<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'cardWithdrawalRequest(string,address,uint64,uint64)byte[32]'>]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the Master smart contract using the cardWithdraw(string,address,address,byte[32])void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    cardWithdraw(args: MethodArgs<'cardWithdraw(string,address,address,byte[32])void'>, params?: AppClientComposeCallCoreParams): MasterComposer<[...TReturns, MethodReturn<'cardWithdraw(string,address,address,byte[32])void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Master smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): MasterComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MasterComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<MasterComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<MasterComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type MasterComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type MasterComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
