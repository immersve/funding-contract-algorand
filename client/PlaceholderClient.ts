/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "owner()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pauser()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "pause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unpause()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updatePauser(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deploy()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "update()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "destroy()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "_owner": {
          "type": "bytes",
          "key": "_owner"
        },
        "_pauser": {
          "type": "bytes",
          "key": "_pauser"
        },
        "paused": {
          "type": "bytes",
          "key": "paused"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Placeholder",
    "desc": "",
    "methods": [
      {
        "name": "owner",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "transferOwnership",
        "desc": "Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.",
        "args": [
          {
            "name": "newOwner",
            "type": "address",
            "desc": "The address of the new owner."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "pauser",
        "desc": "@noticeReturns current pauser@returnPauser's address",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "pause",
        "desc": "@devcalled by the owner to pause, triggers stopped state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Pause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "unpause",
        "desc": "@devcalled by the owner to unpause, returns to normal state",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Unpause",
            "args": [],
            "desc": ""
          }
        ]
      },
      {
        "name": "updatePauser",
        "desc": "@devupdate the pauser role",
        "args": [
          {
            "name": "_newPauser",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "PauserChanged",
            "args": [
              {
                "name": "newAddress",
                "type": "address"
              }
            ],
            "desc": ""
          }
        ]
      },
      {
        "name": "deploy",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "update",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "destroy",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "OwnershipTransferred",
        "args": [
          {
            "name": "previousOwner",
            "type": "address",
            "desc": "Previous owner address"
          },
          {
            "name": "newOwner",
            "type": "address",
            "desc": "New owner address"
          }
        ],
        "desc": "Event emitted when ownership of the contract is transferred."
      },
      {
        "name": "Pause",
        "args": [],
        "desc": ""
      },
      {
        "name": "Unpause",
        "args": [],
        "desc": ""
      },
      {
        "name": "PauserChanged",
        "args": [
          {
            "name": "newAddress",
            "type": "address"
          }
        ],
        "desc": ""
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Placeholder smart contract.
 */
export type Placeholder = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'owner()address' | 'owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'transferOwnership(address)void' | 'transferOwnership', {
      argsObj: {
        /**
         * The address of the new owner.
         */
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'pauser()address' | 'pauser', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'pause()void' | 'pause', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'unpause()void' | 'unpause', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updatePauser(address)void' | 'updatePauser', {
      argsObj: {
        newPauser: string
      }
      argsTuple: [newPauser: string]
      returns: void
    }>
    & Record<'deploy()void' | 'deploy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'update()void' | 'update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'destroy()void' | 'destroy', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      owner?: BinaryState
      pauser?: BinaryState
      paused?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PlaceholderSig = keyof Placeholder['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PlaceholderSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Placeholder smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PlaceholderSig> = Placeholder['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Placeholder smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PlaceholderSig> = Placeholder['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PlaceholderCreateCalls = (typeof PlaceholderCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PlaceholderCreateCallParams =
  | (TypedCallParams<'deploy()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type PlaceholderUpdateCalls = (typeof PlaceholderCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type PlaceholderUpdateCallParams =
  | TypedCallParams<'update()void'>
/**
 * A factory for available 'delete' calls
 */
export type PlaceholderDeleteCalls = (typeof PlaceholderCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type PlaceholderDeleteCallParams =
  | TypedCallParams<'destroy()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type PlaceholderDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PlaceholderCreateCalls) => PlaceholderCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: PlaceholderUpdateCalls) => PlaceholderUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: PlaceholderDeleteCalls) => PlaceholderDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PlaceholderCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Placeholder smart contract using the deploy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deploy(args: MethodArgs<'deploy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'deploy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the Placeholder smart contract using the update()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'update()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Placeholder smart contract using the destroy()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'destroy()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the owner()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pauser()address ABI method
   *
   * @noticeReturns current pauser@returnPauser's address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pauser(args: MethodArgs<'pauser()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pauser()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the pause()void ABI method
   *
   * @devcalled by the owner to pause, triggers stopped state
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static pause(args: MethodArgs<'pause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'pause()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the unpause()void ABI method
   *
   * @devcalled by the owner to unpause, returns to normal state
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static unpause(args: MethodArgs<'unpause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'unpause()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updatePauser(address)void ABI method
   *
   * @devupdate the pauser role
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updatePauser(args: MethodArgs<'updatePauser(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updatePauser(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newPauser],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Placeholder smart contract
 */
export class PlaceholderClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PlaceholderClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Placeholder['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Placeholder smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PlaceholderDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PlaceholderCallFactory.create)
    const updateArgs = params.updateCall?.(PlaceholderCallFactory.update)
    const deleteArgs = params.deleteCall?.(PlaceholderCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Placeholder smart contract using the deploy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async deploy(args: MethodArgs<'deploy()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'deploy()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PlaceholderCallFactory.create.deploy(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the Placeholder smart contract using the update()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async update(args: MethodArgs<'update()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'update()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(PlaceholderCallFactory.update.update(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Placeholder smart contract using the destroy()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async destroy(args: MethodArgs<'destroy()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'destroy()void'>>(await $this.appClient.delete(PlaceholderCallFactory.delete.destroy(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Placeholder smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public owner(args: MethodArgs<'owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.owner(args, params))
  }

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the pauser()address ABI method.
   *
   * @noticeReturns current pauser@returnPauser's address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pauser(args: MethodArgs<'pauser()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.pauser(args, params))
  }

  /**
   * Calls the pause()void ABI method.
   *
   * @devcalled by the owner to pause, triggers stopped state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public pause(args: MethodArgs<'pause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.pause(args, params))
  }

  /**
   * Calls the unpause()void ABI method.
   *
   * @devcalled by the owner to unpause, returns to normal state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public unpause(args: MethodArgs<'unpause()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.unpause(args, params))
  }

  /**
   * Calls the updatePauser(address)void ABI method.
   *
   * @devupdate the pauser role
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updatePauser(args: MethodArgs<'updatePauser(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlaceholderCallFactory.updatePauser(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Placeholder['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get owner() {
        return PlaceholderClient.getBinaryState(state, '_owner')
      },
      get pauser() {
        return PlaceholderClient.getBinaryState(state, '_pauser')
      },
      get paused() {
        return PlaceholderClient.getBinaryState(state, 'paused')
      },
    }
  }

  public compose(): PlaceholderComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.owner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pauser(args: MethodArgs<'pauser()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pauser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      pause(args: MethodArgs<'pause()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.pause(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      unpause(args: MethodArgs<'unpause()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.unpause(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updatePauser(args: MethodArgs<'updatePauser(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updatePauser(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.destroy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PlaceholderComposer
  }
}
export type PlaceholderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the owner()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  owner(args: MethodArgs<'owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'owner()address'>]>

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * Transfers the ownership of the contract to a new owner.Requires the caller to be the current owner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'transferOwnership(address)void'>]>

  /**
   * Calls the pauser()address ABI method.
   *
   * @noticeReturns current pauser@returnPauser's address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauser(args: MethodArgs<'pauser()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'pauser()address'>]>

  /**
   * Calls the pause()void ABI method.
   *
   * @devcalled by the owner to pause, triggers stopped state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pause(args: MethodArgs<'pause()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'pause()void'>]>

  /**
   * Calls the unpause()void ABI method.
   *
   * @devcalled by the owner to unpause, returns to normal state
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  unpause(args: MethodArgs<'unpause()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'unpause()void'>]>

  /**
   * Calls the updatePauser(address)void ABI method.
   *
   * @devupdate the pauser role
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePauser(args: MethodArgs<'updatePauser(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, MethodReturn<'updatePauser(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the Placeholder smart contract using the update()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    update(args: MethodArgs<'update()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): PlaceholderComposer<[...TReturns, MethodReturn<'update()void'>]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Placeholder smart contract using the destroy()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    destroy(args: MethodArgs<'destroy()void'>, params?: AppClientComposeCallCoreParams): PlaceholderComposer<[...TReturns, MethodReturn<'destroy()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Placeholder smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PlaceholderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PlaceholderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PlaceholderComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PlaceholderComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PlaceholderComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PlaceholderComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
