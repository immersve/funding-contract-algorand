#pragma version 9

// This TEAL was generated by TEALScript v0.62.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp call_OptIn call_CloseOut NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication

NOT_IMPLEMENTED:
	err

is_admin:
	proto 0 1

	// contracts/PaymentSystem.algo.ts:64
	// return this.txn.sender === this.admin.value;
	txn Sender
	byte 0x61 // "a"
	app_global_get
	==
	retsub

is_owner:
	proto 2 1

	// contracts/PaymentSystem.algo.ts:73
	// return this.cards({partner: partner, owner: this.txn.sender} as PartnerAndOwner).value === card;
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partner: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	txn Sender
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_get
	assert
	frame_dig -2 // card: address
	==
	retsub

// deploy()void
//
// Deploy the smart contract, setting the transaction sender as the admin
abi_route_deploy:
	// execute deploy()void
	callsub deploy
	int 1
	return

deploy:
	proto 0 0

	// contracts/PaymentSystem.algo.ts:81
	// this.admin.value = this.txn.sender
	byte 0x61 // "a"
	txn Sender
	app_global_put
	retsub

// update()void
//
// Allows the admin to update the smart contract
abi_route_update:
	// execute update()void
	callsub update
	int 1
	return

update:
	proto 0 0

	// contracts/PaymentSystem.algo.ts:89
	// assert(this.is_admin())
	callsub is_admin
	assert
	retsub

// destroy()void
//
// Destroy the smart contract, sending all Algo to the admin account. This can only be done if there are no active cards
abi_route_destroy:
	// execute destroy()void
	callsub destroy
	int 1
	return

destroy:
	proto 0 0

	// contracts/PaymentSystem.algo.ts:97
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:100
	// assert(!this.active_cards.value)
	byte 0x63 // "c"
	app_global_get
	!
	assert

	// contracts/PaymentSystem.algo.ts:102
	// sendPayment({
	//             receiver: this.app.address,
	//             amount: 0,
	//             closeRemainderTo: this.admin.value,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:103
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:104
	// amount: 0
	int 0
	itxn_field Amount

	// contracts/PaymentSystem.algo.ts:105
	// closeRemainderTo: this.admin.value
	byte 0x61 // "a"
	app_global_get
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// setAdmin(address)void
//
// Allows the current admin to set a new admin
// @param admin Address to be made admin
abi_route_setAdmin:
	// admin: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setAdmin(address)void
	callsub setAdmin
	int 1
	return

setAdmin:
	proto 1 0

	// contracts/PaymentSystem.algo.ts:114
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:116
	// this.admin.value = admin
	byte 0x61 // "a"
	frame_dig -1 // admin: address
	app_global_put
	retsub

// setWithdrawalRounds(uint64)void
//
// Set the number of rounds a withdrawal request must wait until being withdrawn
// @param rounds New number of rounds to wait
abi_route_setWithdrawalRounds:
	// rounds: uint64
	txna ApplicationArgs 1
	btoi

	// execute setWithdrawalRounds(uint64)void
	callsub setWithdrawalRounds
	int 1
	return

setWithdrawalRounds:
	proto 1 0

	// contracts/PaymentSystem.algo.ts:124
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:126
	// this.withdrawal_wait_time.value = rounds
	byte 0x77 // "w"
	frame_dig -1 // rounds: uint64
	app_global_put
	retsub

// cardCreate(address,string,pay)address
//
// Create account. This generates a brand new account and funds the minimum balance requirement
// @param owner Address to have control over asset withdrawals
// @returns Newly generated account used by their card
abi_route_cardCreate:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// owner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardCreate(address,string,pay)address
	callsub cardCreate
	int 1
	return

cardCreate:
	proto 4 0

	// contracts/PaymentSystem.algo.ts:135
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:137
	// assert(mbr.amount === card_mbr)
	frame_dig -1 // mbr: pay
	gtxns Amount

	// contracts/PaymentSystem.algo.ts:21
	// globals.minBalance
	global MinBalance
	int 40900
	+
	==
	assert

	// contracts/PaymentSystem.algo.ts:138
	// assert(mbr.receiver === this.app.address)
	frame_dig -1 // mbr: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/PaymentSystem.algo.ts:141
	// card_addr: Address = sendMethodCall<[], Address>({
	//             name: "new",
	//             onCompletion: "DeleteApplication",
	//             approvalProgram: Card.approvalProgram(),
	//             clearStateProgram: Card.clearProgram(),
	//         })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// contracts/PaymentSystem.algo.ts:143
	// onCompletion: "DeleteApplication"
	int DeleteApplication
	itxn_field OnCompletion

	// contracts/PaymentSystem.algo.ts:144
	// approvalProgram: Card.approvalProgram()
	byte b64 CSACAAExGCINgQYLMRkIjQYAAAAAAAAAAAAAACcAiAACI0OKAACxI7IQMgqyByKyCDIOsiAisgGzgAQVH3x1MgpQsImABFYdL+o2GgCOAf/NAA==
	itxn_field ApprovalProgram

	// contracts/PaymentSystem.algo.ts:145
	// clearStateProgram: Card.clearProgram()
	byte b64 CQ==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury -4 // card_addr: address

	// contracts/PaymentSystem.algo.ts:149
	// sendPayment({
	//             receiver: card_addr,
	//             amount: globals.minBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:150
	// receiver: card_addr
	frame_dig -4 // card_addr: address
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:151
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:155
	// this.cards({ partner: partner, owner: owner} as PartnerAndOwner).value = card_addr
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -2 // partner: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -3 // owner: address
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_dig -4 // card_addr: address
	box_put

	// contracts/PaymentSystem.algo.ts:158
	// this.active_cards.value = this.active_cards.value + 1
	byte 0x63 // "c"
	byte 0x63 // "c"
	app_global_get
	int 1
	+
	app_global_put

	// contracts/PaymentSystem.algo.ts:161
	// return card_addr;
	byte 0x151f7c75
	frame_dig -4 // card_addr: address
	concat
	log
	retsub

// cardClose(account,address,string)void
//
// Close account. This permanently removes the rekey and deletes the account from the ledger
// @param partner Partner name
// @param owner Address which has control over asset withdrawals
// @param card Account to close
abi_route_cardClose:
	// card: account
	txna ApplicationArgs 3
	btoi
	txnas Accounts

	// owner: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardClose(account,address,string)void
	callsub cardClose
	int 1
	return

cardClose:
	proto 3 0

	// contracts/PaymentSystem.algo.ts:171
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:173
	// sendPayment({
	//             sender: card,
	//             receiver: card,
	//             amount: 0,
	//             closeRemainderTo: this.txn.sender,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:174
	// sender: card
	frame_dig -3 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:175
	// receiver: card
	frame_dig -3 // card: account
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:176
	// amount: 0
	int 0
	itxn_field Amount

	// contracts/PaymentSystem.algo.ts:177
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:180
	// sendPayment({
	//             receiver: this.txn.sender,
	//             amount: box_mbr,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:181
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:182
	// amount: box_mbr
	int 40900
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:186
	// this.cards({partner: partner, owner: owner} as PartnerAndOwner).delete()
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0022 // initial head offset
	frame_dig -1 // partner: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // owner: address
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_del

	// contracts/PaymentSystem.algo.ts:189
	// this.active_cards.value = this.active_cards.value - 1
	byte 0x63 // "c"
	byte 0x63 // "c"
	app_global_get
	int 1
	-
	app_global_put
	retsub

// cardAddAsset(asset,account,string,pay)void
//
// Allows the owner (or admin) to OptIn to an asset, increasing the minimum balance requirement of the account
// @param partner Partner name
// @param card Account to add asset to
// @param asset Asset to add
abi_route_cardAddAsset:
	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// mbr: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute cardAddAsset(asset,account,string,pay)void
	callsub cardAddAsset
	int 1
	return

cardAddAsset:
	proto 4 0

	// contracts/PaymentSystem.algo.ts:199
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or0
	frame_dig -3 // card: account
	frame_dig -2 // partner: bytes
	callsub is_owner
	||

skip_or0:
	assert

	// contracts/PaymentSystem.algo.ts:201
	// assert(mbr.amount === asset_mbr)
	frame_dig -1 // mbr: pay
	gtxns Amount
	int 100000
	==
	assert

	// contracts/PaymentSystem.algo.ts:202
	// assert(mbr.receiver === this.app.address)
	frame_dig -1 // mbr: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// contracts/PaymentSystem.algo.ts:205
	// sendPayment({
	//             receiver: card,
	//             amount: globals.minBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:206
	// receiver: card
	frame_dig -3 // card: account
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:207
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:210
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: card,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:211
	// sender: card
	frame_dig -3 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:212
	// assetReceiver: card
	frame_dig -3 // card: account
	itxn_field AssetReceiver

	// contracts/PaymentSystem.algo.ts:213
	// xferAsset: asset
	frame_dig -4 // asset: asset
	itxn_field XferAsset

	// contracts/PaymentSystem.algo.ts:214
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardRemoveAsset(asset,account,string)void
//
// Allows the owner (or admin) to CloseOut of an asset, reducing the minimum balance requirement of the account
// @param partner Partner name
// @param card Account to remove asset from
// @param asset Asset to remove
abi_route_cardRemoveAsset:
	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardRemoveAsset(asset,account,string)void
	callsub cardRemoveAsset
	int 1
	return

cardRemoveAsset:
	proto 3 0

	// contracts/PaymentSystem.algo.ts:225
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or1
	frame_dig -2 // card: account
	frame_dig -1 // partner: bytes
	callsub is_owner
	||

skip_or1:
	assert

	// contracts/PaymentSystem.algo.ts:227
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: card,
	//             assetCloseTo: card,
	//             xferAsset: asset,
	//             assetAmount: 0,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:228
	// sender: card
	frame_dig -2 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:229
	// assetReceiver: card
	frame_dig -2 // card: account
	itxn_field AssetReceiver

	// contracts/PaymentSystem.algo.ts:230
	// assetCloseTo: card
	frame_dig -2 // card: account
	itxn_field AssetCloseTo

	// contracts/PaymentSystem.algo.ts:231
	// xferAsset: asset
	frame_dig -3 // asset: asset
	itxn_field XferAsset

	// contracts/PaymentSystem.algo.ts:232
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:236
	// sendPayment({
	//             sender: card,
	//             receiver: this.txn.sender,
	//             amount: globals.minBalance,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:237
	// sender: card
	frame_dig -2 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:238
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/PaymentSystem.algo.ts:239
	// amount: globals.minBalance
	global MinBalance
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardDebit(uint64,asset,account,account)void
//
// Allows the admin to send an amount of assets from the account
// @param card Account to debit from
// @param recipient Receiver of the assets being debited
// @param asset Asset being debited
// @param amount Amount to debit
abi_route_cardDebit:
	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// recipient: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// card: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute cardDebit(uint64,asset,account,account)void
	callsub cardDebit
	int 1
	return

cardDebit:
	proto 4 0

	// contracts/PaymentSystem.algo.ts:251
	// assert(this.is_admin())
	callsub is_admin
	assert

	// contracts/PaymentSystem.algo.ts:253
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: recipient,
	//             xferAsset: asset,
	//             assetAmount: amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:254
	// sender: card
	frame_dig -1 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:255
	// assetReceiver: recipient
	frame_dig -2 // recipient: account
	itxn_field AssetReceiver

	// contracts/PaymentSystem.algo.ts:256
	// xferAsset: asset
	frame_dig -3 // asset: asset
	itxn_field XferAsset

	// contracts/PaymentSystem.algo.ts:257
	// assetAmount: amount
	frame_dig -4 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cardWithdrawalRequest(uint64,asset,account,string)byte[32]
//
// Allows the owner to send an amount of assets from the account
// @param partner Partner name
// @param card Account to withdraw from
// @param asset Asset being withdrawn
// @param amount Amount to withdraw
// @returns Withdrawal hash used for completing or cancelling the withdrawal
abi_route_cardWithdrawalRequest:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// amount: uint64
	txna ApplicationArgs 4
	btoi

	// asset: asset
	txna ApplicationArgs 3
	btoi
	txnas Assets

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdrawalRequest(uint64,asset,account,string)byte[32]
	callsub cardWithdrawalRequest
	int 1
	return

cardWithdrawalRequest:
	proto 6 0

	// contracts/PaymentSystem.algo.ts:272
	// assert(this.is_owner(partner, card))
	frame_dig -2 // card: account
	frame_dig -1 // partner: bytes
	callsub is_owner
	assert

	// contracts/PaymentSystem.algo.ts:274
	// withdrawal: WithdrawalRequest = {
	//             nonce: this.withdrawal_nonce(this.txn.sender).value,
	//             round: globals.round + this.withdrawal_wait_time.value,
	//             asset: asset,
	//             amount: amount,
	//         }
	txn Sender
	byte 0x6e // "n"
	app_local_get
	itob
	global Round
	byte 0x77 // "w"
	app_global_get
	+
	itob
	concat
	frame_dig -3 // asset: asset
	itob
	concat
	frame_dig -4 // amount: uint64
	itob
	concat
	frame_bury -5 // withdrawal: WithdrawalRequest

	// contracts/PaymentSystem.algo.ts:280
	// this.withdrawal_nonce(this.txn.sender).value = this.withdrawal_nonce(this.txn.sender).value + 1
	txn Sender
	byte 0x6e // "n"
	txn Sender
	byte 0x6e // "n"
	app_local_get
	int 1
	+
	app_local_put

	// contracts/PaymentSystem.algo.ts:281
	// withdrawal_hash: byte[32] = sha256(withdrawal as unknown as bytes)
	frame_dig -5 // withdrawal: WithdrawalRequest
	sha256
	frame_bury -6 // withdrawal_hash: byte[32]

	// contracts/PaymentSystem.algo.ts:283
	// this.withdrawals(
	//             this.txn.sender,
	//             withdrawal_hash,
	//         ).value = withdrawal
	txn Sender
	frame_dig -6 // withdrawal_hash: byte[32]
	frame_dig -5 // withdrawal: WithdrawalRequest
	app_local_put

	// contracts/PaymentSystem.algo.ts:288
	// return withdrawal_hash;
	byte 0x151f7c75
	frame_dig -6 // withdrawal_hash: byte[32]
	concat
	log
	retsub

// cardWithdrawalCancel(byte[32],account,string)void
//
// Allows the owner (or admin) to cancel a withdrawal request
// @param partner Partner name
// @param card Account to withdraw from
// @param withdrawal_hash Hash of the withdrawal request
abi_route_cardWithdrawalCancel:
	// withdrawal_hash: byte[32]
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdrawalCancel(byte[32],account,string)void
	callsub cardWithdrawalCancel
	int 1
	return

cardWithdrawalCancel:
	proto 3 0

	// contracts/PaymentSystem.algo.ts:298
	// assert(this.is_admin() || this.is_owner(partner, card))
	callsub is_admin
	dup
	bnz skip_or2
	frame_dig -2 // card: account
	frame_dig -1 // partner: bytes
	callsub is_owner
	||

skip_or2:
	assert

	// contracts/PaymentSystem.algo.ts:300
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -3 // withdrawal_hash: byte[32]
	app_local_del
	retsub

// cardWithdraw(byte[32],asset,account,account,string)void
//
// Allows the owner to send an amount of assets from the account
// @param partner Partner name
// @param card Account to withdraw from
// @param recipient Receiver of the assets being withdrawn
// @param asset Asset being withdrawn
// @param withdrawal_hash Hash of the withdrawal request
abi_route_cardWithdraw:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// withdrawal_hash: byte[32]
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// asset: asset
	txna ApplicationArgs 4
	btoi
	txnas Assets

	// recipient: account
	txna ApplicationArgs 3
	btoi
	txnas Accounts

	// card: account
	txna ApplicationArgs 2
	btoi
	txnas Accounts

	// partner: string
	txna ApplicationArgs 1
	extract 2 0

	// execute cardWithdraw(byte[32],asset,account,account,string)void
	callsub cardWithdraw
	int 1
	return

cardWithdraw:
	proto 6 0

	// contracts/PaymentSystem.algo.ts:314
	// assert(this.is_owner(partner, card))
	frame_dig -2 // card: account
	frame_dig -1 // partner: bytes
	callsub is_owner
	assert

	// contracts/PaymentSystem.algo.ts:316
	// withdrawal: WithdrawalRequest = this.withdrawals(this.txn.sender, withdrawal_hash).value as WithdrawalRequest
	txn Sender
	frame_dig -5 // withdrawal_hash: byte[32]
	app_local_get
	frame_bury -6 // withdrawal: WithdrawalRequest

	// contracts/PaymentSystem.algo.ts:318
	// assert(globals.round >= withdrawal.round)
	global Round
	frame_dig -6 // withdrawal: WithdrawalRequest
	extract 8 8
	btoi
	>=
	assert

	// contracts/PaymentSystem.algo.ts:320
	// sendAssetTransfer({
	//             sender: card,
	//             assetReceiver: recipient,
	//             xferAsset: withdrawal.asset,
	//             assetAmount: withdrawal.amount,
	//         })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/PaymentSystem.algo.ts:321
	// sender: card
	frame_dig -2 // card: account
	itxn_field Sender

	// contracts/PaymentSystem.algo.ts:322
	// assetReceiver: recipient
	frame_dig -3 // recipient: account
	itxn_field AssetReceiver

	// contracts/PaymentSystem.algo.ts:323
	// xferAsset: withdrawal.asset
	frame_dig -6 // withdrawal: WithdrawalRequest
	extract 16 8
	btoi
	itxn_field XferAsset

	// contracts/PaymentSystem.algo.ts:324
	// assetAmount: withdrawal.amount
	frame_dig -6 // withdrawal: WithdrawalRequest
	extract 24 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PaymentSystem.algo.ts:327
	// this.withdrawals(this.txn.sender, withdrawal_hash).delete()
	txn Sender
	frame_dig -5 // withdrawal_hash: byte[32]
	app_local_del
	retsub

create_NoOp:
	method "deploy()void"
	txna ApplicationArgs 0
	match abi_route_deploy
	err

call_NoOp:
	method "setAdmin(address)void"
	method "setWithdrawalRounds(uint64)void"
	method "cardCreate(pay,string,address)address"
	method "cardClose(string,address,account)void"
	method "cardAddAsset(pay,string,account,asset)void"
	method "cardRemoveAsset(string,account,asset)void"
	method "cardDebit(account,account,asset,uint64)void"
	method "cardWithdrawalRequest(string,account,asset,uint64)byte[32]"
	method "cardWithdrawalCancel(string,account,byte[32])void"
	method "cardWithdraw(string,account,account,asset,byte[32])void"
	txna ApplicationArgs 0
	match abi_route_setAdmin abi_route_setWithdrawalRounds abi_route_cardCreate abi_route_cardClose abi_route_cardAddAsset abi_route_cardRemoveAsset abi_route_cardDebit abi_route_cardWithdrawalRequest abi_route_cardWithdrawalCancel abi_route_cardWithdraw
	err

call_OptIn:
	method "cardWithdrawalRequest(string,account,asset,uint64)byte[32]"
	txna ApplicationArgs 0
	match abi_route_cardWithdrawalRequest
	err

call_CloseOut:
	method "cardWithdraw(string,account,account,asset,byte[32])void"
	txna ApplicationArgs 0
	match abi_route_cardWithdraw
	err

call_UpdateApplication:
	method "update()void"
	txna ApplicationArgs 0
	match abi_route_update
	err

call_DeleteApplication:
	method "destroy()void"
	txna ApplicationArgs 0
	match abi_route_destroy
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub